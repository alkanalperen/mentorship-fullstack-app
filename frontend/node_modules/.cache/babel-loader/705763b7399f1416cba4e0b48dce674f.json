{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.remove = remove;\nexports._removeFromScope = _removeFromScope;\nexports._callRemovalHooks = _callRemovalHooks;\nexports._remove = _remove;\nexports._markRemoved = _markRemoved;\nexports._assertUnremoved = _assertUnremoved;\n\nvar _removalHooks = require(\"./lib/removal-hooks\");\n\nvar _cache = require(\"../cache\");\n\nvar _index = require(\"./index\");\n\nfunction remove() {\n  var _this$opts;\n\n  this._assertUnremoved();\n\n  this.resync();\n\n  if (!((_this$opts = this.opts) != null && _this$opts.noScope)) {\n    this._removeFromScope();\n  }\n\n  if (this._callRemovalHooks()) {\n    this._markRemoved();\n\n    return;\n  }\n\n  this.shareCommentsWithSiblings();\n\n  this._remove();\n\n  this._markRemoved();\n}\n\nfunction _removeFromScope() {\n  const bindings = this.getBindingIdentifiers();\n  Object.keys(bindings).forEach(name => this.scope.removeBinding(name));\n}\n\nfunction _callRemovalHooks() {\n  for (const fn of _removalHooks.hooks) {\n    if (fn(this, this.parentPath)) return true;\n  }\n}\n\nfunction _remove() {\n  if (Array.isArray(this.container)) {\n    this.container.splice(this.key, 1);\n    this.updateSiblingKeys(this.key, -1);\n  } else {\n    this._replaceWith(null);\n  }\n}\n\nfunction _markRemoved() {\n  this._traverseFlags |= _index.SHOULD_SKIP | _index.REMOVED;\n  if (this.parent) _cache.path.get(this.parent).delete(this.node);\n  this.node = null;\n}\n\nfunction _assertUnremoved() {\n  if (this.removed) {\n    throw this.buildCodeFrameError(\"NodePath has been removed so is read-only.\");\n  }\n}","map":{"version":3,"sources":["/Users/alperenalkan/obss/frontend/frontend/node_modules/@babel/traverse/lib/path/removal.js"],"names":["Object","defineProperty","exports","value","remove","_removeFromScope","_callRemovalHooks","_remove","_markRemoved","_assertUnremoved","_removalHooks","require","_cache","_index","_this$opts","resync","opts","noScope","shareCommentsWithSiblings","bindings","getBindingIdentifiers","keys","forEach","name","scope","removeBinding","fn","hooks","parentPath","Array","isArray","container","splice","key","updateSiblingKeys","_replaceWith","_traverseFlags","SHOULD_SKIP","REMOVED","parent","path","get","delete","node","removed","buildCodeFrameError"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,MAAR,GAAiBA,MAAjB;AACAF,OAAO,CAACG,gBAAR,GAA2BA,gBAA3B;AACAH,OAAO,CAACI,iBAAR,GAA4BA,iBAA5B;AACAJ,OAAO,CAACK,OAAR,GAAkBA,OAAlB;AACAL,OAAO,CAACM,YAAR,GAAuBA,YAAvB;AACAN,OAAO,CAACO,gBAAR,GAA2BA,gBAA3B;;AAEA,IAAIC,aAAa,GAAGC,OAAO,CAAC,qBAAD,CAA3B;;AAEA,IAAIC,MAAM,GAAGD,OAAO,CAAC,UAAD,CAApB;;AAEA,IAAIE,MAAM,GAAGF,OAAO,CAAC,SAAD,CAApB;;AAEA,SAASP,MAAT,GAAkB;AAChB,MAAIU,UAAJ;;AAEA,OAAKL,gBAAL;;AAEA,OAAKM,MAAL;;AAEA,MAAI,EAAE,CAACD,UAAU,GAAG,KAAKE,IAAnB,KAA4B,IAA5B,IAAoCF,UAAU,CAACG,OAAjD,CAAJ,EAA+D;AAC7D,SAAKZ,gBAAL;AACD;;AAED,MAAI,KAAKC,iBAAL,EAAJ,EAA8B;AAC5B,SAAKE,YAAL;;AAEA;AACD;;AAED,OAAKU,yBAAL;;AAEA,OAAKX,OAAL;;AAEA,OAAKC,YAAL;AACD;;AAED,SAASH,gBAAT,GAA4B;AAC1B,QAAMc,QAAQ,GAAG,KAAKC,qBAAL,EAAjB;AACApB,EAAAA,MAAM,CAACqB,IAAP,CAAYF,QAAZ,EAAsBG,OAAtB,CAA8BC,IAAI,IAAI,KAAKC,KAAL,CAAWC,aAAX,CAAyBF,IAAzB,CAAtC;AACD;;AAED,SAASjB,iBAAT,GAA6B;AAC3B,OAAK,MAAMoB,EAAX,IAAiBhB,aAAa,CAACiB,KAA/B,EAAsC;AACpC,QAAID,EAAE,CAAC,IAAD,EAAO,KAAKE,UAAZ,CAAN,EAA+B,OAAO,IAAP;AAChC;AACF;;AAED,SAASrB,OAAT,GAAmB;AACjB,MAAIsB,KAAK,CAACC,OAAN,CAAc,KAAKC,SAAnB,CAAJ,EAAmC;AACjC,SAAKA,SAAL,CAAeC,MAAf,CAAsB,KAAKC,GAA3B,EAAgC,CAAhC;AACA,SAAKC,iBAAL,CAAuB,KAAKD,GAA5B,EAAiC,CAAC,CAAlC;AACD,GAHD,MAGO;AACL,SAAKE,YAAL,CAAkB,IAAlB;AACD;AACF;;AAED,SAAS3B,YAAT,GAAwB;AACtB,OAAK4B,cAAL,IAAuBvB,MAAM,CAACwB,WAAP,GAAqBxB,MAAM,CAACyB,OAAnD;AACA,MAAI,KAAKC,MAAT,EAAiB3B,MAAM,CAAC4B,IAAP,CAAYC,GAAZ,CAAgB,KAAKF,MAArB,EAA6BG,MAA7B,CAAoC,KAAKC,IAAzC;AACjB,OAAKA,IAAL,GAAY,IAAZ;AACD;;AAED,SAASlC,gBAAT,GAA4B;AAC1B,MAAI,KAAKmC,OAAT,EAAkB;AAChB,UAAM,KAAKC,mBAAL,CAAyB,4CAAzB,CAAN;AACD;AACF","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.remove = remove;\nexports._removeFromScope = _removeFromScope;\nexports._callRemovalHooks = _callRemovalHooks;\nexports._remove = _remove;\nexports._markRemoved = _markRemoved;\nexports._assertUnremoved = _assertUnremoved;\n\nvar _removalHooks = require(\"./lib/removal-hooks\");\n\nvar _cache = require(\"../cache\");\n\nvar _index = require(\"./index\");\n\nfunction remove() {\n  var _this$opts;\n\n  this._assertUnremoved();\n\n  this.resync();\n\n  if (!((_this$opts = this.opts) != null && _this$opts.noScope)) {\n    this._removeFromScope();\n  }\n\n  if (this._callRemovalHooks()) {\n    this._markRemoved();\n\n    return;\n  }\n\n  this.shareCommentsWithSiblings();\n\n  this._remove();\n\n  this._markRemoved();\n}\n\nfunction _removeFromScope() {\n  const bindings = this.getBindingIdentifiers();\n  Object.keys(bindings).forEach(name => this.scope.removeBinding(name));\n}\n\nfunction _callRemovalHooks() {\n  for (const fn of _removalHooks.hooks) {\n    if (fn(this, this.parentPath)) return true;\n  }\n}\n\nfunction _remove() {\n  if (Array.isArray(this.container)) {\n    this.container.splice(this.key, 1);\n    this.updateSiblingKeys(this.key, -1);\n  } else {\n    this._replaceWith(null);\n  }\n}\n\nfunction _markRemoved() {\n  this._traverseFlags |= _index.SHOULD_SKIP | _index.REMOVED;\n  if (this.parent) _cache.path.get(this.parent).delete(this.node);\n  this.node = null;\n}\n\nfunction _assertUnremoved() {\n  if (this.removed) {\n    throw this.buildCodeFrameError(\"NodePath has been removed so is read-only.\");\n  }\n}"]},"metadata":{},"sourceType":"script"}