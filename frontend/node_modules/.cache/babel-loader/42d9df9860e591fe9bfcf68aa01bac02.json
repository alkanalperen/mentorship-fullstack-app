{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.VariableDeclarator = VariableDeclarator;\nexports.TypeCastExpression = TypeCastExpression;\nexports.NewExpression = NewExpression;\nexports.TemplateLiteral = TemplateLiteral;\nexports.UnaryExpression = UnaryExpression;\nexports.BinaryExpression = BinaryExpression;\nexports.LogicalExpression = LogicalExpression;\nexports.ConditionalExpression = ConditionalExpression;\nexports.SequenceExpression = SequenceExpression;\nexports.ParenthesizedExpression = ParenthesizedExpression;\nexports.AssignmentExpression = AssignmentExpression;\nexports.UpdateExpression = UpdateExpression;\nexports.StringLiteral = StringLiteral;\nexports.NumericLiteral = NumericLiteral;\nexports.BooleanLiteral = BooleanLiteral;\nexports.NullLiteral = NullLiteral;\nexports.RegExpLiteral = RegExpLiteral;\nexports.ObjectExpression = ObjectExpression;\nexports.ArrayExpression = ArrayExpression;\nexports.RestElement = RestElement;\nexports.ClassDeclaration = exports.ClassExpression = exports.FunctionDeclaration = exports.ArrowFunctionExpression = exports.FunctionExpression = Func;\nexports.CallExpression = CallExpression;\nexports.TaggedTemplateExpression = TaggedTemplateExpression;\nObject.defineProperty(exports, \"Identifier\", {\n  enumerable: true,\n  get: function () {\n    return _infererReference.default;\n  }\n});\n\nvar t = require(\"@babel/types\");\n\nvar _infererReference = require(\"./inferer-reference\");\n\nfunction VariableDeclarator() {\n  var _type;\n\n  const id = this.get(\"id\");\n  if (!id.isIdentifier()) return;\n  const init = this.get(\"init\");\n  let type = init.getTypeAnnotation();\n\n  if (((_type = type) == null ? void 0 : _type.type) === \"AnyTypeAnnotation\") {\n    if (init.isCallExpression() && init.get(\"callee\").isIdentifier({\n      name: \"Array\"\n    }) && !init.scope.hasBinding(\"Array\", true)) {\n      type = ArrayExpression();\n    }\n  }\n\n  return type;\n}\n\nfunction TypeCastExpression(node) {\n  return node.typeAnnotation;\n}\n\nTypeCastExpression.validParent = true;\n\nfunction NewExpression(node) {\n  if (this.get(\"callee\").isIdentifier()) {\n    return t.genericTypeAnnotation(node.callee);\n  }\n}\n\nfunction TemplateLiteral() {\n  return t.stringTypeAnnotation();\n}\n\nfunction UnaryExpression(node) {\n  const operator = node.operator;\n\n  if (operator === \"void\") {\n    return t.voidTypeAnnotation();\n  } else if (t.NUMBER_UNARY_OPERATORS.indexOf(operator) >= 0) {\n    return t.numberTypeAnnotation();\n  } else if (t.STRING_UNARY_OPERATORS.indexOf(operator) >= 0) {\n    return t.stringTypeAnnotation();\n  } else if (t.BOOLEAN_UNARY_OPERATORS.indexOf(operator) >= 0) {\n    return t.booleanTypeAnnotation();\n  }\n}\n\nfunction BinaryExpression(node) {\n  const operator = node.operator;\n\n  if (t.NUMBER_BINARY_OPERATORS.indexOf(operator) >= 0) {\n    return t.numberTypeAnnotation();\n  } else if (t.BOOLEAN_BINARY_OPERATORS.indexOf(operator) >= 0) {\n    return t.booleanTypeAnnotation();\n  } else if (operator === \"+\") {\n    const right = this.get(\"right\");\n    const left = this.get(\"left\");\n\n    if (left.isBaseType(\"number\") && right.isBaseType(\"number\")) {\n      return t.numberTypeAnnotation();\n    } else if (left.isBaseType(\"string\") || right.isBaseType(\"string\")) {\n      return t.stringTypeAnnotation();\n    }\n\n    return t.unionTypeAnnotation([t.stringTypeAnnotation(), t.numberTypeAnnotation()]);\n  }\n}\n\nfunction LogicalExpression() {\n  const argumentTypes = [this.get(\"left\").getTypeAnnotation(), this.get(\"right\").getTypeAnnotation()];\n\n  if (t.isTSTypeAnnotation(argumentTypes[0]) && t.createTSUnionType) {\n    return t.createTSUnionType(argumentTypes);\n  }\n\n  if (t.createFlowUnionType) {\n    return t.createFlowUnionType(argumentTypes);\n  }\n\n  return t.createUnionTypeAnnotation(argumentTypes);\n}\n\nfunction ConditionalExpression() {\n  const argumentTypes = [this.get(\"consequent\").getTypeAnnotation(), this.get(\"alternate\").getTypeAnnotation()];\n\n  if (t.isTSTypeAnnotation(argumentTypes[0]) && t.createTSUnionType) {\n    return t.createTSUnionType(argumentTypes);\n  }\n\n  if (t.createFlowUnionType) {\n    return t.createFlowUnionType(argumentTypes);\n  }\n\n  return t.createUnionTypeAnnotation(argumentTypes);\n}\n\nfunction SequenceExpression() {\n  return this.get(\"expressions\").pop().getTypeAnnotation();\n}\n\nfunction ParenthesizedExpression() {\n  return this.get(\"expression\").getTypeAnnotation();\n}\n\nfunction AssignmentExpression() {\n  return this.get(\"right\").getTypeAnnotation();\n}\n\nfunction UpdateExpression(node) {\n  const operator = node.operator;\n\n  if (operator === \"++\" || operator === \"--\") {\n    return t.numberTypeAnnotation();\n  }\n}\n\nfunction StringLiteral() {\n  return t.stringTypeAnnotation();\n}\n\nfunction NumericLiteral() {\n  return t.numberTypeAnnotation();\n}\n\nfunction BooleanLiteral() {\n  return t.booleanTypeAnnotation();\n}\n\nfunction NullLiteral() {\n  return t.nullLiteralTypeAnnotation();\n}\n\nfunction RegExpLiteral() {\n  return t.genericTypeAnnotation(t.identifier(\"RegExp\"));\n}\n\nfunction ObjectExpression() {\n  return t.genericTypeAnnotation(t.identifier(\"Object\"));\n}\n\nfunction ArrayExpression() {\n  return t.genericTypeAnnotation(t.identifier(\"Array\"));\n}\n\nfunction RestElement() {\n  return ArrayExpression();\n}\n\nRestElement.validParent = true;\n\nfunction Func() {\n  return t.genericTypeAnnotation(t.identifier(\"Function\"));\n}\n\nconst isArrayFrom = t.buildMatchMemberExpression(\"Array.from\");\nconst isObjectKeys = t.buildMatchMemberExpression(\"Object.keys\");\nconst isObjectValues = t.buildMatchMemberExpression(\"Object.values\");\nconst isObjectEntries = t.buildMatchMemberExpression(\"Object.entries\");\n\nfunction CallExpression() {\n  const {\n    callee\n  } = this.node;\n\n  if (isObjectKeys(callee)) {\n    return t.arrayTypeAnnotation(t.stringTypeAnnotation());\n  } else if (isArrayFrom(callee) || isObjectValues(callee)) {\n    return t.arrayTypeAnnotation(t.anyTypeAnnotation());\n  } else if (isObjectEntries(callee)) {\n    return t.arrayTypeAnnotation(t.tupleTypeAnnotation([t.stringTypeAnnotation(), t.anyTypeAnnotation()]));\n  }\n\n  return resolveCall(this.get(\"callee\"));\n}\n\nfunction TaggedTemplateExpression() {\n  return resolveCall(this.get(\"tag\"));\n}\n\nfunction resolveCall(callee) {\n  callee = callee.resolve();\n\n  if (callee.isFunction()) {\n    if (callee.is(\"async\")) {\n      if (callee.is(\"generator\")) {\n        return t.genericTypeAnnotation(t.identifier(\"AsyncIterator\"));\n      } else {\n        return t.genericTypeAnnotation(t.identifier(\"Promise\"));\n      }\n    } else {\n      if (callee.node.returnType) {\n        return callee.node.returnType;\n      } else {}\n    }\n  }\n}","map":{"version":3,"sources":["/Users/alperenalkan/obss/frontend/frontend/node_modules/@babel/traverse/lib/path/inference/inferers.js"],"names":["Object","defineProperty","exports","value","VariableDeclarator","TypeCastExpression","NewExpression","TemplateLiteral","UnaryExpression","BinaryExpression","LogicalExpression","ConditionalExpression","SequenceExpression","ParenthesizedExpression","AssignmentExpression","UpdateExpression","StringLiteral","NumericLiteral","BooleanLiteral","NullLiteral","RegExpLiteral","ObjectExpression","ArrayExpression","RestElement","ClassDeclaration","ClassExpression","FunctionDeclaration","ArrowFunctionExpression","FunctionExpression","Func","CallExpression","TaggedTemplateExpression","enumerable","get","_infererReference","default","t","require","_type","id","isIdentifier","init","type","getTypeAnnotation","isCallExpression","name","scope","hasBinding","node","typeAnnotation","validParent","genericTypeAnnotation","callee","stringTypeAnnotation","operator","voidTypeAnnotation","NUMBER_UNARY_OPERATORS","indexOf","numberTypeAnnotation","STRING_UNARY_OPERATORS","BOOLEAN_UNARY_OPERATORS","booleanTypeAnnotation","NUMBER_BINARY_OPERATORS","BOOLEAN_BINARY_OPERATORS","right","left","isBaseType","unionTypeAnnotation","argumentTypes","isTSTypeAnnotation","createTSUnionType","createFlowUnionType","createUnionTypeAnnotation","pop","nullLiteralTypeAnnotation","identifier","isArrayFrom","buildMatchMemberExpression","isObjectKeys","isObjectValues","isObjectEntries","arrayTypeAnnotation","anyTypeAnnotation","tupleTypeAnnotation","resolveCall","resolve","isFunction","is","returnType"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.VariableDeclarator = VariableDeclarator;\nexports.TypeCastExpression = TypeCastExpression;\nexports.NewExpression = NewExpression;\nexports.TemplateLiteral = TemplateLiteral;\nexports.UnaryExpression = UnaryExpression;\nexports.BinaryExpression = BinaryExpression;\nexports.LogicalExpression = LogicalExpression;\nexports.ConditionalExpression = ConditionalExpression;\nexports.SequenceExpression = SequenceExpression;\nexports.ParenthesizedExpression = ParenthesizedExpression;\nexports.AssignmentExpression = AssignmentExpression;\nexports.UpdateExpression = UpdateExpression;\nexports.StringLiteral = StringLiteral;\nexports.NumericLiteral = NumericLiteral;\nexports.BooleanLiteral = BooleanLiteral;\nexports.NullLiteral = NullLiteral;\nexports.RegExpLiteral = RegExpLiteral;\nexports.ObjectExpression = ObjectExpression;\nexports.ArrayExpression = ArrayExpression;\nexports.RestElement = RestElement;\nexports.ClassDeclaration = exports.ClassExpression = exports.FunctionDeclaration = exports.ArrowFunctionExpression = exports.FunctionExpression = Func;\nexports.CallExpression = CallExpression;\nexports.TaggedTemplateExpression = TaggedTemplateExpression;\nObject.defineProperty(exports, \"Identifier\", {\n  enumerable: true,\n  get: function () {\n    return _infererReference.default;\n  }\n});\n\nvar t = require(\"@babel/types\");\n\nvar _infererReference = require(\"./inferer-reference\");\n\nfunction VariableDeclarator() {\n  var _type;\n\n  const id = this.get(\"id\");\n  if (!id.isIdentifier()) return;\n  const init = this.get(\"init\");\n  let type = init.getTypeAnnotation();\n\n  if (((_type = type) == null ? void 0 : _type.type) === \"AnyTypeAnnotation\") {\n    if (init.isCallExpression() && init.get(\"callee\").isIdentifier({\n      name: \"Array\"\n    }) && !init.scope.hasBinding(\"Array\", true)) {\n      type = ArrayExpression();\n    }\n  }\n\n  return type;\n}\n\nfunction TypeCastExpression(node) {\n  return node.typeAnnotation;\n}\n\nTypeCastExpression.validParent = true;\n\nfunction NewExpression(node) {\n  if (this.get(\"callee\").isIdentifier()) {\n    return t.genericTypeAnnotation(node.callee);\n  }\n}\n\nfunction TemplateLiteral() {\n  return t.stringTypeAnnotation();\n}\n\nfunction UnaryExpression(node) {\n  const operator = node.operator;\n\n  if (operator === \"void\") {\n    return t.voidTypeAnnotation();\n  } else if (t.NUMBER_UNARY_OPERATORS.indexOf(operator) >= 0) {\n    return t.numberTypeAnnotation();\n  } else if (t.STRING_UNARY_OPERATORS.indexOf(operator) >= 0) {\n    return t.stringTypeAnnotation();\n  } else if (t.BOOLEAN_UNARY_OPERATORS.indexOf(operator) >= 0) {\n    return t.booleanTypeAnnotation();\n  }\n}\n\nfunction BinaryExpression(node) {\n  const operator = node.operator;\n\n  if (t.NUMBER_BINARY_OPERATORS.indexOf(operator) >= 0) {\n    return t.numberTypeAnnotation();\n  } else if (t.BOOLEAN_BINARY_OPERATORS.indexOf(operator) >= 0) {\n    return t.booleanTypeAnnotation();\n  } else if (operator === \"+\") {\n    const right = this.get(\"right\");\n    const left = this.get(\"left\");\n\n    if (left.isBaseType(\"number\") && right.isBaseType(\"number\")) {\n      return t.numberTypeAnnotation();\n    } else if (left.isBaseType(\"string\") || right.isBaseType(\"string\")) {\n      return t.stringTypeAnnotation();\n    }\n\n    return t.unionTypeAnnotation([t.stringTypeAnnotation(), t.numberTypeAnnotation()]);\n  }\n}\n\nfunction LogicalExpression() {\n  const argumentTypes = [this.get(\"left\").getTypeAnnotation(), this.get(\"right\").getTypeAnnotation()];\n\n  if (t.isTSTypeAnnotation(argumentTypes[0]) && t.createTSUnionType) {\n    return t.createTSUnionType(argumentTypes);\n  }\n\n  if (t.createFlowUnionType) {\n    return t.createFlowUnionType(argumentTypes);\n  }\n\n  return t.createUnionTypeAnnotation(argumentTypes);\n}\n\nfunction ConditionalExpression() {\n  const argumentTypes = [this.get(\"consequent\").getTypeAnnotation(), this.get(\"alternate\").getTypeAnnotation()];\n\n  if (t.isTSTypeAnnotation(argumentTypes[0]) && t.createTSUnionType) {\n    return t.createTSUnionType(argumentTypes);\n  }\n\n  if (t.createFlowUnionType) {\n    return t.createFlowUnionType(argumentTypes);\n  }\n\n  return t.createUnionTypeAnnotation(argumentTypes);\n}\n\nfunction SequenceExpression() {\n  return this.get(\"expressions\").pop().getTypeAnnotation();\n}\n\nfunction ParenthesizedExpression() {\n  return this.get(\"expression\").getTypeAnnotation();\n}\n\nfunction AssignmentExpression() {\n  return this.get(\"right\").getTypeAnnotation();\n}\n\nfunction UpdateExpression(node) {\n  const operator = node.operator;\n\n  if (operator === \"++\" || operator === \"--\") {\n    return t.numberTypeAnnotation();\n  }\n}\n\nfunction StringLiteral() {\n  return t.stringTypeAnnotation();\n}\n\nfunction NumericLiteral() {\n  return t.numberTypeAnnotation();\n}\n\nfunction BooleanLiteral() {\n  return t.booleanTypeAnnotation();\n}\n\nfunction NullLiteral() {\n  return t.nullLiteralTypeAnnotation();\n}\n\nfunction RegExpLiteral() {\n  return t.genericTypeAnnotation(t.identifier(\"RegExp\"));\n}\n\nfunction ObjectExpression() {\n  return t.genericTypeAnnotation(t.identifier(\"Object\"));\n}\n\nfunction ArrayExpression() {\n  return t.genericTypeAnnotation(t.identifier(\"Array\"));\n}\n\nfunction RestElement() {\n  return ArrayExpression();\n}\n\nRestElement.validParent = true;\n\nfunction Func() {\n  return t.genericTypeAnnotation(t.identifier(\"Function\"));\n}\n\nconst isArrayFrom = t.buildMatchMemberExpression(\"Array.from\");\nconst isObjectKeys = t.buildMatchMemberExpression(\"Object.keys\");\nconst isObjectValues = t.buildMatchMemberExpression(\"Object.values\");\nconst isObjectEntries = t.buildMatchMemberExpression(\"Object.entries\");\n\nfunction CallExpression() {\n  const {\n    callee\n  } = this.node;\n\n  if (isObjectKeys(callee)) {\n    return t.arrayTypeAnnotation(t.stringTypeAnnotation());\n  } else if (isArrayFrom(callee) || isObjectValues(callee)) {\n    return t.arrayTypeAnnotation(t.anyTypeAnnotation());\n  } else if (isObjectEntries(callee)) {\n    return t.arrayTypeAnnotation(t.tupleTypeAnnotation([t.stringTypeAnnotation(), t.anyTypeAnnotation()]));\n  }\n\n  return resolveCall(this.get(\"callee\"));\n}\n\nfunction TaggedTemplateExpression() {\n  return resolveCall(this.get(\"tag\"));\n}\n\nfunction resolveCall(callee) {\n  callee = callee.resolve();\n\n  if (callee.isFunction()) {\n    if (callee.is(\"async\")) {\n      if (callee.is(\"generator\")) {\n        return t.genericTypeAnnotation(t.identifier(\"AsyncIterator\"));\n      } else {\n        return t.genericTypeAnnotation(t.identifier(\"Promise\"));\n      }\n    } else {\n      if (callee.node.returnType) {\n        return callee.node.returnType;\n      } else {}\n    }\n  }\n}"]},"metadata":{},"sourceType":"script"}