{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.replaceWithMultiple = replaceWithMultiple;\nexports.replaceWithSourceString = replaceWithSourceString;\nexports.replaceWith = replaceWith;\nexports._replaceWith = _replaceWith;\nexports.replaceExpressionWithStatements = replaceExpressionWithStatements;\nexports.replaceInline = replaceInline;\n\nvar _codeFrame = require(\"@babel/code-frame\");\n\nvar _index = require(\"../index\");\n\nvar _index2 = require(\"./index\");\n\nvar _cache = require(\"../cache\");\n\nvar _parser = require(\"@babel/parser\");\n\nvar t = require(\"@babel/types\");\n\nvar _helperHoistVariables = require(\"@babel/helper-hoist-variables\");\n\nfunction replaceWithMultiple(nodes) {\n  var _pathCache$get;\n\n  this.resync();\n  nodes = this._verifyNodeList(nodes);\n  t.inheritLeadingComments(nodes[0], this.node);\n  t.inheritTrailingComments(nodes[nodes.length - 1], this.node);\n  (_pathCache$get = _cache.path.get(this.parent)) == null ? void 0 : _pathCache$get.delete(this.node);\n  this.node = this.container[this.key] = null;\n  const paths = this.insertAfter(nodes);\n\n  if (this.node) {\n    this.requeue();\n  } else {\n    this.remove();\n  }\n\n  return paths;\n}\n\nfunction replaceWithSourceString(replacement) {\n  this.resync();\n\n  try {\n    replacement = `(${replacement})`;\n    replacement = (0, _parser.parse)(replacement);\n  } catch (err) {\n    const loc = err.loc;\n\n    if (loc) {\n      err.message += \" - make sure this is an expression.\\n\" + (0, _codeFrame.codeFrameColumns)(replacement, {\n        start: {\n          line: loc.line,\n          column: loc.column + 1\n        }\n      });\n      err.code = \"BABEL_REPLACE_SOURCE_ERROR\";\n    }\n\n    throw err;\n  }\n\n  replacement = replacement.program.body[0].expression;\n\n  _index.default.removeProperties(replacement);\n\n  return this.replaceWith(replacement);\n}\n\nfunction replaceWith(replacement) {\n  this.resync();\n\n  if (this.removed) {\n    throw new Error(\"You can't replace this node, we've already removed it\");\n  }\n\n  if (replacement instanceof _index2.default) {\n    replacement = replacement.node;\n  }\n\n  if (!replacement) {\n    throw new Error(\"You passed `path.replaceWith()` a falsy node, use `path.remove()` instead\");\n  }\n\n  if (this.node === replacement) {\n    return [this];\n  }\n\n  if (this.isProgram() && !t.isProgram(replacement)) {\n    throw new Error(\"You can only replace a Program root node with another Program node\");\n  }\n\n  if (Array.isArray(replacement)) {\n    throw new Error(\"Don't use `path.replaceWith()` with an array of nodes, use `path.replaceWithMultiple()`\");\n  }\n\n  if (typeof replacement === \"string\") {\n    throw new Error(\"Don't use `path.replaceWith()` with a source string, use `path.replaceWithSourceString()`\");\n  }\n\n  let nodePath = \"\";\n\n  if (this.isNodeType(\"Statement\") && t.isExpression(replacement)) {\n    if (!this.canHaveVariableDeclarationOrExpression() && !this.canSwapBetweenExpressionAndStatement(replacement) && !this.parentPath.isExportDefaultDeclaration()) {\n      replacement = t.expressionStatement(replacement);\n      nodePath = \"expression\";\n    }\n  }\n\n  if (this.isNodeType(\"Expression\") && t.isStatement(replacement)) {\n    if (!this.canHaveVariableDeclarationOrExpression() && !this.canSwapBetweenExpressionAndStatement(replacement)) {\n      return this.replaceExpressionWithStatements([replacement]);\n    }\n  }\n\n  const oldNode = this.node;\n\n  if (oldNode) {\n    t.inheritsComments(replacement, oldNode);\n    t.removeComments(oldNode);\n  }\n\n  this._replaceWith(replacement);\n\n  this.type = replacement.type;\n  this.setScope();\n  this.requeue();\n  return [nodePath ? this.get(nodePath) : this];\n}\n\nfunction _replaceWith(node) {\n  var _pathCache$get2;\n\n  if (!this.container) {\n    throw new ReferenceError(\"Container is falsy\");\n  }\n\n  if (this.inList) {\n    t.validate(this.parent, this.key, [node]);\n  } else {\n    t.validate(this.parent, this.key, node);\n  }\n\n  this.debug(`Replace with ${node == null ? void 0 : node.type}`);\n  (_pathCache$get2 = _cache.path.get(this.parent)) == null ? void 0 : _pathCache$get2.set(node, this).delete(this.node);\n  this.node = this.container[this.key] = node;\n}\n\nfunction replaceExpressionWithStatements(nodes) {\n  this.resync();\n  const toSequenceExpression = t.toSequenceExpression(nodes, this.scope);\n\n  if (toSequenceExpression) {\n    return this.replaceWith(toSequenceExpression)[0].get(\"expressions\");\n  }\n\n  const functionParent = this.getFunctionParent();\n  const isParentAsync = functionParent == null ? void 0 : functionParent.is(\"async\");\n  const isParentGenerator = functionParent == null ? void 0 : functionParent.is(\"generator\");\n  const container = t.arrowFunctionExpression([], t.blockStatement(nodes));\n  this.replaceWith(t.callExpression(container, []));\n  const callee = this.get(\"callee\");\n  (0, _helperHoistVariables.default)(callee.get(\"body\"), id => {\n    this.scope.push({\n      id\n    });\n  }, \"var\");\n  const completionRecords = this.get(\"callee\").getCompletionRecords();\n\n  for (const path of completionRecords) {\n    if (!path.isExpressionStatement()) continue;\n    const loop = path.findParent(path => path.isLoop());\n\n    if (loop) {\n      let uid = loop.getData(\"expressionReplacementReturnUid\");\n\n      if (!uid) {\n        uid = callee.scope.generateDeclaredUidIdentifier(\"ret\");\n        callee.get(\"body\").pushContainer(\"body\", t.returnStatement(t.cloneNode(uid)));\n        loop.setData(\"expressionReplacementReturnUid\", uid);\n      } else {\n        uid = t.identifier(uid.name);\n      }\n\n      path.get(\"expression\").replaceWith(t.assignmentExpression(\"=\", t.cloneNode(uid), path.node.expression));\n    } else {\n      path.replaceWith(t.returnStatement(path.node.expression));\n    }\n  }\n\n  callee.arrowFunctionToExpression();\n  const newCallee = callee;\n\n  const needToAwaitFunction = isParentAsync && _index.default.hasType(this.get(\"callee.body\").node, \"AwaitExpression\", t.FUNCTION_TYPES);\n\n  const needToYieldFunction = isParentGenerator && _index.default.hasType(this.get(\"callee.body\").node, \"YieldExpression\", t.FUNCTION_TYPES);\n\n  if (needToAwaitFunction) {\n    newCallee.set(\"async\", true);\n\n    if (!needToYieldFunction) {\n      this.replaceWith(t.awaitExpression(this.node));\n    }\n  }\n\n  if (needToYieldFunction) {\n    newCallee.set(\"generator\", true);\n    this.replaceWith(t.yieldExpression(this.node, true));\n  }\n\n  return newCallee.get(\"body.body\");\n}\n\nfunction replaceInline(nodes) {\n  this.resync();\n\n  if (Array.isArray(nodes)) {\n    if (Array.isArray(this.container)) {\n      nodes = this._verifyNodeList(nodes);\n\n      const paths = this._containerInsertAfter(nodes);\n\n      this.remove();\n      return paths;\n    } else {\n      return this.replaceWithMultiple(nodes);\n    }\n  } else {\n    return this.replaceWith(nodes);\n  }\n}","map":{"version":3,"sources":["/Users/alperenalkan/obss/frontend/frontend/node_modules/@babel/traverse/lib/path/replacement.js"],"names":["Object","defineProperty","exports","value","replaceWithMultiple","replaceWithSourceString","replaceWith","_replaceWith","replaceExpressionWithStatements","replaceInline","_codeFrame","require","_index","_index2","_cache","_parser","t","_helperHoistVariables","nodes","_pathCache$get","resync","_verifyNodeList","inheritLeadingComments","node","inheritTrailingComments","length","path","get","parent","delete","container","key","paths","insertAfter","requeue","remove","replacement","parse","err","loc","message","codeFrameColumns","start","line","column","code","program","body","expression","default","removeProperties","removed","Error","isProgram","Array","isArray","nodePath","isNodeType","isExpression","canHaveVariableDeclarationOrExpression","canSwapBetweenExpressionAndStatement","parentPath","isExportDefaultDeclaration","expressionStatement","isStatement","oldNode","inheritsComments","removeComments","type","setScope","_pathCache$get2","ReferenceError","inList","validate","debug","set","toSequenceExpression","scope","functionParent","getFunctionParent","isParentAsync","is","isParentGenerator","arrowFunctionExpression","blockStatement","callExpression","callee","id","push","completionRecords","getCompletionRecords","isExpressionStatement","loop","findParent","isLoop","uid","getData","generateDeclaredUidIdentifier","pushContainer","returnStatement","cloneNode","setData","identifier","name","assignmentExpression","arrowFunctionToExpression","newCallee","needToAwaitFunction","hasType","FUNCTION_TYPES","needToYieldFunction","awaitExpression","yieldExpression","_containerInsertAfter"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.replaceWithMultiple = replaceWithMultiple;\nexports.replaceWithSourceString = replaceWithSourceString;\nexports.replaceWith = replaceWith;\nexports._replaceWith = _replaceWith;\nexports.replaceExpressionWithStatements = replaceExpressionWithStatements;\nexports.replaceInline = replaceInline;\n\nvar _codeFrame = require(\"@babel/code-frame\");\n\nvar _index = require(\"../index\");\n\nvar _index2 = require(\"./index\");\n\nvar _cache = require(\"../cache\");\n\nvar _parser = require(\"@babel/parser\");\n\nvar t = require(\"@babel/types\");\n\nvar _helperHoistVariables = require(\"@babel/helper-hoist-variables\");\n\nfunction replaceWithMultiple(nodes) {\n  var _pathCache$get;\n\n  this.resync();\n  nodes = this._verifyNodeList(nodes);\n  t.inheritLeadingComments(nodes[0], this.node);\n  t.inheritTrailingComments(nodes[nodes.length - 1], this.node);\n  (_pathCache$get = _cache.path.get(this.parent)) == null ? void 0 : _pathCache$get.delete(this.node);\n  this.node = this.container[this.key] = null;\n  const paths = this.insertAfter(nodes);\n\n  if (this.node) {\n    this.requeue();\n  } else {\n    this.remove();\n  }\n\n  return paths;\n}\n\nfunction replaceWithSourceString(replacement) {\n  this.resync();\n\n  try {\n    replacement = `(${replacement})`;\n    replacement = (0, _parser.parse)(replacement);\n  } catch (err) {\n    const loc = err.loc;\n\n    if (loc) {\n      err.message += \" - make sure this is an expression.\\n\" + (0, _codeFrame.codeFrameColumns)(replacement, {\n        start: {\n          line: loc.line,\n          column: loc.column + 1\n        }\n      });\n      err.code = \"BABEL_REPLACE_SOURCE_ERROR\";\n    }\n\n    throw err;\n  }\n\n  replacement = replacement.program.body[0].expression;\n\n  _index.default.removeProperties(replacement);\n\n  return this.replaceWith(replacement);\n}\n\nfunction replaceWith(replacement) {\n  this.resync();\n\n  if (this.removed) {\n    throw new Error(\"You can't replace this node, we've already removed it\");\n  }\n\n  if (replacement instanceof _index2.default) {\n    replacement = replacement.node;\n  }\n\n  if (!replacement) {\n    throw new Error(\"You passed `path.replaceWith()` a falsy node, use `path.remove()` instead\");\n  }\n\n  if (this.node === replacement) {\n    return [this];\n  }\n\n  if (this.isProgram() && !t.isProgram(replacement)) {\n    throw new Error(\"You can only replace a Program root node with another Program node\");\n  }\n\n  if (Array.isArray(replacement)) {\n    throw new Error(\"Don't use `path.replaceWith()` with an array of nodes, use `path.replaceWithMultiple()`\");\n  }\n\n  if (typeof replacement === \"string\") {\n    throw new Error(\"Don't use `path.replaceWith()` with a source string, use `path.replaceWithSourceString()`\");\n  }\n\n  let nodePath = \"\";\n\n  if (this.isNodeType(\"Statement\") && t.isExpression(replacement)) {\n    if (!this.canHaveVariableDeclarationOrExpression() && !this.canSwapBetweenExpressionAndStatement(replacement) && !this.parentPath.isExportDefaultDeclaration()) {\n      replacement = t.expressionStatement(replacement);\n      nodePath = \"expression\";\n    }\n  }\n\n  if (this.isNodeType(\"Expression\") && t.isStatement(replacement)) {\n    if (!this.canHaveVariableDeclarationOrExpression() && !this.canSwapBetweenExpressionAndStatement(replacement)) {\n      return this.replaceExpressionWithStatements([replacement]);\n    }\n  }\n\n  const oldNode = this.node;\n\n  if (oldNode) {\n    t.inheritsComments(replacement, oldNode);\n    t.removeComments(oldNode);\n  }\n\n  this._replaceWith(replacement);\n\n  this.type = replacement.type;\n  this.setScope();\n  this.requeue();\n  return [nodePath ? this.get(nodePath) : this];\n}\n\nfunction _replaceWith(node) {\n  var _pathCache$get2;\n\n  if (!this.container) {\n    throw new ReferenceError(\"Container is falsy\");\n  }\n\n  if (this.inList) {\n    t.validate(this.parent, this.key, [node]);\n  } else {\n    t.validate(this.parent, this.key, node);\n  }\n\n  this.debug(`Replace with ${node == null ? void 0 : node.type}`);\n  (_pathCache$get2 = _cache.path.get(this.parent)) == null ? void 0 : _pathCache$get2.set(node, this).delete(this.node);\n  this.node = this.container[this.key] = node;\n}\n\nfunction replaceExpressionWithStatements(nodes) {\n  this.resync();\n  const toSequenceExpression = t.toSequenceExpression(nodes, this.scope);\n\n  if (toSequenceExpression) {\n    return this.replaceWith(toSequenceExpression)[0].get(\"expressions\");\n  }\n\n  const functionParent = this.getFunctionParent();\n  const isParentAsync = functionParent == null ? void 0 : functionParent.is(\"async\");\n  const isParentGenerator = functionParent == null ? void 0 : functionParent.is(\"generator\");\n  const container = t.arrowFunctionExpression([], t.blockStatement(nodes));\n  this.replaceWith(t.callExpression(container, []));\n  const callee = this.get(\"callee\");\n  (0, _helperHoistVariables.default)(callee.get(\"body\"), id => {\n    this.scope.push({\n      id\n    });\n  }, \"var\");\n  const completionRecords = this.get(\"callee\").getCompletionRecords();\n\n  for (const path of completionRecords) {\n    if (!path.isExpressionStatement()) continue;\n    const loop = path.findParent(path => path.isLoop());\n\n    if (loop) {\n      let uid = loop.getData(\"expressionReplacementReturnUid\");\n\n      if (!uid) {\n        uid = callee.scope.generateDeclaredUidIdentifier(\"ret\");\n        callee.get(\"body\").pushContainer(\"body\", t.returnStatement(t.cloneNode(uid)));\n        loop.setData(\"expressionReplacementReturnUid\", uid);\n      } else {\n        uid = t.identifier(uid.name);\n      }\n\n      path.get(\"expression\").replaceWith(t.assignmentExpression(\"=\", t.cloneNode(uid), path.node.expression));\n    } else {\n      path.replaceWith(t.returnStatement(path.node.expression));\n    }\n  }\n\n  callee.arrowFunctionToExpression();\n  const newCallee = callee;\n\n  const needToAwaitFunction = isParentAsync && _index.default.hasType(this.get(\"callee.body\").node, \"AwaitExpression\", t.FUNCTION_TYPES);\n\n  const needToYieldFunction = isParentGenerator && _index.default.hasType(this.get(\"callee.body\").node, \"YieldExpression\", t.FUNCTION_TYPES);\n\n  if (needToAwaitFunction) {\n    newCallee.set(\"async\", true);\n\n    if (!needToYieldFunction) {\n      this.replaceWith(t.awaitExpression(this.node));\n    }\n  }\n\n  if (needToYieldFunction) {\n    newCallee.set(\"generator\", true);\n    this.replaceWith(t.yieldExpression(this.node, true));\n  }\n\n  return newCallee.get(\"body.body\");\n}\n\nfunction replaceInline(nodes) {\n  this.resync();\n\n  if (Array.isArray(nodes)) {\n    if (Array.isArray(this.container)) {\n      nodes = this._verifyNodeList(nodes);\n\n      const paths = this._containerInsertAfter(nodes);\n\n      this.remove();\n      return paths;\n    } else {\n      return this.replaceWithMultiple(nodes);\n    }\n  } else {\n    return this.replaceWith(nodes);\n  }\n}"]},"metadata":{},"sourceType":"script"}