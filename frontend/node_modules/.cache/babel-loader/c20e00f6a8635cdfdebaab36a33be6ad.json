{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = normalizeFile;\n\nfunction _fs() {\n  const data = _interopRequireDefault(require(\"fs\"));\n\n  _fs = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _path() {\n  const data = _interopRequireDefault(require(\"path\"));\n\n  _path = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _debug() {\n  const data = _interopRequireDefault(require(\"debug\"));\n\n  _debug = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _cloneDeep() {\n  const data = _interopRequireDefault(require(\"lodash/cloneDeep\"));\n\n  _cloneDeep = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction t() {\n  const data = _interopRequireWildcard(require(\"@babel/types\"));\n\n  t = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _convertSourceMap() {\n  const data = _interopRequireDefault(require(\"convert-source-map\"));\n\n  _convertSourceMap = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _file = _interopRequireDefault(require(\"./file/file\"));\n\nvar _parser = _interopRequireDefault(require(\"../parser\"));\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function () {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nconst debug = (0, _debug().default)(\"babel:transform:file\");\nconst LARGE_INPUT_SOURCEMAP_THRESHOLD = 1000000;\n\nfunction* normalizeFile(pluginPasses, options, code, ast) {\n  code = `${code || \"\"}`;\n\n  if (ast) {\n    if (ast.type === \"Program\") {\n      ast = t().file(ast, [], []);\n    } else if (ast.type !== \"File\") {\n      throw new Error(\"AST root must be a Program or File node\");\n    }\n\n    const {\n      cloneInputAst\n    } = options;\n\n    if (cloneInputAst) {\n      ast = (0, _cloneDeep().default)(ast);\n    }\n  } else {\n    ast = yield* (0, _parser.default)(pluginPasses, options, code);\n  }\n\n  let inputMap = null;\n\n  if (options.inputSourceMap !== false) {\n    if (typeof options.inputSourceMap === \"object\") {\n      inputMap = _convertSourceMap().default.fromObject(options.inputSourceMap);\n    }\n\n    if (!inputMap) {\n      const lastComment = extractComments(INLINE_SOURCEMAP_REGEX, ast);\n\n      if (lastComment) {\n        try {\n          inputMap = _convertSourceMap().default.fromComment(lastComment);\n        } catch (err) {\n          debug(\"discarding unknown inline input sourcemap\", err);\n        }\n      }\n    }\n\n    if (!inputMap) {\n      const lastComment = extractComments(EXTERNAL_SOURCEMAP_REGEX, ast);\n\n      if (typeof options.filename === \"string\" && lastComment) {\n        try {\n          const match = EXTERNAL_SOURCEMAP_REGEX.exec(lastComment);\n\n          const inputMapContent = _fs().default.readFileSync(_path().default.resolve(_path().default.dirname(options.filename), match[1]));\n\n          if (inputMapContent.length > LARGE_INPUT_SOURCEMAP_THRESHOLD) {\n            debug(\"skip merging input map > 1 MB\");\n          } else {\n            inputMap = _convertSourceMap().default.fromJSON(inputMapContent);\n          }\n        } catch (err) {\n          debug(\"discarding unknown file input sourcemap\", err);\n        }\n      } else if (lastComment) {\n        debug(\"discarding un-loadable file input sourcemap\");\n      }\n    }\n  }\n\n  return new _file.default(options, {\n    code,\n    ast,\n    inputMap\n  });\n}\n\nconst INLINE_SOURCEMAP_REGEX = /^[@#]\\s+sourceMappingURL=data:(?:application|text)\\/json;(?:charset[:=]\\S+?;)?base64,(?:.*)$/;\nconst EXTERNAL_SOURCEMAP_REGEX = /^[@#][ \\t]+sourceMappingURL=([^\\s'\"`]+)[ \\t]*$/;\n\nfunction extractCommentsFromList(regex, comments, lastComment) {\n  if (comments) {\n    comments = comments.filter(({\n      value\n    }) => {\n      if (regex.test(value)) {\n        lastComment = value;\n        return false;\n      }\n\n      return true;\n    });\n  }\n\n  return [comments, lastComment];\n}\n\nfunction extractComments(regex, ast) {\n  let lastComment = null;\n  t().traverseFast(ast, node => {\n    [node.leadingComments, lastComment] = extractCommentsFromList(regex, node.leadingComments, lastComment);\n    [node.innerComments, lastComment] = extractCommentsFromList(regex, node.innerComments, lastComment);\n    [node.trailingComments, lastComment] = extractCommentsFromList(regex, node.trailingComments, lastComment);\n  });\n  return lastComment;\n}","map":{"version":3,"sources":["/Users/alperenalkan/obss/frontend/frontend/node_modules/@babel/core/lib/transformation/normalize-file.js"],"names":["Object","defineProperty","exports","value","default","normalizeFile","_fs","data","_interopRequireDefault","require","_path","_debug","_cloneDeep","t","_interopRequireWildcard","_convertSourceMap","_file","_parser","_getRequireWildcardCache","WeakMap","cache","obj","__esModule","has","get","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","debug","LARGE_INPUT_SOURCEMAP_THRESHOLD","pluginPasses","options","code","ast","type","file","Error","cloneInputAst","inputMap","inputSourceMap","fromObject","lastComment","extractComments","INLINE_SOURCEMAP_REGEX","fromComment","err","EXTERNAL_SOURCEMAP_REGEX","filename","match","exec","inputMapContent","readFileSync","resolve","dirname","length","fromJSON","extractCommentsFromList","regex","comments","filter","test","traverseFast","node","leadingComments","innerComments","trailingComments"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = normalizeFile;\n\nfunction _fs() {\n  const data = _interopRequireDefault(require(\"fs\"));\n\n  _fs = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _path() {\n  const data = _interopRequireDefault(require(\"path\"));\n\n  _path = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _debug() {\n  const data = _interopRequireDefault(require(\"debug\"));\n\n  _debug = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _cloneDeep() {\n  const data = _interopRequireDefault(require(\"lodash/cloneDeep\"));\n\n  _cloneDeep = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction t() {\n  const data = _interopRequireWildcard(require(\"@babel/types\"));\n\n  t = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _convertSourceMap() {\n  const data = _interopRequireDefault(require(\"convert-source-map\"));\n\n  _convertSourceMap = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _file = _interopRequireDefault(require(\"./file/file\"));\n\nvar _parser = _interopRequireDefault(require(\"../parser\"));\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst debug = (0, _debug().default)(\"babel:transform:file\");\nconst LARGE_INPUT_SOURCEMAP_THRESHOLD = 1000000;\n\nfunction* normalizeFile(pluginPasses, options, code, ast) {\n  code = `${code || \"\"}`;\n\n  if (ast) {\n    if (ast.type === \"Program\") {\n      ast = t().file(ast, [], []);\n    } else if (ast.type !== \"File\") {\n      throw new Error(\"AST root must be a Program or File node\");\n    }\n\n    const {\n      cloneInputAst\n    } = options;\n\n    if (cloneInputAst) {\n      ast = (0, _cloneDeep().default)(ast);\n    }\n  } else {\n    ast = yield* (0, _parser.default)(pluginPasses, options, code);\n  }\n\n  let inputMap = null;\n\n  if (options.inputSourceMap !== false) {\n    if (typeof options.inputSourceMap === \"object\") {\n      inputMap = _convertSourceMap().default.fromObject(options.inputSourceMap);\n    }\n\n    if (!inputMap) {\n      const lastComment = extractComments(INLINE_SOURCEMAP_REGEX, ast);\n\n      if (lastComment) {\n        try {\n          inputMap = _convertSourceMap().default.fromComment(lastComment);\n        } catch (err) {\n          debug(\"discarding unknown inline input sourcemap\", err);\n        }\n      }\n    }\n\n    if (!inputMap) {\n      const lastComment = extractComments(EXTERNAL_SOURCEMAP_REGEX, ast);\n\n      if (typeof options.filename === \"string\" && lastComment) {\n        try {\n          const match = EXTERNAL_SOURCEMAP_REGEX.exec(lastComment);\n\n          const inputMapContent = _fs().default.readFileSync(_path().default.resolve(_path().default.dirname(options.filename), match[1]));\n\n          if (inputMapContent.length > LARGE_INPUT_SOURCEMAP_THRESHOLD) {\n            debug(\"skip merging input map > 1 MB\");\n          } else {\n            inputMap = _convertSourceMap().default.fromJSON(inputMapContent);\n          }\n        } catch (err) {\n          debug(\"discarding unknown file input sourcemap\", err);\n        }\n      } else if (lastComment) {\n        debug(\"discarding un-loadable file input sourcemap\");\n      }\n    }\n  }\n\n  return new _file.default(options, {\n    code,\n    ast,\n    inputMap\n  });\n}\n\nconst INLINE_SOURCEMAP_REGEX = /^[@#]\\s+sourceMappingURL=data:(?:application|text)\\/json;(?:charset[:=]\\S+?;)?base64,(?:.*)$/;\nconst EXTERNAL_SOURCEMAP_REGEX = /^[@#][ \\t]+sourceMappingURL=([^\\s'\"`]+)[ \\t]*$/;\n\nfunction extractCommentsFromList(regex, comments, lastComment) {\n  if (comments) {\n    comments = comments.filter(({\n      value\n    }) => {\n      if (regex.test(value)) {\n        lastComment = value;\n        return false;\n      }\n\n      return true;\n    });\n  }\n\n  return [comments, lastComment];\n}\n\nfunction extractComments(regex, ast) {\n  let lastComment = null;\n  t().traverseFast(ast, node => {\n    [node.leadingComments, lastComment] = extractCommentsFromList(regex, node.leadingComments, lastComment);\n    [node.innerComments, lastComment] = extractCommentsFromList(regex, node.innerComments, lastComment);\n    [node.trailingComments, lastComment] = extractCommentsFromList(regex, node.trailingComments, lastComment);\n  });\n  return lastComment;\n}"]},"metadata":{},"sourceType":"script"}