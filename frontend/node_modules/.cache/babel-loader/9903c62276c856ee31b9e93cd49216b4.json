{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = rewriteLiveReferences;\n\nvar _assert = require(\"assert\");\n\nvar t = require(\"@babel/types\");\n\nvar _template = require(\"@babel/template\");\n\nvar _helperSimpleAccess = require(\"@babel/helper-simple-access\");\n\nfunction rewriteLiveReferences(programPath, metadata) {\n  const imported = new Map();\n  const exported = new Map();\n\n  const requeueInParent = path => {\n    programPath.requeue(path);\n  };\n\n  for (const [source, data] of metadata.source) {\n    for (const [localName, importName] of data.imports) {\n      imported.set(localName, [source, importName, null]);\n    }\n\n    for (const localName of data.importsNamespace) {\n      imported.set(localName, [source, null, localName]);\n    }\n  }\n\n  for (const [local, data] of metadata.local) {\n    let exportMeta = exported.get(local);\n\n    if (!exportMeta) {\n      exportMeta = [];\n      exported.set(local, exportMeta);\n    }\n\n    exportMeta.push(...data.names);\n  }\n\n  const rewriteBindingInitVisitorState = {\n    metadata,\n    requeueInParent,\n    scope: programPath.scope,\n    exported\n  };\n  programPath.traverse(rewriteBindingInitVisitor, rewriteBindingInitVisitorState);\n  (0, _helperSimpleAccess.default)(programPath, new Set([...Array.from(imported.keys()), ...Array.from(exported.keys())]));\n  const rewriteReferencesVisitorState = {\n    seen: new WeakSet(),\n    metadata,\n    requeueInParent,\n    scope: programPath.scope,\n    imported,\n    exported,\n    buildImportReference: ([source, importName, localName], identNode) => {\n      const meta = metadata.source.get(source);\n\n      if (localName) {\n        if (meta.lazy) identNode = t.callExpression(identNode, []);\n        return identNode;\n      }\n\n      let namespace = t.identifier(meta.name);\n      if (meta.lazy) namespace = t.callExpression(namespace, []);\n\n      if (importName === \"default\" && meta.interop === \"node-default\") {\n        return namespace;\n      }\n\n      const computed = metadata.stringSpecifiers.has(importName);\n      return t.memberExpression(namespace, computed ? t.stringLiteral(importName) : t.identifier(importName), computed);\n    }\n  };\n  programPath.traverse(rewriteReferencesVisitor, rewriteReferencesVisitorState);\n}\n\nconst rewriteBindingInitVisitor = {\n  Scope(path) {\n    path.skip();\n  },\n\n  ClassDeclaration(path) {\n    const {\n      requeueInParent,\n      exported,\n      metadata\n    } = this;\n    const {\n      id\n    } = path.node;\n    if (!id) throw new Error(\"Expected class to have a name\");\n    const localName = id.name;\n    const exportNames = exported.get(localName) || [];\n\n    if (exportNames.length > 0) {\n      const statement = t.expressionStatement(buildBindingExportAssignmentExpression(metadata, exportNames, t.identifier(localName)));\n      statement._blockHoist = path.node._blockHoist;\n      requeueInParent(path.insertAfter(statement)[0]);\n    }\n  },\n\n  VariableDeclaration(path) {\n    const {\n      requeueInParent,\n      exported,\n      metadata\n    } = this;\n    Object.keys(path.getOuterBindingIdentifiers()).forEach(localName => {\n      const exportNames = exported.get(localName) || [];\n\n      if (exportNames.length > 0) {\n        const statement = t.expressionStatement(buildBindingExportAssignmentExpression(metadata, exportNames, t.identifier(localName)));\n        statement._blockHoist = path.node._blockHoist;\n        requeueInParent(path.insertAfter(statement)[0]);\n      }\n    });\n  }\n\n};\n\nconst buildBindingExportAssignmentExpression = (metadata, exportNames, localExpr) => {\n  return (exportNames || []).reduce((expr, exportName) => {\n    const {\n      stringSpecifiers\n    } = metadata;\n    const computed = stringSpecifiers.has(exportName);\n    return t.assignmentExpression(\"=\", t.memberExpression(t.identifier(metadata.exportName), computed ? t.stringLiteral(exportName) : t.identifier(exportName), computed), expr);\n  }, localExpr);\n};\n\nconst buildImportThrow = localName => {\n  return _template.default.expression.ast`\n    (function() {\n      throw new Error('\"' + '${localName}' + '\" is read-only.');\n    })()\n  `;\n};\n\nconst rewriteReferencesVisitor = {\n  ReferencedIdentifier(path) {\n    const {\n      seen,\n      buildImportReference,\n      scope,\n      imported,\n      requeueInParent\n    } = this;\n    if (seen.has(path.node)) return;\n    seen.add(path.node);\n    const localName = path.node.name;\n    const importData = imported.get(localName);\n\n    if (importData) {\n      const localBinding = path.scope.getBinding(localName);\n      const rootBinding = scope.getBinding(localName);\n      if (rootBinding !== localBinding) return;\n      const ref = buildImportReference(importData, path.node);\n      ref.loc = path.node.loc;\n\n      if ((path.parentPath.isCallExpression({\n        callee: path.node\n      }) || path.parentPath.isOptionalCallExpression({\n        callee: path.node\n      }) || path.parentPath.isTaggedTemplateExpression({\n        tag: path.node\n      })) && t.isMemberExpression(ref)) {\n        path.replaceWith(t.sequenceExpression([t.numericLiteral(0), ref]));\n      } else if (path.isJSXIdentifier() && t.isMemberExpression(ref)) {\n        const {\n          object,\n          property\n        } = ref;\n        path.replaceWith(t.jsxMemberExpression(t.jsxIdentifier(object.name), t.jsxIdentifier(property.name)));\n      } else {\n        path.replaceWith(ref);\n      }\n\n      requeueInParent(path);\n      path.skip();\n    }\n  },\n\n  AssignmentExpression: {\n    exit(path) {\n      const {\n        scope,\n        seen,\n        imported,\n        exported,\n        requeueInParent,\n        buildImportReference\n      } = this;\n      if (seen.has(path.node)) return;\n      seen.add(path.node);\n      const left = path.get(\"left\");\n      if (left.isMemberExpression()) return;\n\n      if (left.isIdentifier()) {\n        const localName = left.node.name;\n\n        if (scope.getBinding(localName) !== path.scope.getBinding(localName)) {\n          return;\n        }\n\n        const exportedNames = exported.get(localName);\n        const importData = imported.get(localName);\n\n        if ((exportedNames == null ? void 0 : exportedNames.length) > 0 || importData) {\n          _assert(path.node.operator === \"=\", \"Path was not simplified\");\n\n          const assignment = path.node;\n\n          if (importData) {\n            assignment.left = buildImportReference(importData, assignment.left);\n            assignment.right = t.sequenceExpression([assignment.right, buildImportThrow(localName)]);\n          }\n\n          path.replaceWith(buildBindingExportAssignmentExpression(this.metadata, exportedNames, assignment));\n          requeueInParent(path);\n        }\n      } else {\n        const ids = left.getOuterBindingIdentifiers();\n        const programScopeIds = Object.keys(ids).filter(localName => scope.getBinding(localName) === path.scope.getBinding(localName));\n        const id = programScopeIds.find(localName => imported.has(localName));\n\n        if (id) {\n          path.node.right = t.sequenceExpression([path.node.right, buildImportThrow(id)]);\n        }\n\n        const items = [];\n        programScopeIds.forEach(localName => {\n          const exportedNames = exported.get(localName) || [];\n\n          if (exportedNames.length > 0) {\n            items.push(buildBindingExportAssignmentExpression(this.metadata, exportedNames, t.identifier(localName)));\n          }\n        });\n\n        if (items.length > 0) {\n          let node = t.sequenceExpression(items);\n\n          if (path.parentPath.isExpressionStatement()) {\n            node = t.expressionStatement(node);\n            node._blockHoist = path.parentPath.node._blockHoist;\n          }\n\n          const statement = path.insertAfter(node)[0];\n          requeueInParent(statement);\n        }\n      }\n    }\n\n  },\n\n  \"ForOfStatement|ForInStatement\"(path) {\n    const {\n      scope,\n      node\n    } = path;\n    const {\n      left\n    } = node;\n    const {\n      exported,\n      imported,\n      scope: programScope\n    } = this;\n\n    if (!t.isVariableDeclaration(left)) {\n      let didTransformExport = false,\n          importConstViolationName;\n      const loopBodyScope = path.get(\"body\").scope;\n\n      for (const name of Object.keys(t.getOuterBindingIdentifiers(left))) {\n        if (programScope.getBinding(name) === scope.getBinding(name)) {\n          if (exported.has(name)) {\n            didTransformExport = true;\n\n            if (loopBodyScope.hasOwnBinding(name)) {\n              loopBodyScope.rename(name);\n            }\n          }\n\n          if (imported.has(name) && !importConstViolationName) {\n            importConstViolationName = name;\n          }\n        }\n      }\n\n      if (!didTransformExport && !importConstViolationName) {\n        return;\n      }\n\n      path.ensureBlock();\n      const bodyPath = path.get(\"body\");\n      const newLoopId = scope.generateUidIdentifierBasedOnNode(left);\n      path.get(\"left\").replaceWith(t.variableDeclaration(\"let\", [t.variableDeclarator(t.cloneNode(newLoopId))]));\n      scope.registerDeclaration(path.get(\"left\"));\n\n      if (didTransformExport) {\n        bodyPath.unshiftContainer(\"body\", t.expressionStatement(t.assignmentExpression(\"=\", left, newLoopId)));\n      }\n\n      if (importConstViolationName) {\n        bodyPath.unshiftContainer(\"body\", t.expressionStatement(buildImportThrow(importConstViolationName)));\n      }\n    }\n  }\n\n};","map":{"version":3,"sources":["/Users/alperenalkan/obss/frontend/frontend/node_modules/@babel/helper-module-transforms/lib/rewrite-live-references.js"],"names":["Object","defineProperty","exports","value","default","rewriteLiveReferences","_assert","require","t","_template","_helperSimpleAccess","programPath","metadata","imported","Map","exported","requeueInParent","path","requeue","source","data","localName","importName","imports","set","importsNamespace","local","exportMeta","get","push","names","rewriteBindingInitVisitorState","scope","traverse","rewriteBindingInitVisitor","Set","Array","from","keys","rewriteReferencesVisitorState","seen","WeakSet","buildImportReference","identNode","meta","lazy","callExpression","namespace","identifier","name","interop","computed","stringSpecifiers","has","memberExpression","stringLiteral","rewriteReferencesVisitor","Scope","skip","ClassDeclaration","id","node","Error","exportNames","length","statement","expressionStatement","buildBindingExportAssignmentExpression","_blockHoist","insertAfter","VariableDeclaration","getOuterBindingIdentifiers","forEach","localExpr","reduce","expr","exportName","assignmentExpression","buildImportThrow","expression","ast","ReferencedIdentifier","add","importData","localBinding","getBinding","rootBinding","ref","loc","parentPath","isCallExpression","callee","isOptionalCallExpression","isTaggedTemplateExpression","tag","isMemberExpression","replaceWith","sequenceExpression","numericLiteral","isJSXIdentifier","object","property","jsxMemberExpression","jsxIdentifier","AssignmentExpression","exit","left","isIdentifier","exportedNames","operator","assignment","right","ids","programScopeIds","filter","find","items","isExpressionStatement","programScope","isVariableDeclaration","didTransformExport","importConstViolationName","loopBodyScope","hasOwnBinding","rename","ensureBlock","bodyPath","newLoopId","generateUidIdentifierBasedOnNode","variableDeclaration","variableDeclarator","cloneNode","registerDeclaration","unshiftContainer"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = rewriteLiveReferences;\n\nvar _assert = require(\"assert\");\n\nvar t = require(\"@babel/types\");\n\nvar _template = require(\"@babel/template\");\n\nvar _helperSimpleAccess = require(\"@babel/helper-simple-access\");\n\nfunction rewriteLiveReferences(programPath, metadata) {\n  const imported = new Map();\n  const exported = new Map();\n\n  const requeueInParent = path => {\n    programPath.requeue(path);\n  };\n\n  for (const [source, data] of metadata.source) {\n    for (const [localName, importName] of data.imports) {\n      imported.set(localName, [source, importName, null]);\n    }\n\n    for (const localName of data.importsNamespace) {\n      imported.set(localName, [source, null, localName]);\n    }\n  }\n\n  for (const [local, data] of metadata.local) {\n    let exportMeta = exported.get(local);\n\n    if (!exportMeta) {\n      exportMeta = [];\n      exported.set(local, exportMeta);\n    }\n\n    exportMeta.push(...data.names);\n  }\n\n  const rewriteBindingInitVisitorState = {\n    metadata,\n    requeueInParent,\n    scope: programPath.scope,\n    exported\n  };\n  programPath.traverse(rewriteBindingInitVisitor, rewriteBindingInitVisitorState);\n  (0, _helperSimpleAccess.default)(programPath, new Set([...Array.from(imported.keys()), ...Array.from(exported.keys())]));\n  const rewriteReferencesVisitorState = {\n    seen: new WeakSet(),\n    metadata,\n    requeueInParent,\n    scope: programPath.scope,\n    imported,\n    exported,\n    buildImportReference: ([source, importName, localName], identNode) => {\n      const meta = metadata.source.get(source);\n\n      if (localName) {\n        if (meta.lazy) identNode = t.callExpression(identNode, []);\n        return identNode;\n      }\n\n      let namespace = t.identifier(meta.name);\n      if (meta.lazy) namespace = t.callExpression(namespace, []);\n\n      if (importName === \"default\" && meta.interop === \"node-default\") {\n        return namespace;\n      }\n\n      const computed = metadata.stringSpecifiers.has(importName);\n      return t.memberExpression(namespace, computed ? t.stringLiteral(importName) : t.identifier(importName), computed);\n    }\n  };\n  programPath.traverse(rewriteReferencesVisitor, rewriteReferencesVisitorState);\n}\n\nconst rewriteBindingInitVisitor = {\n  Scope(path) {\n    path.skip();\n  },\n\n  ClassDeclaration(path) {\n    const {\n      requeueInParent,\n      exported,\n      metadata\n    } = this;\n    const {\n      id\n    } = path.node;\n    if (!id) throw new Error(\"Expected class to have a name\");\n    const localName = id.name;\n    const exportNames = exported.get(localName) || [];\n\n    if (exportNames.length > 0) {\n      const statement = t.expressionStatement(buildBindingExportAssignmentExpression(metadata, exportNames, t.identifier(localName)));\n      statement._blockHoist = path.node._blockHoist;\n      requeueInParent(path.insertAfter(statement)[0]);\n    }\n  },\n\n  VariableDeclaration(path) {\n    const {\n      requeueInParent,\n      exported,\n      metadata\n    } = this;\n    Object.keys(path.getOuterBindingIdentifiers()).forEach(localName => {\n      const exportNames = exported.get(localName) || [];\n\n      if (exportNames.length > 0) {\n        const statement = t.expressionStatement(buildBindingExportAssignmentExpression(metadata, exportNames, t.identifier(localName)));\n        statement._blockHoist = path.node._blockHoist;\n        requeueInParent(path.insertAfter(statement)[0]);\n      }\n    });\n  }\n\n};\n\nconst buildBindingExportAssignmentExpression = (metadata, exportNames, localExpr) => {\n  return (exportNames || []).reduce((expr, exportName) => {\n    const {\n      stringSpecifiers\n    } = metadata;\n    const computed = stringSpecifiers.has(exportName);\n    return t.assignmentExpression(\"=\", t.memberExpression(t.identifier(metadata.exportName), computed ? t.stringLiteral(exportName) : t.identifier(exportName), computed), expr);\n  }, localExpr);\n};\n\nconst buildImportThrow = localName => {\n  return _template.default.expression.ast`\n    (function() {\n      throw new Error('\"' + '${localName}' + '\" is read-only.');\n    })()\n  `;\n};\n\nconst rewriteReferencesVisitor = {\n  ReferencedIdentifier(path) {\n    const {\n      seen,\n      buildImportReference,\n      scope,\n      imported,\n      requeueInParent\n    } = this;\n    if (seen.has(path.node)) return;\n    seen.add(path.node);\n    const localName = path.node.name;\n    const importData = imported.get(localName);\n\n    if (importData) {\n      const localBinding = path.scope.getBinding(localName);\n      const rootBinding = scope.getBinding(localName);\n      if (rootBinding !== localBinding) return;\n      const ref = buildImportReference(importData, path.node);\n      ref.loc = path.node.loc;\n\n      if ((path.parentPath.isCallExpression({\n        callee: path.node\n      }) || path.parentPath.isOptionalCallExpression({\n        callee: path.node\n      }) || path.parentPath.isTaggedTemplateExpression({\n        tag: path.node\n      })) && t.isMemberExpression(ref)) {\n        path.replaceWith(t.sequenceExpression([t.numericLiteral(0), ref]));\n      } else if (path.isJSXIdentifier() && t.isMemberExpression(ref)) {\n        const {\n          object,\n          property\n        } = ref;\n        path.replaceWith(t.jsxMemberExpression(t.jsxIdentifier(object.name), t.jsxIdentifier(property.name)));\n      } else {\n        path.replaceWith(ref);\n      }\n\n      requeueInParent(path);\n      path.skip();\n    }\n  },\n\n  AssignmentExpression: {\n    exit(path) {\n      const {\n        scope,\n        seen,\n        imported,\n        exported,\n        requeueInParent,\n        buildImportReference\n      } = this;\n      if (seen.has(path.node)) return;\n      seen.add(path.node);\n      const left = path.get(\"left\");\n      if (left.isMemberExpression()) return;\n\n      if (left.isIdentifier()) {\n        const localName = left.node.name;\n\n        if (scope.getBinding(localName) !== path.scope.getBinding(localName)) {\n          return;\n        }\n\n        const exportedNames = exported.get(localName);\n        const importData = imported.get(localName);\n\n        if ((exportedNames == null ? void 0 : exportedNames.length) > 0 || importData) {\n          _assert(path.node.operator === \"=\", \"Path was not simplified\");\n\n          const assignment = path.node;\n\n          if (importData) {\n            assignment.left = buildImportReference(importData, assignment.left);\n            assignment.right = t.sequenceExpression([assignment.right, buildImportThrow(localName)]);\n          }\n\n          path.replaceWith(buildBindingExportAssignmentExpression(this.metadata, exportedNames, assignment));\n          requeueInParent(path);\n        }\n      } else {\n        const ids = left.getOuterBindingIdentifiers();\n        const programScopeIds = Object.keys(ids).filter(localName => scope.getBinding(localName) === path.scope.getBinding(localName));\n        const id = programScopeIds.find(localName => imported.has(localName));\n\n        if (id) {\n          path.node.right = t.sequenceExpression([path.node.right, buildImportThrow(id)]);\n        }\n\n        const items = [];\n        programScopeIds.forEach(localName => {\n          const exportedNames = exported.get(localName) || [];\n\n          if (exportedNames.length > 0) {\n            items.push(buildBindingExportAssignmentExpression(this.metadata, exportedNames, t.identifier(localName)));\n          }\n        });\n\n        if (items.length > 0) {\n          let node = t.sequenceExpression(items);\n\n          if (path.parentPath.isExpressionStatement()) {\n            node = t.expressionStatement(node);\n            node._blockHoist = path.parentPath.node._blockHoist;\n          }\n\n          const statement = path.insertAfter(node)[0];\n          requeueInParent(statement);\n        }\n      }\n    }\n\n  },\n\n  \"ForOfStatement|ForInStatement\"(path) {\n    const {\n      scope,\n      node\n    } = path;\n    const {\n      left\n    } = node;\n    const {\n      exported,\n      imported,\n      scope: programScope\n    } = this;\n\n    if (!t.isVariableDeclaration(left)) {\n      let didTransformExport = false,\n          importConstViolationName;\n      const loopBodyScope = path.get(\"body\").scope;\n\n      for (const name of Object.keys(t.getOuterBindingIdentifiers(left))) {\n        if (programScope.getBinding(name) === scope.getBinding(name)) {\n          if (exported.has(name)) {\n            didTransformExport = true;\n\n            if (loopBodyScope.hasOwnBinding(name)) {\n              loopBodyScope.rename(name);\n            }\n          }\n\n          if (imported.has(name) && !importConstViolationName) {\n            importConstViolationName = name;\n          }\n        }\n      }\n\n      if (!didTransformExport && !importConstViolationName) {\n        return;\n      }\n\n      path.ensureBlock();\n      const bodyPath = path.get(\"body\");\n      const newLoopId = scope.generateUidIdentifierBasedOnNode(left);\n      path.get(\"left\").replaceWith(t.variableDeclaration(\"let\", [t.variableDeclarator(t.cloneNode(newLoopId))]));\n      scope.registerDeclaration(path.get(\"left\"));\n\n      if (didTransformExport) {\n        bodyPath.unshiftContainer(\"body\", t.expressionStatement(t.assignmentExpression(\"=\", left, newLoopId)));\n      }\n\n      if (importConstViolationName) {\n        bodyPath.unshiftContainer(\"body\", t.expressionStatement(buildImportThrow(importConstViolationName)));\n      }\n    }\n  }\n\n};"]},"metadata":{},"sourceType":"script"}