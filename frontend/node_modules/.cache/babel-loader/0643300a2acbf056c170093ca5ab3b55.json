{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TSTypeAnnotation = TSTypeAnnotation;\nexports.TSTypeParameterDeclaration = exports.TSTypeParameterInstantiation = TSTypeParameterInstantiation;\nexports.TSTypeParameter = TSTypeParameter;\nexports.TSParameterProperty = TSParameterProperty;\nexports.TSDeclareFunction = TSDeclareFunction;\nexports.TSDeclareMethod = TSDeclareMethod;\nexports.TSQualifiedName = TSQualifiedName;\nexports.TSCallSignatureDeclaration = TSCallSignatureDeclaration;\nexports.TSConstructSignatureDeclaration = TSConstructSignatureDeclaration;\nexports.TSPropertySignature = TSPropertySignature;\nexports.tsPrintPropertyOrMethodName = tsPrintPropertyOrMethodName;\nexports.TSMethodSignature = TSMethodSignature;\nexports.TSIndexSignature = TSIndexSignature;\nexports.TSAnyKeyword = TSAnyKeyword;\nexports.TSBigIntKeyword = TSBigIntKeyword;\nexports.TSUnknownKeyword = TSUnknownKeyword;\nexports.TSNumberKeyword = TSNumberKeyword;\nexports.TSObjectKeyword = TSObjectKeyword;\nexports.TSBooleanKeyword = TSBooleanKeyword;\nexports.TSStringKeyword = TSStringKeyword;\nexports.TSSymbolKeyword = TSSymbolKeyword;\nexports.TSVoidKeyword = TSVoidKeyword;\nexports.TSUndefinedKeyword = TSUndefinedKeyword;\nexports.TSNullKeyword = TSNullKeyword;\nexports.TSNeverKeyword = TSNeverKeyword;\nexports.TSIntrinsicKeyword = TSIntrinsicKeyword;\nexports.TSThisType = TSThisType;\nexports.TSFunctionType = TSFunctionType;\nexports.TSConstructorType = TSConstructorType;\nexports.tsPrintFunctionOrConstructorType = tsPrintFunctionOrConstructorType;\nexports.TSTypeReference = TSTypeReference;\nexports.TSTypePredicate = TSTypePredicate;\nexports.TSTypeQuery = TSTypeQuery;\nexports.TSTypeLiteral = TSTypeLiteral;\nexports.tsPrintTypeLiteralOrInterfaceBody = tsPrintTypeLiteralOrInterfaceBody;\nexports.tsPrintBraced = tsPrintBraced;\nexports.TSArrayType = TSArrayType;\nexports.TSTupleType = TSTupleType;\nexports.TSOptionalType = TSOptionalType;\nexports.TSRestType = TSRestType;\nexports.TSNamedTupleMember = TSNamedTupleMember;\nexports.TSUnionType = TSUnionType;\nexports.TSIntersectionType = TSIntersectionType;\nexports.tsPrintUnionOrIntersectionType = tsPrintUnionOrIntersectionType;\nexports.TSConditionalType = TSConditionalType;\nexports.TSInferType = TSInferType;\nexports.TSParenthesizedType = TSParenthesizedType;\nexports.TSTypeOperator = TSTypeOperator;\nexports.TSIndexedAccessType = TSIndexedAccessType;\nexports.TSMappedType = TSMappedType;\nexports.TSLiteralType = TSLiteralType;\nexports.TSExpressionWithTypeArguments = TSExpressionWithTypeArguments;\nexports.TSInterfaceDeclaration = TSInterfaceDeclaration;\nexports.TSInterfaceBody = TSInterfaceBody;\nexports.TSTypeAliasDeclaration = TSTypeAliasDeclaration;\nexports.TSAsExpression = TSAsExpression;\nexports.TSTypeAssertion = TSTypeAssertion;\nexports.TSEnumDeclaration = TSEnumDeclaration;\nexports.TSEnumMember = TSEnumMember;\nexports.TSModuleDeclaration = TSModuleDeclaration;\nexports.TSModuleBlock = TSModuleBlock;\nexports.TSImportType = TSImportType;\nexports.TSImportEqualsDeclaration = TSImportEqualsDeclaration;\nexports.TSExternalModuleReference = TSExternalModuleReference;\nexports.TSNonNullExpression = TSNonNullExpression;\nexports.TSExportAssignment = TSExportAssignment;\nexports.TSNamespaceExportDeclaration = TSNamespaceExportDeclaration;\nexports.tsPrintSignatureDeclarationBase = tsPrintSignatureDeclarationBase;\nexports.tsPrintClassMemberModifiers = tsPrintClassMemberModifiers;\n\nvar t = require(\"@babel/types\");\n\nfunction TSTypeAnnotation(node) {\n  this.token(\":\");\n  this.space();\n  if (node.optional) this.token(\"?\");\n  this.print(node.typeAnnotation, node);\n}\n\nfunction TSTypeParameterInstantiation(node) {\n  this.token(\"<\");\n  this.printList(node.params, node, {});\n  this.token(\">\");\n}\n\nfunction TSTypeParameter(node) {\n  this.word(node.name);\n\n  if (node.constraint) {\n    this.space();\n    this.word(\"extends\");\n    this.space();\n    this.print(node.constraint, node);\n  }\n\n  if (node.default) {\n    this.space();\n    this.token(\"=\");\n    this.space();\n    this.print(node.default, node);\n  }\n}\n\nfunction TSParameterProperty(node) {\n  if (node.accessibility) {\n    this.word(node.accessibility);\n    this.space();\n  }\n\n  if (node.readonly) {\n    this.word(\"readonly\");\n    this.space();\n  }\n\n  this._param(node.parameter);\n}\n\nfunction TSDeclareFunction(node) {\n  if (node.declare) {\n    this.word(\"declare\");\n    this.space();\n  }\n\n  this._functionHead(node);\n\n  this.token(\";\");\n}\n\nfunction TSDeclareMethod(node) {\n  this._classMethodHead(node);\n\n  this.token(\";\");\n}\n\nfunction TSQualifiedName(node) {\n  this.print(node.left, node);\n  this.token(\".\");\n  this.print(node.right, node);\n}\n\nfunction TSCallSignatureDeclaration(node) {\n  this.tsPrintSignatureDeclarationBase(node);\n  this.token(\";\");\n}\n\nfunction TSConstructSignatureDeclaration(node) {\n  this.word(\"new\");\n  this.space();\n  this.tsPrintSignatureDeclarationBase(node);\n  this.token(\";\");\n}\n\nfunction TSPropertySignature(node) {\n  const {\n    readonly,\n    initializer\n  } = node;\n\n  if (readonly) {\n    this.word(\"readonly\");\n    this.space();\n  }\n\n  this.tsPrintPropertyOrMethodName(node);\n  this.print(node.typeAnnotation, node);\n\n  if (initializer) {\n    this.space();\n    this.token(\"=\");\n    this.space();\n    this.print(initializer, node);\n  }\n\n  this.token(\";\");\n}\n\nfunction tsPrintPropertyOrMethodName(node) {\n  if (node.computed) {\n    this.token(\"[\");\n  }\n\n  this.print(node.key, node);\n\n  if (node.computed) {\n    this.token(\"]\");\n  }\n\n  if (node.optional) {\n    this.token(\"?\");\n  }\n}\n\nfunction TSMethodSignature(node) {\n  const {\n    kind\n  } = node;\n\n  if (kind === \"set\" || kind === \"get\") {\n    this.word(kind);\n    this.space();\n  }\n\n  this.tsPrintPropertyOrMethodName(node);\n  this.tsPrintSignatureDeclarationBase(node);\n  this.token(\";\");\n}\n\nfunction TSIndexSignature(node) {\n  const {\n    readonly,\n    static: isStatic\n  } = node;\n\n  if (isStatic) {\n    this.word(\"static\");\n    this.space();\n  }\n\n  if (readonly) {\n    this.word(\"readonly\");\n    this.space();\n  }\n\n  this.token(\"[\");\n\n  this._parameters(node.parameters, node);\n\n  this.token(\"]\");\n  this.print(node.typeAnnotation, node);\n  this.token(\";\");\n}\n\nfunction TSAnyKeyword() {\n  this.word(\"any\");\n}\n\nfunction TSBigIntKeyword() {\n  this.word(\"bigint\");\n}\n\nfunction TSUnknownKeyword() {\n  this.word(\"unknown\");\n}\n\nfunction TSNumberKeyword() {\n  this.word(\"number\");\n}\n\nfunction TSObjectKeyword() {\n  this.word(\"object\");\n}\n\nfunction TSBooleanKeyword() {\n  this.word(\"boolean\");\n}\n\nfunction TSStringKeyword() {\n  this.word(\"string\");\n}\n\nfunction TSSymbolKeyword() {\n  this.word(\"symbol\");\n}\n\nfunction TSVoidKeyword() {\n  this.word(\"void\");\n}\n\nfunction TSUndefinedKeyword() {\n  this.word(\"undefined\");\n}\n\nfunction TSNullKeyword() {\n  this.word(\"null\");\n}\n\nfunction TSNeverKeyword() {\n  this.word(\"never\");\n}\n\nfunction TSIntrinsicKeyword() {\n  this.word(\"intrinsic\");\n}\n\nfunction TSThisType() {\n  this.word(\"this\");\n}\n\nfunction TSFunctionType(node) {\n  this.tsPrintFunctionOrConstructorType(node);\n}\n\nfunction TSConstructorType(node) {\n  if (node.abstract) {\n    this.word(\"abstract\");\n    this.space();\n  }\n\n  this.word(\"new\");\n  this.space();\n  this.tsPrintFunctionOrConstructorType(node);\n}\n\nfunction tsPrintFunctionOrConstructorType(node) {\n  const {\n    typeParameters,\n    parameters\n  } = node;\n  this.print(typeParameters, node);\n  this.token(\"(\");\n\n  this._parameters(parameters, node);\n\n  this.token(\")\");\n  this.space();\n  this.token(\"=>\");\n  this.space();\n  this.print(node.typeAnnotation.typeAnnotation, node);\n}\n\nfunction TSTypeReference(node) {\n  this.print(node.typeName, node);\n  this.print(node.typeParameters, node);\n}\n\nfunction TSTypePredicate(node) {\n  if (node.asserts) {\n    this.word(\"asserts\");\n    this.space();\n  }\n\n  this.print(node.parameterName);\n\n  if (node.typeAnnotation) {\n    this.space();\n    this.word(\"is\");\n    this.space();\n    this.print(node.typeAnnotation.typeAnnotation);\n  }\n}\n\nfunction TSTypeQuery(node) {\n  this.word(\"typeof\");\n  this.space();\n  this.print(node.exprName);\n}\n\nfunction TSTypeLiteral(node) {\n  this.tsPrintTypeLiteralOrInterfaceBody(node.members, node);\n}\n\nfunction tsPrintTypeLiteralOrInterfaceBody(members, node) {\n  this.tsPrintBraced(members, node);\n}\n\nfunction tsPrintBraced(members, node) {\n  this.token(\"{\");\n\n  if (members.length) {\n    this.indent();\n    this.newline();\n\n    for (const member of members) {\n      this.print(member, node);\n      this.newline();\n    }\n\n    this.dedent();\n    this.rightBrace();\n  } else {\n    this.token(\"}\");\n  }\n}\n\nfunction TSArrayType(node) {\n  this.print(node.elementType, node);\n  this.token(\"[]\");\n}\n\nfunction TSTupleType(node) {\n  this.token(\"[\");\n  this.printList(node.elementTypes, node);\n  this.token(\"]\");\n}\n\nfunction TSOptionalType(node) {\n  this.print(node.typeAnnotation, node);\n  this.token(\"?\");\n}\n\nfunction TSRestType(node) {\n  this.token(\"...\");\n  this.print(node.typeAnnotation, node);\n}\n\nfunction TSNamedTupleMember(node) {\n  this.print(node.label, node);\n  if (node.optional) this.token(\"?\");\n  this.token(\":\");\n  this.space();\n  this.print(node.elementType, node);\n}\n\nfunction TSUnionType(node) {\n  this.tsPrintUnionOrIntersectionType(node, \"|\");\n}\n\nfunction TSIntersectionType(node) {\n  this.tsPrintUnionOrIntersectionType(node, \"&\");\n}\n\nfunction tsPrintUnionOrIntersectionType(node, sep) {\n  this.printJoin(node.types, node, {\n    separator() {\n      this.space();\n      this.token(sep);\n      this.space();\n    }\n\n  });\n}\n\nfunction TSConditionalType(node) {\n  this.print(node.checkType);\n  this.space();\n  this.word(\"extends\");\n  this.space();\n  this.print(node.extendsType);\n  this.space();\n  this.token(\"?\");\n  this.space();\n  this.print(node.trueType);\n  this.space();\n  this.token(\":\");\n  this.space();\n  this.print(node.falseType);\n}\n\nfunction TSInferType(node) {\n  this.token(\"infer\");\n  this.space();\n  this.print(node.typeParameter);\n}\n\nfunction TSParenthesizedType(node) {\n  this.token(\"(\");\n  this.print(node.typeAnnotation, node);\n  this.token(\")\");\n}\n\nfunction TSTypeOperator(node) {\n  this.word(node.operator);\n  this.space();\n  this.print(node.typeAnnotation, node);\n}\n\nfunction TSIndexedAccessType(node) {\n  this.print(node.objectType, node);\n  this.token(\"[\");\n  this.print(node.indexType, node);\n  this.token(\"]\");\n}\n\nfunction TSMappedType(node) {\n  const {\n    nameType,\n    optional,\n    readonly,\n    typeParameter\n  } = node;\n  this.token(\"{\");\n  this.space();\n\n  if (readonly) {\n    tokenIfPlusMinus(this, readonly);\n    this.word(\"readonly\");\n    this.space();\n  }\n\n  this.token(\"[\");\n  this.word(typeParameter.name);\n  this.space();\n  this.word(\"in\");\n  this.space();\n  this.print(typeParameter.constraint, typeParameter);\n\n  if (nameType) {\n    this.space();\n    this.word(\"as\");\n    this.space();\n    this.print(nameType, node);\n  }\n\n  this.token(\"]\");\n\n  if (optional) {\n    tokenIfPlusMinus(this, optional);\n    this.token(\"?\");\n  }\n\n  this.token(\":\");\n  this.space();\n  this.print(node.typeAnnotation, node);\n  this.space();\n  this.token(\"}\");\n}\n\nfunction tokenIfPlusMinus(self, tok) {\n  if (tok !== true) {\n    self.token(tok);\n  }\n}\n\nfunction TSLiteralType(node) {\n  this.print(node.literal, node);\n}\n\nfunction TSExpressionWithTypeArguments(node) {\n  this.print(node.expression, node);\n  this.print(node.typeParameters, node);\n}\n\nfunction TSInterfaceDeclaration(node) {\n  const {\n    declare,\n    id,\n    typeParameters,\n    extends: extendz,\n    body\n  } = node;\n\n  if (declare) {\n    this.word(\"declare\");\n    this.space();\n  }\n\n  this.word(\"interface\");\n  this.space();\n  this.print(id, node);\n  this.print(typeParameters, node);\n\n  if (extendz != null && extendz.length) {\n    this.space();\n    this.word(\"extends\");\n    this.space();\n    this.printList(extendz, node);\n  }\n\n  this.space();\n  this.print(body, node);\n}\n\nfunction TSInterfaceBody(node) {\n  this.tsPrintTypeLiteralOrInterfaceBody(node.body, node);\n}\n\nfunction TSTypeAliasDeclaration(node) {\n  const {\n    declare,\n    id,\n    typeParameters,\n    typeAnnotation\n  } = node;\n\n  if (declare) {\n    this.word(\"declare\");\n    this.space();\n  }\n\n  this.word(\"type\");\n  this.space();\n  this.print(id, node);\n  this.print(typeParameters, node);\n  this.space();\n  this.token(\"=\");\n  this.space();\n  this.print(typeAnnotation, node);\n  this.token(\";\");\n}\n\nfunction TSAsExpression(node) {\n  const {\n    expression,\n    typeAnnotation\n  } = node;\n  this.print(expression, node);\n  this.space();\n  this.word(\"as\");\n  this.space();\n  this.print(typeAnnotation, node);\n}\n\nfunction TSTypeAssertion(node) {\n  const {\n    typeAnnotation,\n    expression\n  } = node;\n  this.token(\"<\");\n  this.print(typeAnnotation, node);\n  this.token(\">\");\n  this.space();\n  this.print(expression, node);\n}\n\nfunction TSEnumDeclaration(node) {\n  const {\n    declare,\n    const: isConst,\n    id,\n    members\n  } = node;\n\n  if (declare) {\n    this.word(\"declare\");\n    this.space();\n  }\n\n  if (isConst) {\n    this.word(\"const\");\n    this.space();\n  }\n\n  this.word(\"enum\");\n  this.space();\n  this.print(id, node);\n  this.space();\n  this.tsPrintBraced(members, node);\n}\n\nfunction TSEnumMember(node) {\n  const {\n    id,\n    initializer\n  } = node;\n  this.print(id, node);\n\n  if (initializer) {\n    this.space();\n    this.token(\"=\");\n    this.space();\n    this.print(initializer, node);\n  }\n\n  this.token(\",\");\n}\n\nfunction TSModuleDeclaration(node) {\n  const {\n    declare,\n    id\n  } = node;\n\n  if (declare) {\n    this.word(\"declare\");\n    this.space();\n  }\n\n  if (!node.global) {\n    this.word(id.type === \"Identifier\" ? \"namespace\" : \"module\");\n    this.space();\n  }\n\n  this.print(id, node);\n\n  if (!node.body) {\n    this.token(\";\");\n    return;\n  }\n\n  let body = node.body;\n\n  while (body.type === \"TSModuleDeclaration\") {\n    this.token(\".\");\n    this.print(body.id, body);\n    body = body.body;\n  }\n\n  this.space();\n  this.print(body, node);\n}\n\nfunction TSModuleBlock(node) {\n  this.tsPrintBraced(node.body, node);\n}\n\nfunction TSImportType(node) {\n  const {\n    argument,\n    qualifier,\n    typeParameters\n  } = node;\n  this.word(\"import\");\n  this.token(\"(\");\n  this.print(argument, node);\n  this.token(\")\");\n\n  if (qualifier) {\n    this.token(\".\");\n    this.print(qualifier, node);\n  }\n\n  if (typeParameters) {\n    this.print(typeParameters, node);\n  }\n}\n\nfunction TSImportEqualsDeclaration(node) {\n  const {\n    isExport,\n    id,\n    moduleReference\n  } = node;\n\n  if (isExport) {\n    this.word(\"export\");\n    this.space();\n  }\n\n  this.word(\"import\");\n  this.space();\n  this.print(id, node);\n  this.space();\n  this.token(\"=\");\n  this.space();\n  this.print(moduleReference, node);\n  this.token(\";\");\n}\n\nfunction TSExternalModuleReference(node) {\n  this.token(\"require(\");\n  this.print(node.expression, node);\n  this.token(\")\");\n}\n\nfunction TSNonNullExpression(node) {\n  this.print(node.expression, node);\n  this.token(\"!\");\n}\n\nfunction TSExportAssignment(node) {\n  this.word(\"export\");\n  this.space();\n  this.token(\"=\");\n  this.space();\n  this.print(node.expression, node);\n  this.token(\";\");\n}\n\nfunction TSNamespaceExportDeclaration(node) {\n  this.word(\"export\");\n  this.space();\n  this.word(\"as\");\n  this.space();\n  this.word(\"namespace\");\n  this.space();\n  this.print(node.id, node);\n}\n\nfunction tsPrintSignatureDeclarationBase(node) {\n  const {\n    typeParameters,\n    parameters\n  } = node;\n  this.print(typeParameters, node);\n  this.token(\"(\");\n\n  this._parameters(parameters, node);\n\n  this.token(\")\");\n  this.print(node.typeAnnotation, node);\n}\n\nfunction tsPrintClassMemberModifiers(node, isField) {\n  if (isField && node.declare) {\n    this.word(\"declare\");\n    this.space();\n  }\n\n  if (node.accessibility) {\n    this.word(node.accessibility);\n    this.space();\n  }\n\n  if (node.static) {\n    this.word(\"static\");\n    this.space();\n  }\n\n  if (node.override) {\n    this.word(\"override\");\n    this.space();\n  }\n\n  if (node.abstract) {\n    this.word(\"abstract\");\n    this.space();\n  }\n\n  if (isField && node.readonly) {\n    this.word(\"readonly\");\n    this.space();\n  }\n}","map":{"version":3,"sources":["/Users/alperenalkan/obss/frontend/frontend/node_modules/@babel/generator/lib/generators/typescript.js"],"names":["Object","defineProperty","exports","value","TSTypeAnnotation","TSTypeParameterDeclaration","TSTypeParameterInstantiation","TSTypeParameter","TSParameterProperty","TSDeclareFunction","TSDeclareMethod","TSQualifiedName","TSCallSignatureDeclaration","TSConstructSignatureDeclaration","TSPropertySignature","tsPrintPropertyOrMethodName","TSMethodSignature","TSIndexSignature","TSAnyKeyword","TSBigIntKeyword","TSUnknownKeyword","TSNumberKeyword","TSObjectKeyword","TSBooleanKeyword","TSStringKeyword","TSSymbolKeyword","TSVoidKeyword","TSUndefinedKeyword","TSNullKeyword","TSNeverKeyword","TSIntrinsicKeyword","TSThisType","TSFunctionType","TSConstructorType","tsPrintFunctionOrConstructorType","TSTypeReference","TSTypePredicate","TSTypeQuery","TSTypeLiteral","tsPrintTypeLiteralOrInterfaceBody","tsPrintBraced","TSArrayType","TSTupleType","TSOptionalType","TSRestType","TSNamedTupleMember","TSUnionType","TSIntersectionType","tsPrintUnionOrIntersectionType","TSConditionalType","TSInferType","TSParenthesizedType","TSTypeOperator","TSIndexedAccessType","TSMappedType","TSLiteralType","TSExpressionWithTypeArguments","TSInterfaceDeclaration","TSInterfaceBody","TSTypeAliasDeclaration","TSAsExpression","TSTypeAssertion","TSEnumDeclaration","TSEnumMember","TSModuleDeclaration","TSModuleBlock","TSImportType","TSImportEqualsDeclaration","TSExternalModuleReference","TSNonNullExpression","TSExportAssignment","TSNamespaceExportDeclaration","tsPrintSignatureDeclarationBase","tsPrintClassMemberModifiers","t","require","node","token","space","optional","print","typeAnnotation","printList","params","word","name","constraint","default","accessibility","readonly","_param","parameter","declare","_functionHead","_classMethodHead","left","right","initializer","computed","key","kind","static","isStatic","_parameters","parameters","abstract","typeParameters","typeName","asserts","parameterName","exprName","members","length","indent","newline","member","dedent","rightBrace","elementType","elementTypes","label","sep","printJoin","types","separator","checkType","extendsType","trueType","falseType","typeParameter","operator","objectType","indexType","nameType","tokenIfPlusMinus","self","tok","literal","expression","id","extends","extendz","body","const","isConst","global","type","argument","qualifier","isExport","moduleReference","isField","override"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TSTypeAnnotation = TSTypeAnnotation;\nexports.TSTypeParameterDeclaration = exports.TSTypeParameterInstantiation = TSTypeParameterInstantiation;\nexports.TSTypeParameter = TSTypeParameter;\nexports.TSParameterProperty = TSParameterProperty;\nexports.TSDeclareFunction = TSDeclareFunction;\nexports.TSDeclareMethod = TSDeclareMethod;\nexports.TSQualifiedName = TSQualifiedName;\nexports.TSCallSignatureDeclaration = TSCallSignatureDeclaration;\nexports.TSConstructSignatureDeclaration = TSConstructSignatureDeclaration;\nexports.TSPropertySignature = TSPropertySignature;\nexports.tsPrintPropertyOrMethodName = tsPrintPropertyOrMethodName;\nexports.TSMethodSignature = TSMethodSignature;\nexports.TSIndexSignature = TSIndexSignature;\nexports.TSAnyKeyword = TSAnyKeyword;\nexports.TSBigIntKeyword = TSBigIntKeyword;\nexports.TSUnknownKeyword = TSUnknownKeyword;\nexports.TSNumberKeyword = TSNumberKeyword;\nexports.TSObjectKeyword = TSObjectKeyword;\nexports.TSBooleanKeyword = TSBooleanKeyword;\nexports.TSStringKeyword = TSStringKeyword;\nexports.TSSymbolKeyword = TSSymbolKeyword;\nexports.TSVoidKeyword = TSVoidKeyword;\nexports.TSUndefinedKeyword = TSUndefinedKeyword;\nexports.TSNullKeyword = TSNullKeyword;\nexports.TSNeverKeyword = TSNeverKeyword;\nexports.TSIntrinsicKeyword = TSIntrinsicKeyword;\nexports.TSThisType = TSThisType;\nexports.TSFunctionType = TSFunctionType;\nexports.TSConstructorType = TSConstructorType;\nexports.tsPrintFunctionOrConstructorType = tsPrintFunctionOrConstructorType;\nexports.TSTypeReference = TSTypeReference;\nexports.TSTypePredicate = TSTypePredicate;\nexports.TSTypeQuery = TSTypeQuery;\nexports.TSTypeLiteral = TSTypeLiteral;\nexports.tsPrintTypeLiteralOrInterfaceBody = tsPrintTypeLiteralOrInterfaceBody;\nexports.tsPrintBraced = tsPrintBraced;\nexports.TSArrayType = TSArrayType;\nexports.TSTupleType = TSTupleType;\nexports.TSOptionalType = TSOptionalType;\nexports.TSRestType = TSRestType;\nexports.TSNamedTupleMember = TSNamedTupleMember;\nexports.TSUnionType = TSUnionType;\nexports.TSIntersectionType = TSIntersectionType;\nexports.tsPrintUnionOrIntersectionType = tsPrintUnionOrIntersectionType;\nexports.TSConditionalType = TSConditionalType;\nexports.TSInferType = TSInferType;\nexports.TSParenthesizedType = TSParenthesizedType;\nexports.TSTypeOperator = TSTypeOperator;\nexports.TSIndexedAccessType = TSIndexedAccessType;\nexports.TSMappedType = TSMappedType;\nexports.TSLiteralType = TSLiteralType;\nexports.TSExpressionWithTypeArguments = TSExpressionWithTypeArguments;\nexports.TSInterfaceDeclaration = TSInterfaceDeclaration;\nexports.TSInterfaceBody = TSInterfaceBody;\nexports.TSTypeAliasDeclaration = TSTypeAliasDeclaration;\nexports.TSAsExpression = TSAsExpression;\nexports.TSTypeAssertion = TSTypeAssertion;\nexports.TSEnumDeclaration = TSEnumDeclaration;\nexports.TSEnumMember = TSEnumMember;\nexports.TSModuleDeclaration = TSModuleDeclaration;\nexports.TSModuleBlock = TSModuleBlock;\nexports.TSImportType = TSImportType;\nexports.TSImportEqualsDeclaration = TSImportEqualsDeclaration;\nexports.TSExternalModuleReference = TSExternalModuleReference;\nexports.TSNonNullExpression = TSNonNullExpression;\nexports.TSExportAssignment = TSExportAssignment;\nexports.TSNamespaceExportDeclaration = TSNamespaceExportDeclaration;\nexports.tsPrintSignatureDeclarationBase = tsPrintSignatureDeclarationBase;\nexports.tsPrintClassMemberModifiers = tsPrintClassMemberModifiers;\n\nvar t = require(\"@babel/types\");\n\nfunction TSTypeAnnotation(node) {\n  this.token(\":\");\n  this.space();\n  if (node.optional) this.token(\"?\");\n  this.print(node.typeAnnotation, node);\n}\n\nfunction TSTypeParameterInstantiation(node) {\n  this.token(\"<\");\n  this.printList(node.params, node, {});\n  this.token(\">\");\n}\n\nfunction TSTypeParameter(node) {\n  this.word(node.name);\n\n  if (node.constraint) {\n    this.space();\n    this.word(\"extends\");\n    this.space();\n    this.print(node.constraint, node);\n  }\n\n  if (node.default) {\n    this.space();\n    this.token(\"=\");\n    this.space();\n    this.print(node.default, node);\n  }\n}\n\nfunction TSParameterProperty(node) {\n  if (node.accessibility) {\n    this.word(node.accessibility);\n    this.space();\n  }\n\n  if (node.readonly) {\n    this.word(\"readonly\");\n    this.space();\n  }\n\n  this._param(node.parameter);\n}\n\nfunction TSDeclareFunction(node) {\n  if (node.declare) {\n    this.word(\"declare\");\n    this.space();\n  }\n\n  this._functionHead(node);\n\n  this.token(\";\");\n}\n\nfunction TSDeclareMethod(node) {\n  this._classMethodHead(node);\n\n  this.token(\";\");\n}\n\nfunction TSQualifiedName(node) {\n  this.print(node.left, node);\n  this.token(\".\");\n  this.print(node.right, node);\n}\n\nfunction TSCallSignatureDeclaration(node) {\n  this.tsPrintSignatureDeclarationBase(node);\n  this.token(\";\");\n}\n\nfunction TSConstructSignatureDeclaration(node) {\n  this.word(\"new\");\n  this.space();\n  this.tsPrintSignatureDeclarationBase(node);\n  this.token(\";\");\n}\n\nfunction TSPropertySignature(node) {\n  const {\n    readonly,\n    initializer\n  } = node;\n\n  if (readonly) {\n    this.word(\"readonly\");\n    this.space();\n  }\n\n  this.tsPrintPropertyOrMethodName(node);\n  this.print(node.typeAnnotation, node);\n\n  if (initializer) {\n    this.space();\n    this.token(\"=\");\n    this.space();\n    this.print(initializer, node);\n  }\n\n  this.token(\";\");\n}\n\nfunction tsPrintPropertyOrMethodName(node) {\n  if (node.computed) {\n    this.token(\"[\");\n  }\n\n  this.print(node.key, node);\n\n  if (node.computed) {\n    this.token(\"]\");\n  }\n\n  if (node.optional) {\n    this.token(\"?\");\n  }\n}\n\nfunction TSMethodSignature(node) {\n  const {\n    kind\n  } = node;\n\n  if (kind === \"set\" || kind === \"get\") {\n    this.word(kind);\n    this.space();\n  }\n\n  this.tsPrintPropertyOrMethodName(node);\n  this.tsPrintSignatureDeclarationBase(node);\n  this.token(\";\");\n}\n\nfunction TSIndexSignature(node) {\n  const {\n    readonly,\n    static: isStatic\n  } = node;\n\n  if (isStatic) {\n    this.word(\"static\");\n    this.space();\n  }\n\n  if (readonly) {\n    this.word(\"readonly\");\n    this.space();\n  }\n\n  this.token(\"[\");\n\n  this._parameters(node.parameters, node);\n\n  this.token(\"]\");\n  this.print(node.typeAnnotation, node);\n  this.token(\";\");\n}\n\nfunction TSAnyKeyword() {\n  this.word(\"any\");\n}\n\nfunction TSBigIntKeyword() {\n  this.word(\"bigint\");\n}\n\nfunction TSUnknownKeyword() {\n  this.word(\"unknown\");\n}\n\nfunction TSNumberKeyword() {\n  this.word(\"number\");\n}\n\nfunction TSObjectKeyword() {\n  this.word(\"object\");\n}\n\nfunction TSBooleanKeyword() {\n  this.word(\"boolean\");\n}\n\nfunction TSStringKeyword() {\n  this.word(\"string\");\n}\n\nfunction TSSymbolKeyword() {\n  this.word(\"symbol\");\n}\n\nfunction TSVoidKeyword() {\n  this.word(\"void\");\n}\n\nfunction TSUndefinedKeyword() {\n  this.word(\"undefined\");\n}\n\nfunction TSNullKeyword() {\n  this.word(\"null\");\n}\n\nfunction TSNeverKeyword() {\n  this.word(\"never\");\n}\n\nfunction TSIntrinsicKeyword() {\n  this.word(\"intrinsic\");\n}\n\nfunction TSThisType() {\n  this.word(\"this\");\n}\n\nfunction TSFunctionType(node) {\n  this.tsPrintFunctionOrConstructorType(node);\n}\n\nfunction TSConstructorType(node) {\n  if (node.abstract) {\n    this.word(\"abstract\");\n    this.space();\n  }\n\n  this.word(\"new\");\n  this.space();\n  this.tsPrintFunctionOrConstructorType(node);\n}\n\nfunction tsPrintFunctionOrConstructorType(node) {\n  const {\n    typeParameters,\n    parameters\n  } = node;\n  this.print(typeParameters, node);\n  this.token(\"(\");\n\n  this._parameters(parameters, node);\n\n  this.token(\")\");\n  this.space();\n  this.token(\"=>\");\n  this.space();\n  this.print(node.typeAnnotation.typeAnnotation, node);\n}\n\nfunction TSTypeReference(node) {\n  this.print(node.typeName, node);\n  this.print(node.typeParameters, node);\n}\n\nfunction TSTypePredicate(node) {\n  if (node.asserts) {\n    this.word(\"asserts\");\n    this.space();\n  }\n\n  this.print(node.parameterName);\n\n  if (node.typeAnnotation) {\n    this.space();\n    this.word(\"is\");\n    this.space();\n    this.print(node.typeAnnotation.typeAnnotation);\n  }\n}\n\nfunction TSTypeQuery(node) {\n  this.word(\"typeof\");\n  this.space();\n  this.print(node.exprName);\n}\n\nfunction TSTypeLiteral(node) {\n  this.tsPrintTypeLiteralOrInterfaceBody(node.members, node);\n}\n\nfunction tsPrintTypeLiteralOrInterfaceBody(members, node) {\n  this.tsPrintBraced(members, node);\n}\n\nfunction tsPrintBraced(members, node) {\n  this.token(\"{\");\n\n  if (members.length) {\n    this.indent();\n    this.newline();\n\n    for (const member of members) {\n      this.print(member, node);\n      this.newline();\n    }\n\n    this.dedent();\n    this.rightBrace();\n  } else {\n    this.token(\"}\");\n  }\n}\n\nfunction TSArrayType(node) {\n  this.print(node.elementType, node);\n  this.token(\"[]\");\n}\n\nfunction TSTupleType(node) {\n  this.token(\"[\");\n  this.printList(node.elementTypes, node);\n  this.token(\"]\");\n}\n\nfunction TSOptionalType(node) {\n  this.print(node.typeAnnotation, node);\n  this.token(\"?\");\n}\n\nfunction TSRestType(node) {\n  this.token(\"...\");\n  this.print(node.typeAnnotation, node);\n}\n\nfunction TSNamedTupleMember(node) {\n  this.print(node.label, node);\n  if (node.optional) this.token(\"?\");\n  this.token(\":\");\n  this.space();\n  this.print(node.elementType, node);\n}\n\nfunction TSUnionType(node) {\n  this.tsPrintUnionOrIntersectionType(node, \"|\");\n}\n\nfunction TSIntersectionType(node) {\n  this.tsPrintUnionOrIntersectionType(node, \"&\");\n}\n\nfunction tsPrintUnionOrIntersectionType(node, sep) {\n  this.printJoin(node.types, node, {\n    separator() {\n      this.space();\n      this.token(sep);\n      this.space();\n    }\n\n  });\n}\n\nfunction TSConditionalType(node) {\n  this.print(node.checkType);\n  this.space();\n  this.word(\"extends\");\n  this.space();\n  this.print(node.extendsType);\n  this.space();\n  this.token(\"?\");\n  this.space();\n  this.print(node.trueType);\n  this.space();\n  this.token(\":\");\n  this.space();\n  this.print(node.falseType);\n}\n\nfunction TSInferType(node) {\n  this.token(\"infer\");\n  this.space();\n  this.print(node.typeParameter);\n}\n\nfunction TSParenthesizedType(node) {\n  this.token(\"(\");\n  this.print(node.typeAnnotation, node);\n  this.token(\")\");\n}\n\nfunction TSTypeOperator(node) {\n  this.word(node.operator);\n  this.space();\n  this.print(node.typeAnnotation, node);\n}\n\nfunction TSIndexedAccessType(node) {\n  this.print(node.objectType, node);\n  this.token(\"[\");\n  this.print(node.indexType, node);\n  this.token(\"]\");\n}\n\nfunction TSMappedType(node) {\n  const {\n    nameType,\n    optional,\n    readonly,\n    typeParameter\n  } = node;\n  this.token(\"{\");\n  this.space();\n\n  if (readonly) {\n    tokenIfPlusMinus(this, readonly);\n    this.word(\"readonly\");\n    this.space();\n  }\n\n  this.token(\"[\");\n  this.word(typeParameter.name);\n  this.space();\n  this.word(\"in\");\n  this.space();\n  this.print(typeParameter.constraint, typeParameter);\n\n  if (nameType) {\n    this.space();\n    this.word(\"as\");\n    this.space();\n    this.print(nameType, node);\n  }\n\n  this.token(\"]\");\n\n  if (optional) {\n    tokenIfPlusMinus(this, optional);\n    this.token(\"?\");\n  }\n\n  this.token(\":\");\n  this.space();\n  this.print(node.typeAnnotation, node);\n  this.space();\n  this.token(\"}\");\n}\n\nfunction tokenIfPlusMinus(self, tok) {\n  if (tok !== true) {\n    self.token(tok);\n  }\n}\n\nfunction TSLiteralType(node) {\n  this.print(node.literal, node);\n}\n\nfunction TSExpressionWithTypeArguments(node) {\n  this.print(node.expression, node);\n  this.print(node.typeParameters, node);\n}\n\nfunction TSInterfaceDeclaration(node) {\n  const {\n    declare,\n    id,\n    typeParameters,\n    extends: extendz,\n    body\n  } = node;\n\n  if (declare) {\n    this.word(\"declare\");\n    this.space();\n  }\n\n  this.word(\"interface\");\n  this.space();\n  this.print(id, node);\n  this.print(typeParameters, node);\n\n  if (extendz != null && extendz.length) {\n    this.space();\n    this.word(\"extends\");\n    this.space();\n    this.printList(extendz, node);\n  }\n\n  this.space();\n  this.print(body, node);\n}\n\nfunction TSInterfaceBody(node) {\n  this.tsPrintTypeLiteralOrInterfaceBody(node.body, node);\n}\n\nfunction TSTypeAliasDeclaration(node) {\n  const {\n    declare,\n    id,\n    typeParameters,\n    typeAnnotation\n  } = node;\n\n  if (declare) {\n    this.word(\"declare\");\n    this.space();\n  }\n\n  this.word(\"type\");\n  this.space();\n  this.print(id, node);\n  this.print(typeParameters, node);\n  this.space();\n  this.token(\"=\");\n  this.space();\n  this.print(typeAnnotation, node);\n  this.token(\";\");\n}\n\nfunction TSAsExpression(node) {\n  const {\n    expression,\n    typeAnnotation\n  } = node;\n  this.print(expression, node);\n  this.space();\n  this.word(\"as\");\n  this.space();\n  this.print(typeAnnotation, node);\n}\n\nfunction TSTypeAssertion(node) {\n  const {\n    typeAnnotation,\n    expression\n  } = node;\n  this.token(\"<\");\n  this.print(typeAnnotation, node);\n  this.token(\">\");\n  this.space();\n  this.print(expression, node);\n}\n\nfunction TSEnumDeclaration(node) {\n  const {\n    declare,\n    const: isConst,\n    id,\n    members\n  } = node;\n\n  if (declare) {\n    this.word(\"declare\");\n    this.space();\n  }\n\n  if (isConst) {\n    this.word(\"const\");\n    this.space();\n  }\n\n  this.word(\"enum\");\n  this.space();\n  this.print(id, node);\n  this.space();\n  this.tsPrintBraced(members, node);\n}\n\nfunction TSEnumMember(node) {\n  const {\n    id,\n    initializer\n  } = node;\n  this.print(id, node);\n\n  if (initializer) {\n    this.space();\n    this.token(\"=\");\n    this.space();\n    this.print(initializer, node);\n  }\n\n  this.token(\",\");\n}\n\nfunction TSModuleDeclaration(node) {\n  const {\n    declare,\n    id\n  } = node;\n\n  if (declare) {\n    this.word(\"declare\");\n    this.space();\n  }\n\n  if (!node.global) {\n    this.word(id.type === \"Identifier\" ? \"namespace\" : \"module\");\n    this.space();\n  }\n\n  this.print(id, node);\n\n  if (!node.body) {\n    this.token(\";\");\n    return;\n  }\n\n  let body = node.body;\n\n  while (body.type === \"TSModuleDeclaration\") {\n    this.token(\".\");\n    this.print(body.id, body);\n    body = body.body;\n  }\n\n  this.space();\n  this.print(body, node);\n}\n\nfunction TSModuleBlock(node) {\n  this.tsPrintBraced(node.body, node);\n}\n\nfunction TSImportType(node) {\n  const {\n    argument,\n    qualifier,\n    typeParameters\n  } = node;\n  this.word(\"import\");\n  this.token(\"(\");\n  this.print(argument, node);\n  this.token(\")\");\n\n  if (qualifier) {\n    this.token(\".\");\n    this.print(qualifier, node);\n  }\n\n  if (typeParameters) {\n    this.print(typeParameters, node);\n  }\n}\n\nfunction TSImportEqualsDeclaration(node) {\n  const {\n    isExport,\n    id,\n    moduleReference\n  } = node;\n\n  if (isExport) {\n    this.word(\"export\");\n    this.space();\n  }\n\n  this.word(\"import\");\n  this.space();\n  this.print(id, node);\n  this.space();\n  this.token(\"=\");\n  this.space();\n  this.print(moduleReference, node);\n  this.token(\";\");\n}\n\nfunction TSExternalModuleReference(node) {\n  this.token(\"require(\");\n  this.print(node.expression, node);\n  this.token(\")\");\n}\n\nfunction TSNonNullExpression(node) {\n  this.print(node.expression, node);\n  this.token(\"!\");\n}\n\nfunction TSExportAssignment(node) {\n  this.word(\"export\");\n  this.space();\n  this.token(\"=\");\n  this.space();\n  this.print(node.expression, node);\n  this.token(\";\");\n}\n\nfunction TSNamespaceExportDeclaration(node) {\n  this.word(\"export\");\n  this.space();\n  this.word(\"as\");\n  this.space();\n  this.word(\"namespace\");\n  this.space();\n  this.print(node.id, node);\n}\n\nfunction tsPrintSignatureDeclarationBase(node) {\n  const {\n    typeParameters,\n    parameters\n  } = node;\n  this.print(typeParameters, node);\n  this.token(\"(\");\n\n  this._parameters(parameters, node);\n\n  this.token(\")\");\n  this.print(node.typeAnnotation, node);\n}\n\nfunction tsPrintClassMemberModifiers(node, isField) {\n  if (isField && node.declare) {\n    this.word(\"declare\");\n    this.space();\n  }\n\n  if (node.accessibility) {\n    this.word(node.accessibility);\n    this.space();\n  }\n\n  if (node.static) {\n    this.word(\"static\");\n    this.space();\n  }\n\n  if (node.override) {\n    this.word(\"override\");\n    this.space();\n  }\n\n  if (node.abstract) {\n    this.word(\"abstract\");\n    this.space();\n  }\n\n  if (isField && node.readonly) {\n    this.word(\"readonly\");\n    this.space();\n  }\n}"]},"metadata":{},"sourceType":"script"}