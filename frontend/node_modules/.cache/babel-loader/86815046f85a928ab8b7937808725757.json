{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.File = File;\nexports.Program = Program;\nexports.BlockStatement = BlockStatement;\nexports.Directive = Directive;\nexports.DirectiveLiteral = DirectiveLiteral;\nexports.InterpreterDirective = InterpreterDirective;\nexports.Placeholder = Placeholder;\n\nvar t = require(\"@babel/types\");\n\nfunction File(node) {\n  if (node.program) {\n    this.print(node.program.interpreter, node);\n  }\n\n  this.print(node.program, node);\n}\n\nfunction Program(node) {\n  this.printInnerComments(node, false);\n  this.printSequence(node.directives, node);\n  if (node.directives && node.directives.length) this.newline();\n  this.printSequence(node.body, node);\n}\n\nfunction BlockStatement(node) {\n  var _node$directives;\n\n  this.token(\"{\");\n  this.printInnerComments(node);\n  const hasDirectives = (_node$directives = node.directives) == null ? void 0 : _node$directives.length;\n\n  if (node.body.length || hasDirectives) {\n    this.newline();\n    this.printSequence(node.directives, node, {\n      indent: true\n    });\n    if (hasDirectives) this.newline();\n    this.printSequence(node.body, node, {\n      indent: true\n    });\n    this.removeTrailingNewline();\n    this.source(\"end\", node.loc);\n    if (!this.endsWith(10)) this.newline();\n    this.rightBrace();\n  } else {\n    this.source(\"end\", node.loc);\n    this.token(\"}\");\n  }\n}\n\nfunction Directive(node) {\n  this.print(node.value, node);\n  this.semicolon();\n}\n\nconst unescapedSingleQuoteRE = /(?:^|[^\\\\])(?:\\\\\\\\)*'/;\nconst unescapedDoubleQuoteRE = /(?:^|[^\\\\])(?:\\\\\\\\)*\"/;\n\nfunction DirectiveLiteral(node) {\n  const raw = this.getPossibleRaw(node);\n\n  if (raw != null) {\n    this.token(raw);\n    return;\n  }\n\n  const {\n    value\n  } = node;\n\n  if (!unescapedDoubleQuoteRE.test(value)) {\n    this.token(`\"${value}\"`);\n  } else if (!unescapedSingleQuoteRE.test(value)) {\n    this.token(`'${value}'`);\n  } else {\n    throw new Error(\"Malformed AST: it is not possible to print a directive containing\" + \" both unescaped single and double quotes.\");\n  }\n}\n\nfunction InterpreterDirective(node) {\n  this.token(`#!${node.value}\\n`);\n}\n\nfunction Placeholder(node) {\n  this.token(\"%%\");\n  this.print(node.name);\n  this.token(\"%%\");\n\n  if (node.expectedNode === \"Statement\") {\n    this.semicolon();\n  }\n}","map":{"version":3,"sources":["/Users/alperenalkan/obss/frontend/frontend/node_modules/@babel/generator/lib/generators/base.js"],"names":["Object","defineProperty","exports","value","File","Program","BlockStatement","Directive","DirectiveLiteral","InterpreterDirective","Placeholder","t","require","node","program","print","interpreter","printInnerComments","printSequence","directives","length","newline","body","_node$directives","token","hasDirectives","indent","removeTrailingNewline","source","loc","endsWith","rightBrace","semicolon","unescapedSingleQuoteRE","unescapedDoubleQuoteRE","raw","getPossibleRaw","test","Error","name","expectedNode"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.File = File;\nexports.Program = Program;\nexports.BlockStatement = BlockStatement;\nexports.Directive = Directive;\nexports.DirectiveLiteral = DirectiveLiteral;\nexports.InterpreterDirective = InterpreterDirective;\nexports.Placeholder = Placeholder;\n\nvar t = require(\"@babel/types\");\n\nfunction File(node) {\n  if (node.program) {\n    this.print(node.program.interpreter, node);\n  }\n\n  this.print(node.program, node);\n}\n\nfunction Program(node) {\n  this.printInnerComments(node, false);\n  this.printSequence(node.directives, node);\n  if (node.directives && node.directives.length) this.newline();\n  this.printSequence(node.body, node);\n}\n\nfunction BlockStatement(node) {\n  var _node$directives;\n\n  this.token(\"{\");\n  this.printInnerComments(node);\n  const hasDirectives = (_node$directives = node.directives) == null ? void 0 : _node$directives.length;\n\n  if (node.body.length || hasDirectives) {\n    this.newline();\n    this.printSequence(node.directives, node, {\n      indent: true\n    });\n    if (hasDirectives) this.newline();\n    this.printSequence(node.body, node, {\n      indent: true\n    });\n    this.removeTrailingNewline();\n    this.source(\"end\", node.loc);\n    if (!this.endsWith(10)) this.newline();\n    this.rightBrace();\n  } else {\n    this.source(\"end\", node.loc);\n    this.token(\"}\");\n  }\n}\n\nfunction Directive(node) {\n  this.print(node.value, node);\n  this.semicolon();\n}\n\nconst unescapedSingleQuoteRE = /(?:^|[^\\\\])(?:\\\\\\\\)*'/;\nconst unescapedDoubleQuoteRE = /(?:^|[^\\\\])(?:\\\\\\\\)*\"/;\n\nfunction DirectiveLiteral(node) {\n  const raw = this.getPossibleRaw(node);\n\n  if (raw != null) {\n    this.token(raw);\n    return;\n  }\n\n  const {\n    value\n  } = node;\n\n  if (!unescapedDoubleQuoteRE.test(value)) {\n    this.token(`\"${value}\"`);\n  } else if (!unescapedSingleQuoteRE.test(value)) {\n    this.token(`'${value}'`);\n  } else {\n    throw new Error(\"Malformed AST: it is not possible to print a directive containing\" + \" both unescaped single and double quotes.\");\n  }\n}\n\nfunction InterpreterDirective(node) {\n  this.token(`#!${node.value}\\n`);\n}\n\nfunction Placeholder(node) {\n  this.token(\"%%\");\n  this.print(node.name);\n  this.token(\"%%\");\n\n  if (node.expectedNode === \"Statement\") {\n    this.semicolon();\n  }\n}"]},"metadata":{},"sourceType":"script"}