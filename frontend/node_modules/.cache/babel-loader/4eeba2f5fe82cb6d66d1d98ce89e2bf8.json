{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.list = exports.nodes = void 0;\n\nvar t = require(\"@babel/types\");\n\nconst {\n  isArrayExpression,\n  isAssignmentExpression,\n  isBinary,\n  isBlockStatement,\n  isCallExpression,\n  isFunction,\n  isIdentifier,\n  isLiteral,\n  isMemberExpression,\n  isObjectExpression,\n  isOptionalCallExpression,\n  isOptionalMemberExpression,\n  isStringLiteral\n} = t;\n\nfunction crawl(node, state = {}) {\n  if (isMemberExpression(node) || isOptionalMemberExpression(node)) {\n    crawl(node.object, state);\n    if (node.computed) crawl(node.property, state);\n  } else if (isBinary(node) || isAssignmentExpression(node)) {\n    crawl(node.left, state);\n    crawl(node.right, state);\n  } else if (isCallExpression(node) || isOptionalCallExpression(node)) {\n    state.hasCall = true;\n    crawl(node.callee, state);\n  } else if (isFunction(node)) {\n    state.hasFunction = true;\n  } else if (isIdentifier(node)) {\n    state.hasHelper = state.hasHelper || isHelper(node.callee);\n  }\n\n  return state;\n}\n\nfunction isHelper(node) {\n  if (isMemberExpression(node)) {\n    return isHelper(node.object) || isHelper(node.property);\n  } else if (isIdentifier(node)) {\n    return node.name === \"require\" || node.name[0] === \"_\";\n  } else if (isCallExpression(node)) {\n    return isHelper(node.callee);\n  } else if (isBinary(node) || isAssignmentExpression(node)) {\n    return isIdentifier(node.left) && isHelper(node.left) || isHelper(node.right);\n  } else {\n    return false;\n  }\n}\n\nfunction isType(node) {\n  return isLiteral(node) || isObjectExpression(node) || isArrayExpression(node) || isIdentifier(node) || isMemberExpression(node);\n}\n\nconst nodes = {\n  AssignmentExpression(node) {\n    const state = crawl(node.right);\n\n    if (state.hasCall && state.hasHelper || state.hasFunction) {\n      return {\n        before: state.hasFunction,\n        after: true\n      };\n    }\n  },\n\n  SwitchCase(node, parent) {\n    return {\n      before: !!node.consequent.length || parent.cases[0] === node,\n      after: !node.consequent.length && parent.cases[parent.cases.length - 1] === node\n    };\n  },\n\n  LogicalExpression(node) {\n    if (isFunction(node.left) || isFunction(node.right)) {\n      return {\n        after: true\n      };\n    }\n  },\n\n  Literal(node) {\n    if (isStringLiteral(node) && node.value === \"use strict\") {\n      return {\n        after: true\n      };\n    }\n  },\n\n  CallExpression(node) {\n    if (isFunction(node.callee) || isHelper(node)) {\n      return {\n        before: true,\n        after: true\n      };\n    }\n  },\n\n  OptionalCallExpression(node) {\n    if (isFunction(node.callee)) {\n      return {\n        before: true,\n        after: true\n      };\n    }\n  },\n\n  VariableDeclaration(node) {\n    for (let i = 0; i < node.declarations.length; i++) {\n      const declar = node.declarations[i];\n      let enabled = isHelper(declar.id) && !isType(declar.init);\n\n      if (!enabled) {\n        const state = crawl(declar.init);\n        enabled = isHelper(declar.init) && state.hasCall || state.hasFunction;\n      }\n\n      if (enabled) {\n        return {\n          before: true,\n          after: true\n        };\n      }\n    }\n  },\n\n  IfStatement(node) {\n    if (isBlockStatement(node.consequent)) {\n      return {\n        before: true,\n        after: true\n      };\n    }\n  }\n\n};\nexports.nodes = nodes;\n\nnodes.ObjectProperty = nodes.ObjectTypeProperty = nodes.ObjectMethod = function (node, parent) {\n  if (parent.properties[0] === node) {\n    return {\n      before: true\n    };\n  }\n};\n\nnodes.ObjectTypeCallProperty = function (node, parent) {\n  var _parent$properties;\n\n  if (parent.callProperties[0] === node && !((_parent$properties = parent.properties) != null && _parent$properties.length)) {\n    return {\n      before: true\n    };\n  }\n};\n\nnodes.ObjectTypeIndexer = function (node, parent) {\n  var _parent$properties2, _parent$callPropertie;\n\n  if (parent.indexers[0] === node && !((_parent$properties2 = parent.properties) != null && _parent$properties2.length) && !((_parent$callPropertie = parent.callProperties) != null && _parent$callPropertie.length)) {\n    return {\n      before: true\n    };\n  }\n};\n\nnodes.ObjectTypeInternalSlot = function (node, parent) {\n  var _parent$properties3, _parent$callPropertie2, _parent$indexers;\n\n  if (parent.internalSlots[0] === node && !((_parent$properties3 = parent.properties) != null && _parent$properties3.length) && !((_parent$callPropertie2 = parent.callProperties) != null && _parent$callPropertie2.length) && !((_parent$indexers = parent.indexers) != null && _parent$indexers.length)) {\n    return {\n      before: true\n    };\n  }\n};\n\nconst list = {\n  VariableDeclaration(node) {\n    return node.declarations.map(decl => decl.init);\n  },\n\n  ArrayExpression(node) {\n    return node.elements;\n  },\n\n  ObjectExpression(node) {\n    return node.properties;\n  }\n\n};\nexports.list = list;\n[[\"Function\", true], [\"Class\", true], [\"Loop\", true], [\"LabeledStatement\", true], [\"SwitchStatement\", true], [\"TryStatement\", true]].forEach(function ([type, amounts]) {\n  if (typeof amounts === \"boolean\") {\n    amounts = {\n      after: amounts,\n      before: amounts\n    };\n  }\n\n  [type].concat(t.FLIPPED_ALIAS_KEYS[type] || []).forEach(function (type) {\n    nodes[type] = function () {\n      return amounts;\n    };\n  });\n});","map":{"version":3,"sources":["/Users/alperenalkan/obss/frontend/frontend/node_modules/@babel/generator/lib/node/whitespace.js"],"names":["Object","defineProperty","exports","value","list","nodes","t","require","isArrayExpression","isAssignmentExpression","isBinary","isBlockStatement","isCallExpression","isFunction","isIdentifier","isLiteral","isMemberExpression","isObjectExpression","isOptionalCallExpression","isOptionalMemberExpression","isStringLiteral","crawl","node","state","object","computed","property","left","right","hasCall","callee","hasFunction","hasHelper","isHelper","name","isType","AssignmentExpression","before","after","SwitchCase","parent","consequent","length","cases","LogicalExpression","Literal","CallExpression","OptionalCallExpression","VariableDeclaration","i","declarations","declar","enabled","id","init","IfStatement","ObjectProperty","ObjectTypeProperty","ObjectMethod","properties","ObjectTypeCallProperty","_parent$properties","callProperties","ObjectTypeIndexer","_parent$properties2","_parent$callPropertie","indexers","ObjectTypeInternalSlot","_parent$properties3","_parent$callPropertie2","_parent$indexers","internalSlots","map","decl","ArrayExpression","elements","ObjectExpression","forEach","type","amounts","concat","FLIPPED_ALIAS_KEYS"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,IAAR,GAAeF,OAAO,CAACG,KAAR,GAAgB,KAAK,CAApC;;AAEA,IAAIC,CAAC,GAAGC,OAAO,CAAC,cAAD,CAAf;;AAEA,MAAM;AACJC,EAAAA,iBADI;AAEJC,EAAAA,sBAFI;AAGJC,EAAAA,QAHI;AAIJC,EAAAA,gBAJI;AAKJC,EAAAA,gBALI;AAMJC,EAAAA,UANI;AAOJC,EAAAA,YAPI;AAQJC,EAAAA,SARI;AASJC,EAAAA,kBATI;AAUJC,EAAAA,kBAVI;AAWJC,EAAAA,wBAXI;AAYJC,EAAAA,0BAZI;AAaJC,EAAAA;AAbI,IAcFd,CAdJ;;AAgBA,SAASe,KAAT,CAAeC,IAAf,EAAqBC,KAAK,GAAG,EAA7B,EAAiC;AAC/B,MAAIP,kBAAkB,CAACM,IAAD,CAAlB,IAA4BH,0BAA0B,CAACG,IAAD,CAA1D,EAAkE;AAChED,IAAAA,KAAK,CAACC,IAAI,CAACE,MAAN,EAAcD,KAAd,CAAL;AACA,QAAID,IAAI,CAACG,QAAT,EAAmBJ,KAAK,CAACC,IAAI,CAACI,QAAN,EAAgBH,KAAhB,CAAL;AACpB,GAHD,MAGO,IAAIb,QAAQ,CAACY,IAAD,CAAR,IAAkBb,sBAAsB,CAACa,IAAD,CAA5C,EAAoD;AACzDD,IAAAA,KAAK,CAACC,IAAI,CAACK,IAAN,EAAYJ,KAAZ,CAAL;AACAF,IAAAA,KAAK,CAACC,IAAI,CAACM,KAAN,EAAaL,KAAb,CAAL;AACD,GAHM,MAGA,IAAIX,gBAAgB,CAACU,IAAD,CAAhB,IAA0BJ,wBAAwB,CAACI,IAAD,CAAtD,EAA8D;AACnEC,IAAAA,KAAK,CAACM,OAAN,GAAgB,IAAhB;AACAR,IAAAA,KAAK,CAACC,IAAI,CAACQ,MAAN,EAAcP,KAAd,CAAL;AACD,GAHM,MAGA,IAAIV,UAAU,CAACS,IAAD,CAAd,EAAsB;AAC3BC,IAAAA,KAAK,CAACQ,WAAN,GAAoB,IAApB;AACD,GAFM,MAEA,IAAIjB,YAAY,CAACQ,IAAD,CAAhB,EAAwB;AAC7BC,IAAAA,KAAK,CAACS,SAAN,GAAkBT,KAAK,CAACS,SAAN,IAAmBC,QAAQ,CAACX,IAAI,CAACQ,MAAN,CAA7C;AACD;;AAED,SAAOP,KAAP;AACD;;AAED,SAASU,QAAT,CAAkBX,IAAlB,EAAwB;AACtB,MAAIN,kBAAkB,CAACM,IAAD,CAAtB,EAA8B;AAC5B,WAAOW,QAAQ,CAACX,IAAI,CAACE,MAAN,CAAR,IAAyBS,QAAQ,CAACX,IAAI,CAACI,QAAN,CAAxC;AACD,GAFD,MAEO,IAAIZ,YAAY,CAACQ,IAAD,CAAhB,EAAwB;AAC7B,WAAOA,IAAI,CAACY,IAAL,KAAc,SAAd,IAA2BZ,IAAI,CAACY,IAAL,CAAU,CAAV,MAAiB,GAAnD;AACD,GAFM,MAEA,IAAItB,gBAAgB,CAACU,IAAD,CAApB,EAA4B;AACjC,WAAOW,QAAQ,CAACX,IAAI,CAACQ,MAAN,CAAf;AACD,GAFM,MAEA,IAAIpB,QAAQ,CAACY,IAAD,CAAR,IAAkBb,sBAAsB,CAACa,IAAD,CAA5C,EAAoD;AACzD,WAAOR,YAAY,CAACQ,IAAI,CAACK,IAAN,CAAZ,IAA2BM,QAAQ,CAACX,IAAI,CAACK,IAAN,CAAnC,IAAkDM,QAAQ,CAACX,IAAI,CAACM,KAAN,CAAjE;AACD,GAFM,MAEA;AACL,WAAO,KAAP;AACD;AACF;;AAED,SAASO,MAAT,CAAgBb,IAAhB,EAAsB;AACpB,SAAOP,SAAS,CAACO,IAAD,CAAT,IAAmBL,kBAAkB,CAACK,IAAD,CAArC,IAA+Cd,iBAAiB,CAACc,IAAD,CAAhE,IAA0ER,YAAY,CAACQ,IAAD,CAAtF,IAAgGN,kBAAkB,CAACM,IAAD,CAAzH;AACD;;AAED,MAAMjB,KAAK,GAAG;AACZ+B,EAAAA,oBAAoB,CAACd,IAAD,EAAO;AACzB,UAAMC,KAAK,GAAGF,KAAK,CAACC,IAAI,CAACM,KAAN,CAAnB;;AAEA,QAAIL,KAAK,CAACM,OAAN,IAAiBN,KAAK,CAACS,SAAvB,IAAoCT,KAAK,CAACQ,WAA9C,EAA2D;AACzD,aAAO;AACLM,QAAAA,MAAM,EAAEd,KAAK,CAACQ,WADT;AAELO,QAAAA,KAAK,EAAE;AAFF,OAAP;AAID;AACF,GAVW;;AAYZC,EAAAA,UAAU,CAACjB,IAAD,EAAOkB,MAAP,EAAe;AACvB,WAAO;AACLH,MAAAA,MAAM,EAAE,CAAC,CAACf,IAAI,CAACmB,UAAL,CAAgBC,MAAlB,IAA4BF,MAAM,CAACG,KAAP,CAAa,CAAb,MAAoBrB,IADnD;AAELgB,MAAAA,KAAK,EAAE,CAAChB,IAAI,CAACmB,UAAL,CAAgBC,MAAjB,IAA2BF,MAAM,CAACG,KAAP,CAAaH,MAAM,CAACG,KAAP,CAAaD,MAAb,GAAsB,CAAnC,MAA0CpB;AAFvE,KAAP;AAID,GAjBW;;AAmBZsB,EAAAA,iBAAiB,CAACtB,IAAD,EAAO;AACtB,QAAIT,UAAU,CAACS,IAAI,CAACK,IAAN,CAAV,IAAyBd,UAAU,CAACS,IAAI,CAACM,KAAN,CAAvC,EAAqD;AACnD,aAAO;AACLU,QAAAA,KAAK,EAAE;AADF,OAAP;AAGD;AACF,GAzBW;;AA2BZO,EAAAA,OAAO,CAACvB,IAAD,EAAO;AACZ,QAAIF,eAAe,CAACE,IAAD,CAAf,IAAyBA,IAAI,CAACnB,KAAL,KAAe,YAA5C,EAA0D;AACxD,aAAO;AACLmC,QAAAA,KAAK,EAAE;AADF,OAAP;AAGD;AACF,GAjCW;;AAmCZQ,EAAAA,cAAc,CAACxB,IAAD,EAAO;AACnB,QAAIT,UAAU,CAACS,IAAI,CAACQ,MAAN,CAAV,IAA2BG,QAAQ,CAACX,IAAD,CAAvC,EAA+C;AAC7C,aAAO;AACLe,QAAAA,MAAM,EAAE,IADH;AAELC,QAAAA,KAAK,EAAE;AAFF,OAAP;AAID;AACF,GA1CW;;AA4CZS,EAAAA,sBAAsB,CAACzB,IAAD,EAAO;AAC3B,QAAIT,UAAU,CAACS,IAAI,CAACQ,MAAN,CAAd,EAA6B;AAC3B,aAAO;AACLO,QAAAA,MAAM,EAAE,IADH;AAELC,QAAAA,KAAK,EAAE;AAFF,OAAP;AAID;AACF,GAnDW;;AAqDZU,EAAAA,mBAAmB,CAAC1B,IAAD,EAAO;AACxB,SAAK,IAAI2B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG3B,IAAI,CAAC4B,YAAL,CAAkBR,MAAtC,EAA8CO,CAAC,EAA/C,EAAmD;AACjD,YAAME,MAAM,GAAG7B,IAAI,CAAC4B,YAAL,CAAkBD,CAAlB,CAAf;AACA,UAAIG,OAAO,GAAGnB,QAAQ,CAACkB,MAAM,CAACE,EAAR,CAAR,IAAuB,CAAClB,MAAM,CAACgB,MAAM,CAACG,IAAR,CAA5C;;AAEA,UAAI,CAACF,OAAL,EAAc;AACZ,cAAM7B,KAAK,GAAGF,KAAK,CAAC8B,MAAM,CAACG,IAAR,CAAnB;AACAF,QAAAA,OAAO,GAAGnB,QAAQ,CAACkB,MAAM,CAACG,IAAR,CAAR,IAAyB/B,KAAK,CAACM,OAA/B,IAA0CN,KAAK,CAACQ,WAA1D;AACD;;AAED,UAAIqB,OAAJ,EAAa;AACX,eAAO;AACLf,UAAAA,MAAM,EAAE,IADH;AAELC,UAAAA,KAAK,EAAE;AAFF,SAAP;AAID;AACF;AACF,GAtEW;;AAwEZiB,EAAAA,WAAW,CAACjC,IAAD,EAAO;AAChB,QAAIX,gBAAgB,CAACW,IAAI,CAACmB,UAAN,CAApB,EAAuC;AACrC,aAAO;AACLJ,QAAAA,MAAM,EAAE,IADH;AAELC,QAAAA,KAAK,EAAE;AAFF,OAAP;AAID;AACF;;AA/EW,CAAd;AAkFApC,OAAO,CAACG,KAAR,GAAgBA,KAAhB;;AAEAA,KAAK,CAACmD,cAAN,GAAuBnD,KAAK,CAACoD,kBAAN,GAA2BpD,KAAK,CAACqD,YAAN,GAAqB,UAAUpC,IAAV,EAAgBkB,MAAhB,EAAwB;AAC7F,MAAIA,MAAM,CAACmB,UAAP,CAAkB,CAAlB,MAAyBrC,IAA7B,EAAmC;AACjC,WAAO;AACLe,MAAAA,MAAM,EAAE;AADH,KAAP;AAGD;AACF,CAND;;AAQAhC,KAAK,CAACuD,sBAAN,GAA+B,UAAUtC,IAAV,EAAgBkB,MAAhB,EAAwB;AACrD,MAAIqB,kBAAJ;;AAEA,MAAIrB,MAAM,CAACsB,cAAP,CAAsB,CAAtB,MAA6BxC,IAA7B,IAAqC,EAAE,CAACuC,kBAAkB,GAAGrB,MAAM,CAACmB,UAA7B,KAA4C,IAA5C,IAAoDE,kBAAkB,CAACnB,MAAzE,CAAzC,EAA2H;AACzH,WAAO;AACLL,MAAAA,MAAM,EAAE;AADH,KAAP;AAGD;AACF,CARD;;AAUAhC,KAAK,CAAC0D,iBAAN,GAA0B,UAAUzC,IAAV,EAAgBkB,MAAhB,EAAwB;AAChD,MAAIwB,mBAAJ,EAAyBC,qBAAzB;;AAEA,MAAIzB,MAAM,CAAC0B,QAAP,CAAgB,CAAhB,MAAuB5C,IAAvB,IAA+B,EAAE,CAAC0C,mBAAmB,GAAGxB,MAAM,CAACmB,UAA9B,KAA6C,IAA7C,IAAqDK,mBAAmB,CAACtB,MAA3E,CAA/B,IAAqH,EAAE,CAACuB,qBAAqB,GAAGzB,MAAM,CAACsB,cAAhC,KAAmD,IAAnD,IAA2DG,qBAAqB,CAACvB,MAAnF,CAAzH,EAAqN;AACnN,WAAO;AACLL,MAAAA,MAAM,EAAE;AADH,KAAP;AAGD;AACF,CARD;;AAUAhC,KAAK,CAAC8D,sBAAN,GAA+B,UAAU7C,IAAV,EAAgBkB,MAAhB,EAAwB;AACrD,MAAI4B,mBAAJ,EAAyBC,sBAAzB,EAAiDC,gBAAjD;;AAEA,MAAI9B,MAAM,CAAC+B,aAAP,CAAqB,CAArB,MAA4BjD,IAA5B,IAAoC,EAAE,CAAC8C,mBAAmB,GAAG5B,MAAM,CAACmB,UAA9B,KAA6C,IAA7C,IAAqDS,mBAAmB,CAAC1B,MAA3E,CAApC,IAA0H,EAAE,CAAC2B,sBAAsB,GAAG7B,MAAM,CAACsB,cAAjC,KAAoD,IAApD,IAA4DO,sBAAsB,CAAC3B,MAArF,CAA1H,IAA0N,EAAE,CAAC4B,gBAAgB,GAAG9B,MAAM,CAAC0B,QAA3B,KAAwC,IAAxC,IAAgDI,gBAAgB,CAAC5B,MAAnE,CAA9N,EAA0S;AACxS,WAAO;AACLL,MAAAA,MAAM,EAAE;AADH,KAAP;AAGD;AACF,CARD;;AAUA,MAAMjC,IAAI,GAAG;AACX4C,EAAAA,mBAAmB,CAAC1B,IAAD,EAAO;AACxB,WAAOA,IAAI,CAAC4B,YAAL,CAAkBsB,GAAlB,CAAsBC,IAAI,IAAIA,IAAI,CAACnB,IAAnC,CAAP;AACD,GAHU;;AAKXoB,EAAAA,eAAe,CAACpD,IAAD,EAAO;AACpB,WAAOA,IAAI,CAACqD,QAAZ;AACD,GAPU;;AASXC,EAAAA,gBAAgB,CAACtD,IAAD,EAAO;AACrB,WAAOA,IAAI,CAACqC,UAAZ;AACD;;AAXU,CAAb;AAcAzD,OAAO,CAACE,IAAR,GAAeA,IAAf;AACA,CAAC,CAAC,UAAD,EAAa,IAAb,CAAD,EAAqB,CAAC,OAAD,EAAU,IAAV,CAArB,EAAsC,CAAC,MAAD,EAAS,IAAT,CAAtC,EAAsD,CAAC,kBAAD,EAAqB,IAArB,CAAtD,EAAkF,CAAC,iBAAD,EAAoB,IAApB,CAAlF,EAA6G,CAAC,cAAD,EAAiB,IAAjB,CAA7G,EAAqIyE,OAArI,CAA6I,UAAU,CAACC,IAAD,EAAOC,OAAP,CAAV,EAA2B;AACtK,MAAI,OAAOA,OAAP,KAAmB,SAAvB,EAAkC;AAChCA,IAAAA,OAAO,GAAG;AACRzC,MAAAA,KAAK,EAAEyC,OADC;AAER1C,MAAAA,MAAM,EAAE0C;AAFA,KAAV;AAID;;AAED,GAACD,IAAD,EAAOE,MAAP,CAAc1E,CAAC,CAAC2E,kBAAF,CAAqBH,IAArB,KAA8B,EAA5C,EAAgDD,OAAhD,CAAwD,UAAUC,IAAV,EAAgB;AACtEzE,IAAAA,KAAK,CAACyE,IAAD,CAAL,GAAc,YAAY;AACxB,aAAOC,OAAP;AACD,KAFD;AAGD,GAJD;AAKD,CAbD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.list = exports.nodes = void 0;\n\nvar t = require(\"@babel/types\");\n\nconst {\n  isArrayExpression,\n  isAssignmentExpression,\n  isBinary,\n  isBlockStatement,\n  isCallExpression,\n  isFunction,\n  isIdentifier,\n  isLiteral,\n  isMemberExpression,\n  isObjectExpression,\n  isOptionalCallExpression,\n  isOptionalMemberExpression,\n  isStringLiteral\n} = t;\n\nfunction crawl(node, state = {}) {\n  if (isMemberExpression(node) || isOptionalMemberExpression(node)) {\n    crawl(node.object, state);\n    if (node.computed) crawl(node.property, state);\n  } else if (isBinary(node) || isAssignmentExpression(node)) {\n    crawl(node.left, state);\n    crawl(node.right, state);\n  } else if (isCallExpression(node) || isOptionalCallExpression(node)) {\n    state.hasCall = true;\n    crawl(node.callee, state);\n  } else if (isFunction(node)) {\n    state.hasFunction = true;\n  } else if (isIdentifier(node)) {\n    state.hasHelper = state.hasHelper || isHelper(node.callee);\n  }\n\n  return state;\n}\n\nfunction isHelper(node) {\n  if (isMemberExpression(node)) {\n    return isHelper(node.object) || isHelper(node.property);\n  } else if (isIdentifier(node)) {\n    return node.name === \"require\" || node.name[0] === \"_\";\n  } else if (isCallExpression(node)) {\n    return isHelper(node.callee);\n  } else if (isBinary(node) || isAssignmentExpression(node)) {\n    return isIdentifier(node.left) && isHelper(node.left) || isHelper(node.right);\n  } else {\n    return false;\n  }\n}\n\nfunction isType(node) {\n  return isLiteral(node) || isObjectExpression(node) || isArrayExpression(node) || isIdentifier(node) || isMemberExpression(node);\n}\n\nconst nodes = {\n  AssignmentExpression(node) {\n    const state = crawl(node.right);\n\n    if (state.hasCall && state.hasHelper || state.hasFunction) {\n      return {\n        before: state.hasFunction,\n        after: true\n      };\n    }\n  },\n\n  SwitchCase(node, parent) {\n    return {\n      before: !!node.consequent.length || parent.cases[0] === node,\n      after: !node.consequent.length && parent.cases[parent.cases.length - 1] === node\n    };\n  },\n\n  LogicalExpression(node) {\n    if (isFunction(node.left) || isFunction(node.right)) {\n      return {\n        after: true\n      };\n    }\n  },\n\n  Literal(node) {\n    if (isStringLiteral(node) && node.value === \"use strict\") {\n      return {\n        after: true\n      };\n    }\n  },\n\n  CallExpression(node) {\n    if (isFunction(node.callee) || isHelper(node)) {\n      return {\n        before: true,\n        after: true\n      };\n    }\n  },\n\n  OptionalCallExpression(node) {\n    if (isFunction(node.callee)) {\n      return {\n        before: true,\n        after: true\n      };\n    }\n  },\n\n  VariableDeclaration(node) {\n    for (let i = 0; i < node.declarations.length; i++) {\n      const declar = node.declarations[i];\n      let enabled = isHelper(declar.id) && !isType(declar.init);\n\n      if (!enabled) {\n        const state = crawl(declar.init);\n        enabled = isHelper(declar.init) && state.hasCall || state.hasFunction;\n      }\n\n      if (enabled) {\n        return {\n          before: true,\n          after: true\n        };\n      }\n    }\n  },\n\n  IfStatement(node) {\n    if (isBlockStatement(node.consequent)) {\n      return {\n        before: true,\n        after: true\n      };\n    }\n  }\n\n};\nexports.nodes = nodes;\n\nnodes.ObjectProperty = nodes.ObjectTypeProperty = nodes.ObjectMethod = function (node, parent) {\n  if (parent.properties[0] === node) {\n    return {\n      before: true\n    };\n  }\n};\n\nnodes.ObjectTypeCallProperty = function (node, parent) {\n  var _parent$properties;\n\n  if (parent.callProperties[0] === node && !((_parent$properties = parent.properties) != null && _parent$properties.length)) {\n    return {\n      before: true\n    };\n  }\n};\n\nnodes.ObjectTypeIndexer = function (node, parent) {\n  var _parent$properties2, _parent$callPropertie;\n\n  if (parent.indexers[0] === node && !((_parent$properties2 = parent.properties) != null && _parent$properties2.length) && !((_parent$callPropertie = parent.callProperties) != null && _parent$callPropertie.length)) {\n    return {\n      before: true\n    };\n  }\n};\n\nnodes.ObjectTypeInternalSlot = function (node, parent) {\n  var _parent$properties3, _parent$callPropertie2, _parent$indexers;\n\n  if (parent.internalSlots[0] === node && !((_parent$properties3 = parent.properties) != null && _parent$properties3.length) && !((_parent$callPropertie2 = parent.callProperties) != null && _parent$callPropertie2.length) && !((_parent$indexers = parent.indexers) != null && _parent$indexers.length)) {\n    return {\n      before: true\n    };\n  }\n};\n\nconst list = {\n  VariableDeclaration(node) {\n    return node.declarations.map(decl => decl.init);\n  },\n\n  ArrayExpression(node) {\n    return node.elements;\n  },\n\n  ObjectExpression(node) {\n    return node.properties;\n  }\n\n};\nexports.list = list;\n[[\"Function\", true], [\"Class\", true], [\"Loop\", true], [\"LabeledStatement\", true], [\"SwitchStatement\", true], [\"TryStatement\", true]].forEach(function ([type, amounts]) {\n  if (typeof amounts === \"boolean\") {\n    amounts = {\n      after: amounts,\n      before: amounts\n    };\n  }\n\n  [type].concat(t.FLIPPED_ALIAS_KEYS[type] || []).forEach(function (type) {\n    nodes[type] = function () {\n      return amounts;\n    };\n  });\n});"]},"metadata":{},"sourceType":"script"}