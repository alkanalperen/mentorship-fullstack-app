{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = stringTemplate;\n\nvar _options = require(\"./options\");\n\nvar _parse = require(\"./parse\");\n\nvar _populate = require(\"./populate\");\n\nfunction stringTemplate(formatter, code, opts) {\n  code = formatter.code(code);\n  let metadata;\n  return arg => {\n    const replacements = (0, _options.normalizeReplacements)(arg);\n    if (!metadata) metadata = (0, _parse.default)(formatter, code, opts);\n    return formatter.unwrap((0, _populate.default)(metadata, replacements));\n  };\n}","map":{"version":3,"sources":["/Users/alperenalkan/obss/frontend/frontend/node_modules/@babel/template/lib/string.js"],"names":["Object","defineProperty","exports","value","default","stringTemplate","_options","require","_parse","_populate","formatter","code","opts","metadata","arg","replacements","normalizeReplacements","unwrap"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,cAAlB;;AAEA,IAAIC,QAAQ,GAAGC,OAAO,CAAC,WAAD,CAAtB;;AAEA,IAAIC,MAAM,GAAGD,OAAO,CAAC,SAAD,CAApB;;AAEA,IAAIE,SAAS,GAAGF,OAAO,CAAC,YAAD,CAAvB;;AAEA,SAASF,cAAT,CAAwBK,SAAxB,EAAmCC,IAAnC,EAAyCC,IAAzC,EAA+C;AAC7CD,EAAAA,IAAI,GAAGD,SAAS,CAACC,IAAV,CAAeA,IAAf,CAAP;AACA,MAAIE,QAAJ;AACA,SAAOC,GAAG,IAAI;AACZ,UAAMC,YAAY,GAAG,CAAC,GAAGT,QAAQ,CAACU,qBAAb,EAAoCF,GAApC,CAArB;AACA,QAAI,CAACD,QAAL,EAAeA,QAAQ,GAAG,CAAC,GAAGL,MAAM,CAACJ,OAAX,EAAoBM,SAApB,EAA+BC,IAA/B,EAAqCC,IAArC,CAAX;AACf,WAAOF,SAAS,CAACO,MAAV,CAAiB,CAAC,GAAGR,SAAS,CAACL,OAAd,EAAuBS,QAAvB,EAAiCE,YAAjC,CAAjB,CAAP;AACD,GAJD;AAKD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = stringTemplate;\n\nvar _options = require(\"./options\");\n\nvar _parse = require(\"./parse\");\n\nvar _populate = require(\"./populate\");\n\nfunction stringTemplate(formatter, code, opts) {\n  code = formatter.code(code);\n  let metadata;\n  return arg => {\n    const replacements = (0, _options.normalizeReplacements)(arg);\n    if (!metadata) metadata = (0, _parse.default)(formatter, code, opts);\n    return formatter.unwrap((0, _populate.default)(metadata, replacements));\n  };\n}"]},"metadata":{},"sourceType":"script"}