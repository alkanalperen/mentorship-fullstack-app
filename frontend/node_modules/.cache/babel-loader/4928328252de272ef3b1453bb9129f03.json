{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getTypeAnnotation = getTypeAnnotation;\nexports._getTypeAnnotation = _getTypeAnnotation;\nexports.isBaseType = isBaseType;\nexports.couldBeBaseType = couldBeBaseType;\nexports.baseTypeStrictlyMatches = baseTypeStrictlyMatches;\nexports.isGenericType = isGenericType;\n\nvar inferers = require(\"./inferers\");\n\nvar t = require(\"@babel/types\");\n\nfunction getTypeAnnotation() {\n  if (this.typeAnnotation) return this.typeAnnotation;\n  let type = this._getTypeAnnotation() || t.anyTypeAnnotation();\n  if (t.isTypeAnnotation(type)) type = type.typeAnnotation;\n  return this.typeAnnotation = type;\n}\n\nconst typeAnnotationInferringNodes = new WeakSet();\n\nfunction _getTypeAnnotation() {\n  const node = this.node;\n\n  if (!node) {\n    if (this.key === \"init\" && this.parentPath.isVariableDeclarator()) {\n      const declar = this.parentPath.parentPath;\n      const declarParent = declar.parentPath;\n\n      if (declar.key === \"left\" && declarParent.isForInStatement()) {\n        return t.stringTypeAnnotation();\n      }\n\n      if (declar.key === \"left\" && declarParent.isForOfStatement()) {\n        return t.anyTypeAnnotation();\n      }\n\n      return t.voidTypeAnnotation();\n    } else {\n      return;\n    }\n  }\n\n  if (node.typeAnnotation) {\n    return node.typeAnnotation;\n  }\n\n  if (typeAnnotationInferringNodes.has(node)) {\n    return;\n  }\n\n  typeAnnotationInferringNodes.add(node);\n\n  try {\n    var _inferer;\n\n    let inferer = inferers[node.type];\n\n    if (inferer) {\n      return inferer.call(this, node);\n    }\n\n    inferer = inferers[this.parentPath.type];\n\n    if ((_inferer = inferer) != null && _inferer.validParent) {\n      return this.parentPath.getTypeAnnotation();\n    }\n  } finally {\n    typeAnnotationInferringNodes.delete(node);\n  }\n}\n\nfunction isBaseType(baseName, soft) {\n  return _isBaseType(baseName, this.getTypeAnnotation(), soft);\n}\n\nfunction _isBaseType(baseName, type, soft) {\n  if (baseName === \"string\") {\n    return t.isStringTypeAnnotation(type);\n  } else if (baseName === \"number\") {\n    return t.isNumberTypeAnnotation(type);\n  } else if (baseName === \"boolean\") {\n    return t.isBooleanTypeAnnotation(type);\n  } else if (baseName === \"any\") {\n    return t.isAnyTypeAnnotation(type);\n  } else if (baseName === \"mixed\") {\n    return t.isMixedTypeAnnotation(type);\n  } else if (baseName === \"empty\") {\n    return t.isEmptyTypeAnnotation(type);\n  } else if (baseName === \"void\") {\n    return t.isVoidTypeAnnotation(type);\n  } else {\n    if (soft) {\n      return false;\n    } else {\n      throw new Error(`Unknown base type ${baseName}`);\n    }\n  }\n}\n\nfunction couldBeBaseType(name) {\n  const type = this.getTypeAnnotation();\n  if (t.isAnyTypeAnnotation(type)) return true;\n\n  if (t.isUnionTypeAnnotation(type)) {\n    for (const type2 of type.types) {\n      if (t.isAnyTypeAnnotation(type2) || _isBaseType(name, type2, true)) {\n        return true;\n      }\n    }\n\n    return false;\n  } else {\n    return _isBaseType(name, type, true);\n  }\n}\n\nfunction baseTypeStrictlyMatches(rightArg) {\n  const left = this.getTypeAnnotation();\n  const right = rightArg.getTypeAnnotation();\n\n  if (!t.isAnyTypeAnnotation(left) && t.isFlowBaseAnnotation(left)) {\n    return right.type === left.type;\n  }\n\n  return false;\n}\n\nfunction isGenericType(genericName) {\n  const type = this.getTypeAnnotation();\n  return t.isGenericTypeAnnotation(type) && t.isIdentifier(type.id, {\n    name: genericName\n  });\n}","map":{"version":3,"sources":["/Users/alperenalkan/obss/frontend/frontend/node_modules/@babel/traverse/lib/path/inference/index.js"],"names":["Object","defineProperty","exports","value","getTypeAnnotation","_getTypeAnnotation","isBaseType","couldBeBaseType","baseTypeStrictlyMatches","isGenericType","inferers","require","t","typeAnnotation","type","anyTypeAnnotation","isTypeAnnotation","typeAnnotationInferringNodes","WeakSet","node","key","parentPath","isVariableDeclarator","declar","declarParent","isForInStatement","stringTypeAnnotation","isForOfStatement","voidTypeAnnotation","has","add","_inferer","inferer","call","validParent","delete","baseName","soft","_isBaseType","isStringTypeAnnotation","isNumberTypeAnnotation","isBooleanTypeAnnotation","isAnyTypeAnnotation","isMixedTypeAnnotation","isEmptyTypeAnnotation","isVoidTypeAnnotation","Error","name","isUnionTypeAnnotation","type2","types","rightArg","left","right","isFlowBaseAnnotation","genericName","isGenericTypeAnnotation","isIdentifier","id"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getTypeAnnotation = getTypeAnnotation;\nexports._getTypeAnnotation = _getTypeAnnotation;\nexports.isBaseType = isBaseType;\nexports.couldBeBaseType = couldBeBaseType;\nexports.baseTypeStrictlyMatches = baseTypeStrictlyMatches;\nexports.isGenericType = isGenericType;\n\nvar inferers = require(\"./inferers\");\n\nvar t = require(\"@babel/types\");\n\nfunction getTypeAnnotation() {\n  if (this.typeAnnotation) return this.typeAnnotation;\n  let type = this._getTypeAnnotation() || t.anyTypeAnnotation();\n  if (t.isTypeAnnotation(type)) type = type.typeAnnotation;\n  return this.typeAnnotation = type;\n}\n\nconst typeAnnotationInferringNodes = new WeakSet();\n\nfunction _getTypeAnnotation() {\n  const node = this.node;\n\n  if (!node) {\n    if (this.key === \"init\" && this.parentPath.isVariableDeclarator()) {\n      const declar = this.parentPath.parentPath;\n      const declarParent = declar.parentPath;\n\n      if (declar.key === \"left\" && declarParent.isForInStatement()) {\n        return t.stringTypeAnnotation();\n      }\n\n      if (declar.key === \"left\" && declarParent.isForOfStatement()) {\n        return t.anyTypeAnnotation();\n      }\n\n      return t.voidTypeAnnotation();\n    } else {\n      return;\n    }\n  }\n\n  if (node.typeAnnotation) {\n    return node.typeAnnotation;\n  }\n\n  if (typeAnnotationInferringNodes.has(node)) {\n    return;\n  }\n\n  typeAnnotationInferringNodes.add(node);\n\n  try {\n    var _inferer;\n\n    let inferer = inferers[node.type];\n\n    if (inferer) {\n      return inferer.call(this, node);\n    }\n\n    inferer = inferers[this.parentPath.type];\n\n    if ((_inferer = inferer) != null && _inferer.validParent) {\n      return this.parentPath.getTypeAnnotation();\n    }\n  } finally {\n    typeAnnotationInferringNodes.delete(node);\n  }\n}\n\nfunction isBaseType(baseName, soft) {\n  return _isBaseType(baseName, this.getTypeAnnotation(), soft);\n}\n\nfunction _isBaseType(baseName, type, soft) {\n  if (baseName === \"string\") {\n    return t.isStringTypeAnnotation(type);\n  } else if (baseName === \"number\") {\n    return t.isNumberTypeAnnotation(type);\n  } else if (baseName === \"boolean\") {\n    return t.isBooleanTypeAnnotation(type);\n  } else if (baseName === \"any\") {\n    return t.isAnyTypeAnnotation(type);\n  } else if (baseName === \"mixed\") {\n    return t.isMixedTypeAnnotation(type);\n  } else if (baseName === \"empty\") {\n    return t.isEmptyTypeAnnotation(type);\n  } else if (baseName === \"void\") {\n    return t.isVoidTypeAnnotation(type);\n  } else {\n    if (soft) {\n      return false;\n    } else {\n      throw new Error(`Unknown base type ${baseName}`);\n    }\n  }\n}\n\nfunction couldBeBaseType(name) {\n  const type = this.getTypeAnnotation();\n  if (t.isAnyTypeAnnotation(type)) return true;\n\n  if (t.isUnionTypeAnnotation(type)) {\n    for (const type2 of type.types) {\n      if (t.isAnyTypeAnnotation(type2) || _isBaseType(name, type2, true)) {\n        return true;\n      }\n    }\n\n    return false;\n  } else {\n    return _isBaseType(name, type, true);\n  }\n}\n\nfunction baseTypeStrictlyMatches(rightArg) {\n  const left = this.getTypeAnnotation();\n  const right = rightArg.getTypeAnnotation();\n\n  if (!t.isAnyTypeAnnotation(left) && t.isFlowBaseAnnotation(left)) {\n    return right.type === left.type;\n  }\n\n  return false;\n}\n\nfunction isGenericType(genericName) {\n  const type = this.getTypeAnnotation();\n  return t.isGenericTypeAnnotation(type) && t.isIdentifier(type.id, {\n    name: genericName\n  });\n}"]},"metadata":{},"sourceType":"script"}