{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WithStatement = WithStatement;\nexports.IfStatement = IfStatement;\nexports.ForStatement = ForStatement;\nexports.WhileStatement = WhileStatement;\nexports.DoWhileStatement = DoWhileStatement;\nexports.LabeledStatement = LabeledStatement;\nexports.TryStatement = TryStatement;\nexports.CatchClause = CatchClause;\nexports.SwitchStatement = SwitchStatement;\nexports.SwitchCase = SwitchCase;\nexports.DebuggerStatement = DebuggerStatement;\nexports.VariableDeclaration = VariableDeclaration;\nexports.VariableDeclarator = VariableDeclarator;\nexports.ThrowStatement = exports.BreakStatement = exports.ReturnStatement = exports.ContinueStatement = exports.ForOfStatement = exports.ForInStatement = void 0;\n\nvar t = require(\"@babel/types\");\n\nconst {\n  isFor,\n  isForStatement,\n  isIfStatement,\n  isStatement\n} = t;\n\nfunction WithStatement(node) {\n  this.word(\"with\");\n  this.space();\n  this.token(\"(\");\n  this.print(node.object, node);\n  this.token(\")\");\n  this.printBlock(node);\n}\n\nfunction IfStatement(node) {\n  this.word(\"if\");\n  this.space();\n  this.token(\"(\");\n  this.print(node.test, node);\n  this.token(\")\");\n  this.space();\n  const needsBlock = node.alternate && isIfStatement(getLastStatement(node.consequent));\n\n  if (needsBlock) {\n    this.token(\"{\");\n    this.newline();\n    this.indent();\n  }\n\n  this.printAndIndentOnComments(node.consequent, node);\n\n  if (needsBlock) {\n    this.dedent();\n    this.newline();\n    this.token(\"}\");\n  }\n\n  if (node.alternate) {\n    if (this.endsWith(125)) this.space();\n    this.word(\"else\");\n    this.space();\n    this.printAndIndentOnComments(node.alternate, node);\n  }\n}\n\nfunction getLastStatement(statement) {\n  if (!isStatement(statement.body)) return statement;\n  return getLastStatement(statement.body);\n}\n\nfunction ForStatement(node) {\n  this.word(\"for\");\n  this.space();\n  this.token(\"(\");\n  this.inForStatementInitCounter++;\n  this.print(node.init, node);\n  this.inForStatementInitCounter--;\n  this.token(\";\");\n\n  if (node.test) {\n    this.space();\n    this.print(node.test, node);\n  }\n\n  this.token(\";\");\n\n  if (node.update) {\n    this.space();\n    this.print(node.update, node);\n  }\n\n  this.token(\")\");\n  this.printBlock(node);\n}\n\nfunction WhileStatement(node) {\n  this.word(\"while\");\n  this.space();\n  this.token(\"(\");\n  this.print(node.test, node);\n  this.token(\")\");\n  this.printBlock(node);\n}\n\nconst buildForXStatement = function (op) {\n  return function (node) {\n    this.word(\"for\");\n    this.space();\n\n    if (op === \"of\" && node.await) {\n      this.word(\"await\");\n      this.space();\n    }\n\n    this.token(\"(\");\n    this.print(node.left, node);\n    this.space();\n    this.word(op);\n    this.space();\n    this.print(node.right, node);\n    this.token(\")\");\n    this.printBlock(node);\n  };\n};\n\nconst ForInStatement = buildForXStatement(\"in\");\nexports.ForInStatement = ForInStatement;\nconst ForOfStatement = buildForXStatement(\"of\");\nexports.ForOfStatement = ForOfStatement;\n\nfunction DoWhileStatement(node) {\n  this.word(\"do\");\n  this.space();\n  this.print(node.body, node);\n  this.space();\n  this.word(\"while\");\n  this.space();\n  this.token(\"(\");\n  this.print(node.test, node);\n  this.token(\")\");\n  this.semicolon();\n}\n\nfunction buildLabelStatement(prefix, key = \"label\") {\n  return function (node) {\n    this.word(prefix);\n    const label = node[key];\n\n    if (label) {\n      this.space();\n      const isLabel = key == \"label\";\n      const terminatorState = this.startTerminatorless(isLabel);\n      this.print(label, node);\n      this.endTerminatorless(terminatorState);\n    }\n\n    this.semicolon();\n  };\n}\n\nconst ContinueStatement = buildLabelStatement(\"continue\");\nexports.ContinueStatement = ContinueStatement;\nconst ReturnStatement = buildLabelStatement(\"return\", \"argument\");\nexports.ReturnStatement = ReturnStatement;\nconst BreakStatement = buildLabelStatement(\"break\");\nexports.BreakStatement = BreakStatement;\nconst ThrowStatement = buildLabelStatement(\"throw\", \"argument\");\nexports.ThrowStatement = ThrowStatement;\n\nfunction LabeledStatement(node) {\n  this.print(node.label, node);\n  this.token(\":\");\n  this.space();\n  this.print(node.body, node);\n}\n\nfunction TryStatement(node) {\n  this.word(\"try\");\n  this.space();\n  this.print(node.block, node);\n  this.space();\n\n  if (node.handlers) {\n    this.print(node.handlers[0], node);\n  } else {\n    this.print(node.handler, node);\n  }\n\n  if (node.finalizer) {\n    this.space();\n    this.word(\"finally\");\n    this.space();\n    this.print(node.finalizer, node);\n  }\n}\n\nfunction CatchClause(node) {\n  this.word(\"catch\");\n  this.space();\n\n  if (node.param) {\n    this.token(\"(\");\n    this.print(node.param, node);\n    this.print(node.param.typeAnnotation, node);\n    this.token(\")\");\n    this.space();\n  }\n\n  this.print(node.body, node);\n}\n\nfunction SwitchStatement(node) {\n  this.word(\"switch\");\n  this.space();\n  this.token(\"(\");\n  this.print(node.discriminant, node);\n  this.token(\")\");\n  this.space();\n  this.token(\"{\");\n  this.printSequence(node.cases, node, {\n    indent: true,\n\n    addNewlines(leading, cas) {\n      if (!leading && node.cases[node.cases.length - 1] === cas) return -1;\n    }\n\n  });\n  this.token(\"}\");\n}\n\nfunction SwitchCase(node) {\n  if (node.test) {\n    this.word(\"case\");\n    this.space();\n    this.print(node.test, node);\n    this.token(\":\");\n  } else {\n    this.word(\"default\");\n    this.token(\":\");\n  }\n\n  if (node.consequent.length) {\n    this.newline();\n    this.printSequence(node.consequent, node, {\n      indent: true\n    });\n  }\n}\n\nfunction DebuggerStatement() {\n  this.word(\"debugger\");\n  this.semicolon();\n}\n\nfunction variableDeclarationIndent() {\n  this.token(\",\");\n  this.newline();\n\n  if (this.endsWith(10)) {\n    for (let i = 0; i < 4; i++) this.space(true);\n  }\n}\n\nfunction constDeclarationIndent() {\n  this.token(\",\");\n  this.newline();\n\n  if (this.endsWith(10)) {\n    for (let i = 0; i < 6; i++) this.space(true);\n  }\n}\n\nfunction VariableDeclaration(node, parent) {\n  if (node.declare) {\n    this.word(\"declare\");\n    this.space();\n  }\n\n  this.word(node.kind);\n  this.space();\n  let hasInits = false;\n\n  if (!isFor(parent)) {\n    for (const declar of node.declarations) {\n      if (declar.init) {\n        hasInits = true;\n      }\n    }\n  }\n\n  let separator;\n\n  if (hasInits) {\n    separator = node.kind === \"const\" ? constDeclarationIndent : variableDeclarationIndent;\n  }\n\n  this.printList(node.declarations, node, {\n    separator\n  });\n\n  if (isFor(parent)) {\n    if (isForStatement(parent)) {\n      if (parent.init === node) return;\n    } else {\n      if (parent.left === node) return;\n    }\n  }\n\n  this.semicolon();\n}\n\nfunction VariableDeclarator(node) {\n  this.print(node.id, node);\n  if (node.definite) this.token(\"!\");\n  this.print(node.id.typeAnnotation, node);\n\n  if (node.init) {\n    this.space();\n    this.token(\"=\");\n    this.space();\n    this.print(node.init, node);\n  }\n}","map":{"version":3,"sources":["/Users/alperenalkan/obss/frontend/frontend/node_modules/@babel/generator/lib/generators/statements.js"],"names":["Object","defineProperty","exports","value","WithStatement","IfStatement","ForStatement","WhileStatement","DoWhileStatement","LabeledStatement","TryStatement","CatchClause","SwitchStatement","SwitchCase","DebuggerStatement","VariableDeclaration","VariableDeclarator","ThrowStatement","BreakStatement","ReturnStatement","ContinueStatement","ForOfStatement","ForInStatement","t","require","isFor","isForStatement","isIfStatement","isStatement","node","word","space","token","print","object","printBlock","test","needsBlock","alternate","getLastStatement","consequent","newline","indent","printAndIndentOnComments","dedent","endsWith","statement","body","inForStatementInitCounter","init","update","buildForXStatement","op","await","left","right","semicolon","buildLabelStatement","prefix","key","label","isLabel","terminatorState","startTerminatorless","endTerminatorless","block","handlers","handler","finalizer","param","typeAnnotation","discriminant","printSequence","cases","addNewlines","leading","cas","length","variableDeclarationIndent","i","constDeclarationIndent","parent","declare","kind","hasInits","declar","declarations","separator","printList","id","definite"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WithStatement = WithStatement;\nexports.IfStatement = IfStatement;\nexports.ForStatement = ForStatement;\nexports.WhileStatement = WhileStatement;\nexports.DoWhileStatement = DoWhileStatement;\nexports.LabeledStatement = LabeledStatement;\nexports.TryStatement = TryStatement;\nexports.CatchClause = CatchClause;\nexports.SwitchStatement = SwitchStatement;\nexports.SwitchCase = SwitchCase;\nexports.DebuggerStatement = DebuggerStatement;\nexports.VariableDeclaration = VariableDeclaration;\nexports.VariableDeclarator = VariableDeclarator;\nexports.ThrowStatement = exports.BreakStatement = exports.ReturnStatement = exports.ContinueStatement = exports.ForOfStatement = exports.ForInStatement = void 0;\n\nvar t = require(\"@babel/types\");\n\nconst {\n  isFor,\n  isForStatement,\n  isIfStatement,\n  isStatement\n} = t;\n\nfunction WithStatement(node) {\n  this.word(\"with\");\n  this.space();\n  this.token(\"(\");\n  this.print(node.object, node);\n  this.token(\")\");\n  this.printBlock(node);\n}\n\nfunction IfStatement(node) {\n  this.word(\"if\");\n  this.space();\n  this.token(\"(\");\n  this.print(node.test, node);\n  this.token(\")\");\n  this.space();\n  const needsBlock = node.alternate && isIfStatement(getLastStatement(node.consequent));\n\n  if (needsBlock) {\n    this.token(\"{\");\n    this.newline();\n    this.indent();\n  }\n\n  this.printAndIndentOnComments(node.consequent, node);\n\n  if (needsBlock) {\n    this.dedent();\n    this.newline();\n    this.token(\"}\");\n  }\n\n  if (node.alternate) {\n    if (this.endsWith(125)) this.space();\n    this.word(\"else\");\n    this.space();\n    this.printAndIndentOnComments(node.alternate, node);\n  }\n}\n\nfunction getLastStatement(statement) {\n  if (!isStatement(statement.body)) return statement;\n  return getLastStatement(statement.body);\n}\n\nfunction ForStatement(node) {\n  this.word(\"for\");\n  this.space();\n  this.token(\"(\");\n  this.inForStatementInitCounter++;\n  this.print(node.init, node);\n  this.inForStatementInitCounter--;\n  this.token(\";\");\n\n  if (node.test) {\n    this.space();\n    this.print(node.test, node);\n  }\n\n  this.token(\";\");\n\n  if (node.update) {\n    this.space();\n    this.print(node.update, node);\n  }\n\n  this.token(\")\");\n  this.printBlock(node);\n}\n\nfunction WhileStatement(node) {\n  this.word(\"while\");\n  this.space();\n  this.token(\"(\");\n  this.print(node.test, node);\n  this.token(\")\");\n  this.printBlock(node);\n}\n\nconst buildForXStatement = function (op) {\n  return function (node) {\n    this.word(\"for\");\n    this.space();\n\n    if (op === \"of\" && node.await) {\n      this.word(\"await\");\n      this.space();\n    }\n\n    this.token(\"(\");\n    this.print(node.left, node);\n    this.space();\n    this.word(op);\n    this.space();\n    this.print(node.right, node);\n    this.token(\")\");\n    this.printBlock(node);\n  };\n};\n\nconst ForInStatement = buildForXStatement(\"in\");\nexports.ForInStatement = ForInStatement;\nconst ForOfStatement = buildForXStatement(\"of\");\nexports.ForOfStatement = ForOfStatement;\n\nfunction DoWhileStatement(node) {\n  this.word(\"do\");\n  this.space();\n  this.print(node.body, node);\n  this.space();\n  this.word(\"while\");\n  this.space();\n  this.token(\"(\");\n  this.print(node.test, node);\n  this.token(\")\");\n  this.semicolon();\n}\n\nfunction buildLabelStatement(prefix, key = \"label\") {\n  return function (node) {\n    this.word(prefix);\n    const label = node[key];\n\n    if (label) {\n      this.space();\n      const isLabel = key == \"label\";\n      const terminatorState = this.startTerminatorless(isLabel);\n      this.print(label, node);\n      this.endTerminatorless(terminatorState);\n    }\n\n    this.semicolon();\n  };\n}\n\nconst ContinueStatement = buildLabelStatement(\"continue\");\nexports.ContinueStatement = ContinueStatement;\nconst ReturnStatement = buildLabelStatement(\"return\", \"argument\");\nexports.ReturnStatement = ReturnStatement;\nconst BreakStatement = buildLabelStatement(\"break\");\nexports.BreakStatement = BreakStatement;\nconst ThrowStatement = buildLabelStatement(\"throw\", \"argument\");\nexports.ThrowStatement = ThrowStatement;\n\nfunction LabeledStatement(node) {\n  this.print(node.label, node);\n  this.token(\":\");\n  this.space();\n  this.print(node.body, node);\n}\n\nfunction TryStatement(node) {\n  this.word(\"try\");\n  this.space();\n  this.print(node.block, node);\n  this.space();\n\n  if (node.handlers) {\n    this.print(node.handlers[0], node);\n  } else {\n    this.print(node.handler, node);\n  }\n\n  if (node.finalizer) {\n    this.space();\n    this.word(\"finally\");\n    this.space();\n    this.print(node.finalizer, node);\n  }\n}\n\nfunction CatchClause(node) {\n  this.word(\"catch\");\n  this.space();\n\n  if (node.param) {\n    this.token(\"(\");\n    this.print(node.param, node);\n    this.print(node.param.typeAnnotation, node);\n    this.token(\")\");\n    this.space();\n  }\n\n  this.print(node.body, node);\n}\n\nfunction SwitchStatement(node) {\n  this.word(\"switch\");\n  this.space();\n  this.token(\"(\");\n  this.print(node.discriminant, node);\n  this.token(\")\");\n  this.space();\n  this.token(\"{\");\n  this.printSequence(node.cases, node, {\n    indent: true,\n\n    addNewlines(leading, cas) {\n      if (!leading && node.cases[node.cases.length - 1] === cas) return -1;\n    }\n\n  });\n  this.token(\"}\");\n}\n\nfunction SwitchCase(node) {\n  if (node.test) {\n    this.word(\"case\");\n    this.space();\n    this.print(node.test, node);\n    this.token(\":\");\n  } else {\n    this.word(\"default\");\n    this.token(\":\");\n  }\n\n  if (node.consequent.length) {\n    this.newline();\n    this.printSequence(node.consequent, node, {\n      indent: true\n    });\n  }\n}\n\nfunction DebuggerStatement() {\n  this.word(\"debugger\");\n  this.semicolon();\n}\n\nfunction variableDeclarationIndent() {\n  this.token(\",\");\n  this.newline();\n\n  if (this.endsWith(10)) {\n    for (let i = 0; i < 4; i++) this.space(true);\n  }\n}\n\nfunction constDeclarationIndent() {\n  this.token(\",\");\n  this.newline();\n\n  if (this.endsWith(10)) {\n    for (let i = 0; i < 6; i++) this.space(true);\n  }\n}\n\nfunction VariableDeclaration(node, parent) {\n  if (node.declare) {\n    this.word(\"declare\");\n    this.space();\n  }\n\n  this.word(node.kind);\n  this.space();\n  let hasInits = false;\n\n  if (!isFor(parent)) {\n    for (const declar of node.declarations) {\n      if (declar.init) {\n        hasInits = true;\n      }\n    }\n  }\n\n  let separator;\n\n  if (hasInits) {\n    separator = node.kind === \"const\" ? constDeclarationIndent : variableDeclarationIndent;\n  }\n\n  this.printList(node.declarations, node, {\n    separator\n  });\n\n  if (isFor(parent)) {\n    if (isForStatement(parent)) {\n      if (parent.init === node) return;\n    } else {\n      if (parent.left === node) return;\n    }\n  }\n\n  this.semicolon();\n}\n\nfunction VariableDeclarator(node) {\n  this.print(node.id, node);\n  if (node.definite) this.token(\"!\");\n  this.print(node.id.typeAnnotation, node);\n\n  if (node.init) {\n    this.space();\n    this.token(\"=\");\n    this.space();\n    this.print(node.init, node);\n  }\n}"]},"metadata":{},"sourceType":"script"}