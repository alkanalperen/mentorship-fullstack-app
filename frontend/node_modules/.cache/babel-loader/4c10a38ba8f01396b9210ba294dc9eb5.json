{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getOpposite = getOpposite;\nexports.getCompletionRecords = getCompletionRecords;\nexports.getSibling = getSibling;\nexports.getPrevSibling = getPrevSibling;\nexports.getNextSibling = getNextSibling;\nexports.getAllNextSiblings = getAllNextSiblings;\nexports.getAllPrevSiblings = getAllPrevSiblings;\nexports.get = get;\nexports._getKey = _getKey;\nexports._getPattern = _getPattern;\nexports.getBindingIdentifiers = getBindingIdentifiers;\nexports.getOuterBindingIdentifiers = getOuterBindingIdentifiers;\nexports.getBindingIdentifierPaths = getBindingIdentifierPaths;\nexports.getOuterBindingIdentifierPaths = getOuterBindingIdentifierPaths;\n\nvar _index = require(\"./index\");\n\nvar t = require(\"@babel/types\");\n\nconst NORMAL_COMPLETION = 0;\nconst BREAK_COMPLETION = 1;\n\nfunction NormalCompletion(path) {\n  return {\n    type: NORMAL_COMPLETION,\n    path\n  };\n}\n\nfunction BreakCompletion(path) {\n  return {\n    type: BREAK_COMPLETION,\n    path\n  };\n}\n\nfunction getOpposite() {\n  if (this.key === \"left\") {\n    return this.getSibling(\"right\");\n  } else if (this.key === \"right\") {\n    return this.getSibling(\"left\");\n  }\n\n  return null;\n}\n\nfunction addCompletionRecords(path, records, context) {\n  if (path) return records.concat(_getCompletionRecords(path, context));\n  return records;\n}\n\nfunction completionRecordForSwitch(cases, records, context) {\n  let lastNormalCompletions = [];\n\n  for (let i = 0; i < cases.length; i++) {\n    const casePath = cases[i];\n\n    const caseCompletions = _getCompletionRecords(casePath, context);\n\n    const normalCompletions = [];\n    const breakCompletions = [];\n\n    for (const c of caseCompletions) {\n      if (c.type === NORMAL_COMPLETION) {\n        normalCompletions.push(c);\n      }\n\n      if (c.type === BREAK_COMPLETION) {\n        breakCompletions.push(c);\n      }\n    }\n\n    if (normalCompletions.length) {\n      lastNormalCompletions = normalCompletions;\n    }\n\n    records = records.concat(breakCompletions);\n  }\n\n  records = records.concat(lastNormalCompletions);\n  return records;\n}\n\nfunction normalCompletionToBreak(completions) {\n  completions.forEach(c => {\n    c.type = BREAK_COMPLETION;\n  });\n}\n\nfunction replaceBreakStatementInBreakCompletion(completions, reachable) {\n  completions.forEach(c => {\n    if (c.path.isBreakStatement({\n      label: null\n    })) {\n      if (reachable) {\n        c.path.replaceWith(t.unaryExpression(\"void\", t.numericLiteral(0)));\n      } else {\n        c.path.remove();\n      }\n    }\n  });\n}\n\nfunction getStatementListCompletion(paths, context) {\n  let completions = [];\n\n  if (context.canHaveBreak) {\n    let lastNormalCompletions = [];\n\n    for (let i = 0; i < paths.length; i++) {\n      const path = paths[i];\n      const newContext = Object.assign({}, context, {\n        inCaseClause: false\n      });\n\n      if (path.isBlockStatement() && (context.inCaseClause || context.shouldPopulateBreak)) {\n        newContext.shouldPopulateBreak = true;\n      } else {\n        newContext.shouldPopulateBreak = false;\n      }\n\n      const statementCompletions = _getCompletionRecords(path, newContext);\n\n      if (statementCompletions.length > 0 && statementCompletions.every(c => c.type === BREAK_COMPLETION)) {\n        if (lastNormalCompletions.length > 0 && statementCompletions.every(c => c.path.isBreakStatement({\n          label: null\n        }))) {\n          normalCompletionToBreak(lastNormalCompletions);\n          completions = completions.concat(lastNormalCompletions);\n\n          if (lastNormalCompletions.some(c => c.path.isDeclaration())) {\n            completions = completions.concat(statementCompletions);\n            replaceBreakStatementInBreakCompletion(statementCompletions, true);\n          }\n\n          replaceBreakStatementInBreakCompletion(statementCompletions, false);\n        } else {\n          completions = completions.concat(statementCompletions);\n\n          if (!context.shouldPopulateBreak) {\n            replaceBreakStatementInBreakCompletion(statementCompletions, true);\n          }\n        }\n\n        break;\n      }\n\n      if (i === paths.length - 1) {\n        completions = completions.concat(statementCompletions);\n      } else {\n        completions = completions.concat(statementCompletions.filter(c => c.type === BREAK_COMPLETION));\n        lastNormalCompletions = statementCompletions.filter(c => c.type === NORMAL_COMPLETION);\n      }\n    }\n  } else if (paths.length) {\n    for (let i = paths.length - 1; i >= 0; i--) {\n      const pathCompletions = _getCompletionRecords(paths[i], context);\n\n      if (pathCompletions.length > 1 || pathCompletions.length === 1 && !pathCompletions[0].path.isVariableDeclaration()) {\n        completions = completions.concat(pathCompletions);\n        break;\n      }\n    }\n  }\n\n  return completions;\n}\n\nfunction _getCompletionRecords(path, context) {\n  let records = [];\n\n  if (path.isIfStatement()) {\n    records = addCompletionRecords(path.get(\"consequent\"), records, context);\n    records = addCompletionRecords(path.get(\"alternate\"), records, context);\n  } else if (path.isDoExpression() || path.isFor() || path.isWhile() || path.isLabeledStatement()) {\n    records = addCompletionRecords(path.get(\"body\"), records, context);\n  } else if (path.isProgram() || path.isBlockStatement()) {\n    records = records.concat(getStatementListCompletion(path.get(\"body\"), context));\n  } else if (path.isFunction()) {\n    return _getCompletionRecords(path.get(\"body\"), context);\n  } else if (path.isTryStatement()) {\n    records = addCompletionRecords(path.get(\"block\"), records, context);\n    records = addCompletionRecords(path.get(\"handler\"), records, context);\n  } else if (path.isCatchClause()) {\n    records = addCompletionRecords(path.get(\"body\"), records, context);\n  } else if (path.isSwitchStatement()) {\n    records = completionRecordForSwitch(path.get(\"cases\"), records, context);\n  } else if (path.isSwitchCase()) {\n    records = records.concat(getStatementListCompletion(path.get(\"consequent\"), {\n      canHaveBreak: true,\n      shouldPopulateBreak: false,\n      inCaseClause: true\n    }));\n  } else if (path.isBreakStatement()) {\n    records.push(BreakCompletion(path));\n  } else {\n    records.push(NormalCompletion(path));\n  }\n\n  return records;\n}\n\nfunction getCompletionRecords() {\n  const records = _getCompletionRecords(this, {\n    canHaveBreak: false,\n    shouldPopulateBreak: false,\n    inCaseClause: false\n  });\n\n  return records.map(r => r.path);\n}\n\nfunction getSibling(key) {\n  return _index.default.get({\n    parentPath: this.parentPath,\n    parent: this.parent,\n    container: this.container,\n    listKey: this.listKey,\n    key: key\n  }).setContext(this.context);\n}\n\nfunction getPrevSibling() {\n  return this.getSibling(this.key - 1);\n}\n\nfunction getNextSibling() {\n  return this.getSibling(this.key + 1);\n}\n\nfunction getAllNextSiblings() {\n  let _key = this.key;\n  let sibling = this.getSibling(++_key);\n  const siblings = [];\n\n  while (sibling.node) {\n    siblings.push(sibling);\n    sibling = this.getSibling(++_key);\n  }\n\n  return siblings;\n}\n\nfunction getAllPrevSiblings() {\n  let _key = this.key;\n  let sibling = this.getSibling(--_key);\n  const siblings = [];\n\n  while (sibling.node) {\n    siblings.push(sibling);\n    sibling = this.getSibling(--_key);\n  }\n\n  return siblings;\n}\n\nfunction get(key, context = true) {\n  if (context === true) context = this.context;\n  const parts = key.split(\".\");\n\n  if (parts.length === 1) {\n    return this._getKey(key, context);\n  } else {\n    return this._getPattern(parts, context);\n  }\n}\n\nfunction _getKey(key, context) {\n  const node = this.node;\n  const container = node[key];\n\n  if (Array.isArray(container)) {\n    return container.map((_, i) => {\n      return _index.default.get({\n        listKey: key,\n        parentPath: this,\n        parent: node,\n        container: container,\n        key: i\n      }).setContext(context);\n    });\n  } else {\n    return _index.default.get({\n      parentPath: this,\n      parent: node,\n      container: node,\n      key: key\n    }).setContext(context);\n  }\n}\n\nfunction _getPattern(parts, context) {\n  let path = this;\n\n  for (const part of parts) {\n    if (part === \".\") {\n      path = path.parentPath;\n    } else {\n      if (Array.isArray(path)) {\n        path = path[part];\n      } else {\n        path = path.get(part, context);\n      }\n    }\n  }\n\n  return path;\n}\n\nfunction getBindingIdentifiers(duplicates) {\n  return t.getBindingIdentifiers(this.node, duplicates);\n}\n\nfunction getOuterBindingIdentifiers(duplicates) {\n  return t.getOuterBindingIdentifiers(this.node, duplicates);\n}\n\nfunction getBindingIdentifierPaths(duplicates = false, outerOnly = false) {\n  const path = this;\n  let search = [].concat(path);\n  const ids = Object.create(null);\n\n  while (search.length) {\n    const id = search.shift();\n    if (!id) continue;\n    if (!id.node) continue;\n    const keys = t.getBindingIdentifiers.keys[id.node.type];\n\n    if (id.isIdentifier()) {\n      if (duplicates) {\n        const _ids = ids[id.node.name] = ids[id.node.name] || [];\n\n        _ids.push(id);\n      } else {\n        ids[id.node.name] = id;\n      }\n\n      continue;\n    }\n\n    if (id.isExportDeclaration()) {\n      const declaration = id.get(\"declaration\");\n\n      if (declaration.isDeclaration()) {\n        search.push(declaration);\n      }\n\n      continue;\n    }\n\n    if (outerOnly) {\n      if (id.isFunctionDeclaration()) {\n        search.push(id.get(\"id\"));\n        continue;\n      }\n\n      if (id.isFunctionExpression()) {\n        continue;\n      }\n    }\n\n    if (keys) {\n      for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n        const child = id.get(key);\n\n        if (Array.isArray(child) || child.node) {\n          search = search.concat(child);\n        }\n      }\n    }\n  }\n\n  return ids;\n}\n\nfunction getOuterBindingIdentifierPaths(duplicates) {\n  return this.getBindingIdentifierPaths(duplicates, true);\n}","map":{"version":3,"sources":["/Users/alperenalkan/obss/frontend/frontend/node_modules/@babel/traverse/lib/path/family.js"],"names":["Object","defineProperty","exports","value","getOpposite","getCompletionRecords","getSibling","getPrevSibling","getNextSibling","getAllNextSiblings","getAllPrevSiblings","get","_getKey","_getPattern","getBindingIdentifiers","getOuterBindingIdentifiers","getBindingIdentifierPaths","getOuterBindingIdentifierPaths","_index","require","t","NORMAL_COMPLETION","BREAK_COMPLETION","NormalCompletion","path","type","BreakCompletion","key","addCompletionRecords","records","context","concat","_getCompletionRecords","completionRecordForSwitch","cases","lastNormalCompletions","i","length","casePath","caseCompletions","normalCompletions","breakCompletions","c","push","normalCompletionToBreak","completions","forEach","replaceBreakStatementInBreakCompletion","reachable","isBreakStatement","label","replaceWith","unaryExpression","numericLiteral","remove","getStatementListCompletion","paths","canHaveBreak","newContext","assign","inCaseClause","isBlockStatement","shouldPopulateBreak","statementCompletions","every","some","isDeclaration","filter","pathCompletions","isVariableDeclaration","isIfStatement","isDoExpression","isFor","isWhile","isLabeledStatement","isProgram","isFunction","isTryStatement","isCatchClause","isSwitchStatement","isSwitchCase","map","r","default","parentPath","parent","container","listKey","setContext","_key","sibling","siblings","node","parts","split","Array","isArray","_","part","duplicates","outerOnly","search","ids","create","id","shift","keys","isIdentifier","_ids","name","isExportDeclaration","declaration","isFunctionDeclaration","isFunctionExpression","child"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,WAAR,GAAsBA,WAAtB;AACAF,OAAO,CAACG,oBAAR,GAA+BA,oBAA/B;AACAH,OAAO,CAACI,UAAR,GAAqBA,UAArB;AACAJ,OAAO,CAACK,cAAR,GAAyBA,cAAzB;AACAL,OAAO,CAACM,cAAR,GAAyBA,cAAzB;AACAN,OAAO,CAACO,kBAAR,GAA6BA,kBAA7B;AACAP,OAAO,CAACQ,kBAAR,GAA6BA,kBAA7B;AACAR,OAAO,CAACS,GAAR,GAAcA,GAAd;AACAT,OAAO,CAACU,OAAR,GAAkBA,OAAlB;AACAV,OAAO,CAACW,WAAR,GAAsBA,WAAtB;AACAX,OAAO,CAACY,qBAAR,GAAgCA,qBAAhC;AACAZ,OAAO,CAACa,0BAAR,GAAqCA,0BAArC;AACAb,OAAO,CAACc,yBAAR,GAAoCA,yBAApC;AACAd,OAAO,CAACe,8BAAR,GAAyCA,8BAAzC;;AAEA,IAAIC,MAAM,GAAGC,OAAO,CAAC,SAAD,CAApB;;AAEA,IAAIC,CAAC,GAAGD,OAAO,CAAC,cAAD,CAAf;;AAEA,MAAME,iBAAiB,GAAG,CAA1B;AACA,MAAMC,gBAAgB,GAAG,CAAzB;;AAEA,SAASC,gBAAT,CAA0BC,IAA1B,EAAgC;AAC9B,SAAO;AACLC,IAAAA,IAAI,EAAEJ,iBADD;AAELG,IAAAA;AAFK,GAAP;AAID;;AAED,SAASE,eAAT,CAAyBF,IAAzB,EAA+B;AAC7B,SAAO;AACLC,IAAAA,IAAI,EAAEH,gBADD;AAELE,IAAAA;AAFK,GAAP;AAID;;AAED,SAASpB,WAAT,GAAuB;AACrB,MAAI,KAAKuB,GAAL,KAAa,MAAjB,EAAyB;AACvB,WAAO,KAAKrB,UAAL,CAAgB,OAAhB,CAAP;AACD,GAFD,MAEO,IAAI,KAAKqB,GAAL,KAAa,OAAjB,EAA0B;AAC/B,WAAO,KAAKrB,UAAL,CAAgB,MAAhB,CAAP;AACD;;AAED,SAAO,IAAP;AACD;;AAED,SAASsB,oBAAT,CAA8BJ,IAA9B,EAAoCK,OAApC,EAA6CC,OAA7C,EAAsD;AACpD,MAAIN,IAAJ,EAAU,OAAOK,OAAO,CAACE,MAAR,CAAeC,qBAAqB,CAACR,IAAD,EAAOM,OAAP,CAApC,CAAP;AACV,SAAOD,OAAP;AACD;;AAED,SAASI,yBAAT,CAAmCC,KAAnC,EAA0CL,OAA1C,EAAmDC,OAAnD,EAA4D;AAC1D,MAAIK,qBAAqB,GAAG,EAA5B;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAACG,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,UAAME,QAAQ,GAAGJ,KAAK,CAACE,CAAD,CAAtB;;AAEA,UAAMG,eAAe,GAAGP,qBAAqB,CAACM,QAAD,EAAWR,OAAX,CAA7C;;AAEA,UAAMU,iBAAiB,GAAG,EAA1B;AACA,UAAMC,gBAAgB,GAAG,EAAzB;;AAEA,SAAK,MAAMC,CAAX,IAAgBH,eAAhB,EAAiC;AAC/B,UAAIG,CAAC,CAACjB,IAAF,KAAWJ,iBAAf,EAAkC;AAChCmB,QAAAA,iBAAiB,CAACG,IAAlB,CAAuBD,CAAvB;AACD;;AAED,UAAIA,CAAC,CAACjB,IAAF,KAAWH,gBAAf,EAAiC;AAC/BmB,QAAAA,gBAAgB,CAACE,IAAjB,CAAsBD,CAAtB;AACD;AACF;;AAED,QAAIF,iBAAiB,CAACH,MAAtB,EAA8B;AAC5BF,MAAAA,qBAAqB,GAAGK,iBAAxB;AACD;;AAEDX,IAAAA,OAAO,GAAGA,OAAO,CAACE,MAAR,CAAeU,gBAAf,CAAV;AACD;;AAEDZ,EAAAA,OAAO,GAAGA,OAAO,CAACE,MAAR,CAAeI,qBAAf,CAAV;AACA,SAAON,OAAP;AACD;;AAED,SAASe,uBAAT,CAAiCC,WAAjC,EAA8C;AAC5CA,EAAAA,WAAW,CAACC,OAAZ,CAAoBJ,CAAC,IAAI;AACvBA,IAAAA,CAAC,CAACjB,IAAF,GAASH,gBAAT;AACD,GAFD;AAGD;;AAED,SAASyB,sCAAT,CAAgDF,WAAhD,EAA6DG,SAA7D,EAAwE;AACtEH,EAAAA,WAAW,CAACC,OAAZ,CAAoBJ,CAAC,IAAI;AACvB,QAAIA,CAAC,CAAClB,IAAF,CAAOyB,gBAAP,CAAwB;AAC1BC,MAAAA,KAAK,EAAE;AADmB,KAAxB,CAAJ,EAEI;AACF,UAAIF,SAAJ,EAAe;AACbN,QAAAA,CAAC,CAAClB,IAAF,CAAO2B,WAAP,CAAmB/B,CAAC,CAACgC,eAAF,CAAkB,MAAlB,EAA0BhC,CAAC,CAACiC,cAAF,CAAiB,CAAjB,CAA1B,CAAnB;AACD,OAFD,MAEO;AACLX,QAAAA,CAAC,CAAClB,IAAF,CAAO8B,MAAP;AACD;AACF;AACF,GAVD;AAWD;;AAED,SAASC,0BAAT,CAAoCC,KAApC,EAA2C1B,OAA3C,EAAoD;AAClD,MAAIe,WAAW,GAAG,EAAlB;;AAEA,MAAIf,OAAO,CAAC2B,YAAZ,EAA0B;AACxB,QAAItB,qBAAqB,GAAG,EAA5B;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGoB,KAAK,CAACnB,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,YAAMZ,IAAI,GAAGgC,KAAK,CAACpB,CAAD,CAAlB;AACA,YAAMsB,UAAU,GAAG1D,MAAM,CAAC2D,MAAP,CAAc,EAAd,EAAkB7B,OAAlB,EAA2B;AAC5C8B,QAAAA,YAAY,EAAE;AAD8B,OAA3B,CAAnB;;AAIA,UAAIpC,IAAI,CAACqC,gBAAL,OAA4B/B,OAAO,CAAC8B,YAAR,IAAwB9B,OAAO,CAACgC,mBAA5D,CAAJ,EAAsF;AAClFJ,QAAAA,UAAU,CAACI,mBAAX,GAAiC,IAAjC;AACD,OAFH,MAES;AACPJ,QAAAA,UAAU,CAACI,mBAAX,GAAiC,KAAjC;AACD;;AAED,YAAMC,oBAAoB,GAAG/B,qBAAqB,CAACR,IAAD,EAAOkC,UAAP,CAAlD;;AAEA,UAAIK,oBAAoB,CAAC1B,MAArB,GAA8B,CAA9B,IAAmC0B,oBAAoB,CAACC,KAArB,CAA2BtB,CAAC,IAAIA,CAAC,CAACjB,IAAF,KAAWH,gBAA3C,CAAvC,EAAqG;AACnG,YAAIa,qBAAqB,CAACE,MAAtB,GAA+B,CAA/B,IAAoC0B,oBAAoB,CAACC,KAArB,CAA2BtB,CAAC,IAAIA,CAAC,CAAClB,IAAF,CAAOyB,gBAAP,CAAwB;AAC9FC,UAAAA,KAAK,EAAE;AADuF,SAAxB,CAAhC,CAAxC,EAEK;AACHN,UAAAA,uBAAuB,CAACT,qBAAD,CAAvB;AACAU,UAAAA,WAAW,GAAGA,WAAW,CAACd,MAAZ,CAAmBI,qBAAnB,CAAd;;AAEA,cAAIA,qBAAqB,CAAC8B,IAAtB,CAA2BvB,CAAC,IAAIA,CAAC,CAAClB,IAAF,CAAO0C,aAAP,EAAhC,CAAJ,EAA6D;AAC3DrB,YAAAA,WAAW,GAAGA,WAAW,CAACd,MAAZ,CAAmBgC,oBAAnB,CAAd;AACAhB,YAAAA,sCAAsC,CAACgB,oBAAD,EAAuB,IAAvB,CAAtC;AACD;;AAEDhB,UAAAA,sCAAsC,CAACgB,oBAAD,EAAuB,KAAvB,CAAtC;AACD,SAZD,MAYO;AACLlB,UAAAA,WAAW,GAAGA,WAAW,CAACd,MAAZ,CAAmBgC,oBAAnB,CAAd;;AAEA,cAAI,CAACjC,OAAO,CAACgC,mBAAb,EAAkC;AAChCf,YAAAA,sCAAsC,CAACgB,oBAAD,EAAuB,IAAvB,CAAtC;AACD;AACF;;AAED;AACD;;AAED,UAAI3B,CAAC,KAAKoB,KAAK,CAACnB,MAAN,GAAe,CAAzB,EAA4B;AAC1BQ,QAAAA,WAAW,GAAGA,WAAW,CAACd,MAAZ,CAAmBgC,oBAAnB,CAAd;AACD,OAFD,MAEO;AACLlB,QAAAA,WAAW,GAAGA,WAAW,CAACd,MAAZ,CAAmBgC,oBAAoB,CAACI,MAArB,CAA4BzB,CAAC,IAAIA,CAAC,CAACjB,IAAF,KAAWH,gBAA5C,CAAnB,CAAd;AACAa,QAAAA,qBAAqB,GAAG4B,oBAAoB,CAACI,MAArB,CAA4BzB,CAAC,IAAIA,CAAC,CAACjB,IAAF,KAAWJ,iBAA5C,CAAxB;AACD;AACF;AACF,GAhDD,MAgDO,IAAImC,KAAK,CAACnB,MAAV,EAAkB;AACvB,SAAK,IAAID,CAAC,GAAGoB,KAAK,CAACnB,MAAN,GAAe,CAA5B,EAA+BD,CAAC,IAAI,CAApC,EAAuCA,CAAC,EAAxC,EAA4C;AAC1C,YAAMgC,eAAe,GAAGpC,qBAAqB,CAACwB,KAAK,CAACpB,CAAD,CAAN,EAAWN,OAAX,CAA7C;;AAEA,UAAIsC,eAAe,CAAC/B,MAAhB,GAAyB,CAAzB,IAA8B+B,eAAe,CAAC/B,MAAhB,KAA2B,CAA3B,IAAgC,CAAC+B,eAAe,CAAC,CAAD,CAAf,CAAmB5C,IAAnB,CAAwB6C,qBAAxB,EAAnE,EAAoH;AAClHxB,QAAAA,WAAW,GAAGA,WAAW,CAACd,MAAZ,CAAmBqC,eAAnB,CAAd;AACA;AACD;AACF;AACF;;AAED,SAAOvB,WAAP;AACD;;AAED,SAASb,qBAAT,CAA+BR,IAA/B,EAAqCM,OAArC,EAA8C;AAC5C,MAAID,OAAO,GAAG,EAAd;;AAEA,MAAIL,IAAI,CAAC8C,aAAL,EAAJ,EAA0B;AACxBzC,IAAAA,OAAO,GAAGD,oBAAoB,CAACJ,IAAI,CAACb,GAAL,CAAS,YAAT,CAAD,EAAyBkB,OAAzB,EAAkCC,OAAlC,CAA9B;AACAD,IAAAA,OAAO,GAAGD,oBAAoB,CAACJ,IAAI,CAACb,GAAL,CAAS,WAAT,CAAD,EAAwBkB,OAAxB,EAAiCC,OAAjC,CAA9B;AACD,GAHD,MAGO,IAAIN,IAAI,CAAC+C,cAAL,MAAyB/C,IAAI,CAACgD,KAAL,EAAzB,IAAyChD,IAAI,CAACiD,OAAL,EAAzC,IAA2DjD,IAAI,CAACkD,kBAAL,EAA/D,EAA0F;AAC/F7C,IAAAA,OAAO,GAAGD,oBAAoB,CAACJ,IAAI,CAACb,GAAL,CAAS,MAAT,CAAD,EAAmBkB,OAAnB,EAA4BC,OAA5B,CAA9B;AACD,GAFM,MAEA,IAAIN,IAAI,CAACmD,SAAL,MAAoBnD,IAAI,CAACqC,gBAAL,EAAxB,EAAiD;AACtDhC,IAAAA,OAAO,GAAGA,OAAO,CAACE,MAAR,CAAewB,0BAA0B,CAAC/B,IAAI,CAACb,GAAL,CAAS,MAAT,CAAD,EAAmBmB,OAAnB,CAAzC,CAAV;AACD,GAFM,MAEA,IAAIN,IAAI,CAACoD,UAAL,EAAJ,EAAuB;AAC5B,WAAO5C,qBAAqB,CAACR,IAAI,CAACb,GAAL,CAAS,MAAT,CAAD,EAAmBmB,OAAnB,CAA5B;AACD,GAFM,MAEA,IAAIN,IAAI,CAACqD,cAAL,EAAJ,EAA2B;AAChChD,IAAAA,OAAO,GAAGD,oBAAoB,CAACJ,IAAI,CAACb,GAAL,CAAS,OAAT,CAAD,EAAoBkB,OAApB,EAA6BC,OAA7B,CAA9B;AACAD,IAAAA,OAAO,GAAGD,oBAAoB,CAACJ,IAAI,CAACb,GAAL,CAAS,SAAT,CAAD,EAAsBkB,OAAtB,EAA+BC,OAA/B,CAA9B;AACD,GAHM,MAGA,IAAIN,IAAI,CAACsD,aAAL,EAAJ,EAA0B;AAC/BjD,IAAAA,OAAO,GAAGD,oBAAoB,CAACJ,IAAI,CAACb,GAAL,CAAS,MAAT,CAAD,EAAmBkB,OAAnB,EAA4BC,OAA5B,CAA9B;AACD,GAFM,MAEA,IAAIN,IAAI,CAACuD,iBAAL,EAAJ,EAA8B;AACnClD,IAAAA,OAAO,GAAGI,yBAAyB,CAACT,IAAI,CAACb,GAAL,CAAS,OAAT,CAAD,EAAoBkB,OAApB,EAA6BC,OAA7B,CAAnC;AACD,GAFM,MAEA,IAAIN,IAAI,CAACwD,YAAL,EAAJ,EAAyB;AAC9BnD,IAAAA,OAAO,GAAGA,OAAO,CAACE,MAAR,CAAewB,0BAA0B,CAAC/B,IAAI,CAACb,GAAL,CAAS,YAAT,CAAD,EAAyB;AAC1E8C,MAAAA,YAAY,EAAE,IAD4D;AAE1EK,MAAAA,mBAAmB,EAAE,KAFqD;AAG1EF,MAAAA,YAAY,EAAE;AAH4D,KAAzB,CAAzC,CAAV;AAKD,GANM,MAMA,IAAIpC,IAAI,CAACyB,gBAAL,EAAJ,EAA6B;AAClCpB,IAAAA,OAAO,CAACc,IAAR,CAAajB,eAAe,CAACF,IAAD,CAA5B;AACD,GAFM,MAEA;AACLK,IAAAA,OAAO,CAACc,IAAR,CAAapB,gBAAgB,CAACC,IAAD,CAA7B;AACD;;AAED,SAAOK,OAAP;AACD;;AAED,SAASxB,oBAAT,GAAgC;AAC9B,QAAMwB,OAAO,GAAGG,qBAAqB,CAAC,IAAD,EAAO;AAC1CyB,IAAAA,YAAY,EAAE,KAD4B;AAE1CK,IAAAA,mBAAmB,EAAE,KAFqB;AAG1CF,IAAAA,YAAY,EAAE;AAH4B,GAAP,CAArC;;AAMA,SAAO/B,OAAO,CAACoD,GAAR,CAAYC,CAAC,IAAIA,CAAC,CAAC1D,IAAnB,CAAP;AACD;;AAED,SAASlB,UAAT,CAAoBqB,GAApB,EAAyB;AACvB,SAAOT,MAAM,CAACiE,OAAP,CAAexE,GAAf,CAAmB;AACxByE,IAAAA,UAAU,EAAE,KAAKA,UADO;AAExBC,IAAAA,MAAM,EAAE,KAAKA,MAFW;AAGxBC,IAAAA,SAAS,EAAE,KAAKA,SAHQ;AAIxBC,IAAAA,OAAO,EAAE,KAAKA,OAJU;AAKxB5D,IAAAA,GAAG,EAAEA;AALmB,GAAnB,EAMJ6D,UANI,CAMO,KAAK1D,OANZ,CAAP;AAOD;;AAED,SAASvB,cAAT,GAA0B;AACxB,SAAO,KAAKD,UAAL,CAAgB,KAAKqB,GAAL,GAAW,CAA3B,CAAP;AACD;;AAED,SAASnB,cAAT,GAA0B;AACxB,SAAO,KAAKF,UAAL,CAAgB,KAAKqB,GAAL,GAAW,CAA3B,CAAP;AACD;;AAED,SAASlB,kBAAT,GAA8B;AAC5B,MAAIgF,IAAI,GAAG,KAAK9D,GAAhB;AACA,MAAI+D,OAAO,GAAG,KAAKpF,UAAL,CAAgB,EAAEmF,IAAlB,CAAd;AACA,QAAME,QAAQ,GAAG,EAAjB;;AAEA,SAAOD,OAAO,CAACE,IAAf,EAAqB;AACnBD,IAAAA,QAAQ,CAAChD,IAAT,CAAc+C,OAAd;AACAA,IAAAA,OAAO,GAAG,KAAKpF,UAAL,CAAgB,EAAEmF,IAAlB,CAAV;AACD;;AAED,SAAOE,QAAP;AACD;;AAED,SAASjF,kBAAT,GAA8B;AAC5B,MAAI+E,IAAI,GAAG,KAAK9D,GAAhB;AACA,MAAI+D,OAAO,GAAG,KAAKpF,UAAL,CAAgB,EAAEmF,IAAlB,CAAd;AACA,QAAME,QAAQ,GAAG,EAAjB;;AAEA,SAAOD,OAAO,CAACE,IAAf,EAAqB;AACnBD,IAAAA,QAAQ,CAAChD,IAAT,CAAc+C,OAAd;AACAA,IAAAA,OAAO,GAAG,KAAKpF,UAAL,CAAgB,EAAEmF,IAAlB,CAAV;AACD;;AAED,SAAOE,QAAP;AACD;;AAED,SAAShF,GAAT,CAAagB,GAAb,EAAkBG,OAAO,GAAG,IAA5B,EAAkC;AAChC,MAAIA,OAAO,KAAK,IAAhB,EAAsBA,OAAO,GAAG,KAAKA,OAAf;AACtB,QAAM+D,KAAK,GAAGlE,GAAG,CAACmE,KAAJ,CAAU,GAAV,CAAd;;AAEA,MAAID,KAAK,CAACxD,MAAN,KAAiB,CAArB,EAAwB;AACtB,WAAO,KAAKzB,OAAL,CAAae,GAAb,EAAkBG,OAAlB,CAAP;AACD,GAFD,MAEO;AACL,WAAO,KAAKjB,WAAL,CAAiBgF,KAAjB,EAAwB/D,OAAxB,CAAP;AACD;AACF;;AAED,SAASlB,OAAT,CAAiBe,GAAjB,EAAsBG,OAAtB,EAA+B;AAC7B,QAAM8D,IAAI,GAAG,KAAKA,IAAlB;AACA,QAAMN,SAAS,GAAGM,IAAI,CAACjE,GAAD,CAAtB;;AAEA,MAAIoE,KAAK,CAACC,OAAN,CAAcV,SAAd,CAAJ,EAA8B;AAC5B,WAAOA,SAAS,CAACL,GAAV,CAAc,CAACgB,CAAD,EAAI7D,CAAJ,KAAU;AAC7B,aAAOlB,MAAM,CAACiE,OAAP,CAAexE,GAAf,CAAmB;AACxB4E,QAAAA,OAAO,EAAE5D,GADe;AAExByD,QAAAA,UAAU,EAAE,IAFY;AAGxBC,QAAAA,MAAM,EAAEO,IAHgB;AAIxBN,QAAAA,SAAS,EAAEA,SAJa;AAKxB3D,QAAAA,GAAG,EAAES;AALmB,OAAnB,EAMJoD,UANI,CAMO1D,OANP,CAAP;AAOD,KARM,CAAP;AASD,GAVD,MAUO;AACL,WAAOZ,MAAM,CAACiE,OAAP,CAAexE,GAAf,CAAmB;AACxByE,MAAAA,UAAU,EAAE,IADY;AAExBC,MAAAA,MAAM,EAAEO,IAFgB;AAGxBN,MAAAA,SAAS,EAAEM,IAHa;AAIxBjE,MAAAA,GAAG,EAAEA;AAJmB,KAAnB,EAKJ6D,UALI,CAKO1D,OALP,CAAP;AAMD;AACF;;AAED,SAASjB,WAAT,CAAqBgF,KAArB,EAA4B/D,OAA5B,EAAqC;AACnC,MAAIN,IAAI,GAAG,IAAX;;AAEA,OAAK,MAAM0E,IAAX,IAAmBL,KAAnB,EAA0B;AACxB,QAAIK,IAAI,KAAK,GAAb,EAAkB;AAChB1E,MAAAA,IAAI,GAAGA,IAAI,CAAC4D,UAAZ;AACD,KAFD,MAEO;AACL,UAAIW,KAAK,CAACC,OAAN,CAAcxE,IAAd,CAAJ,EAAyB;AACvBA,QAAAA,IAAI,GAAGA,IAAI,CAAC0E,IAAD,CAAX;AACD,OAFD,MAEO;AACL1E,QAAAA,IAAI,GAAGA,IAAI,CAACb,GAAL,CAASuF,IAAT,EAAepE,OAAf,CAAP;AACD;AACF;AACF;;AAED,SAAON,IAAP;AACD;;AAED,SAASV,qBAAT,CAA+BqF,UAA/B,EAA2C;AACzC,SAAO/E,CAAC,CAACN,qBAAF,CAAwB,KAAK8E,IAA7B,EAAmCO,UAAnC,CAAP;AACD;;AAED,SAASpF,0BAAT,CAAoCoF,UAApC,EAAgD;AAC9C,SAAO/E,CAAC,CAACL,0BAAF,CAA6B,KAAK6E,IAAlC,EAAwCO,UAAxC,CAAP;AACD;;AAED,SAASnF,yBAAT,CAAmCmF,UAAU,GAAG,KAAhD,EAAuDC,SAAS,GAAG,KAAnE,EAA0E;AACxE,QAAM5E,IAAI,GAAG,IAAb;AACA,MAAI6E,MAAM,GAAG,GAAGtE,MAAH,CAAUP,IAAV,CAAb;AACA,QAAM8E,GAAG,GAAGtG,MAAM,CAACuG,MAAP,CAAc,IAAd,CAAZ;;AAEA,SAAOF,MAAM,CAAChE,MAAd,EAAsB;AACpB,UAAMmE,EAAE,GAAGH,MAAM,CAACI,KAAP,EAAX;AACA,QAAI,CAACD,EAAL,EAAS;AACT,QAAI,CAACA,EAAE,CAACZ,IAAR,EAAc;AACd,UAAMc,IAAI,GAAGtF,CAAC,CAACN,qBAAF,CAAwB4F,IAAxB,CAA6BF,EAAE,CAACZ,IAAH,CAAQnE,IAArC,CAAb;;AAEA,QAAI+E,EAAE,CAACG,YAAH,EAAJ,EAAuB;AACrB,UAAIR,UAAJ,EAAgB;AACd,cAAMS,IAAI,GAAGN,GAAG,CAACE,EAAE,CAACZ,IAAH,CAAQiB,IAAT,CAAH,GAAoBP,GAAG,CAACE,EAAE,CAACZ,IAAH,CAAQiB,IAAT,CAAH,IAAqB,EAAtD;;AAEAD,QAAAA,IAAI,CAACjE,IAAL,CAAU6D,EAAV;AACD,OAJD,MAIO;AACLF,QAAAA,GAAG,CAACE,EAAE,CAACZ,IAAH,CAAQiB,IAAT,CAAH,GAAoBL,EAApB;AACD;;AAED;AACD;;AAED,QAAIA,EAAE,CAACM,mBAAH,EAAJ,EAA8B;AAC5B,YAAMC,WAAW,GAAGP,EAAE,CAAC7F,GAAH,CAAO,aAAP,CAApB;;AAEA,UAAIoG,WAAW,CAAC7C,aAAZ,EAAJ,EAAiC;AAC/BmC,QAAAA,MAAM,CAAC1D,IAAP,CAAYoE,WAAZ;AACD;;AAED;AACD;;AAED,QAAIX,SAAJ,EAAe;AACb,UAAII,EAAE,CAACQ,qBAAH,EAAJ,EAAgC;AAC9BX,QAAAA,MAAM,CAAC1D,IAAP,CAAY6D,EAAE,CAAC7F,GAAH,CAAO,IAAP,CAAZ;AACA;AACD;;AAED,UAAI6F,EAAE,CAACS,oBAAH,EAAJ,EAA+B;AAC7B;AACD;AACF;;AAED,QAAIP,IAAJ,EAAU;AACR,WAAK,IAAItE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGsE,IAAI,CAACrE,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpC,cAAMT,GAAG,GAAG+E,IAAI,CAACtE,CAAD,CAAhB;AACA,cAAM8E,KAAK,GAAGV,EAAE,CAAC7F,GAAH,CAAOgB,GAAP,CAAd;;AAEA,YAAIoE,KAAK,CAACC,OAAN,CAAckB,KAAd,KAAwBA,KAAK,CAACtB,IAAlC,EAAwC;AACtCS,UAAAA,MAAM,GAAGA,MAAM,CAACtE,MAAP,CAAcmF,KAAd,CAAT;AACD;AACF;AACF;AACF;;AAED,SAAOZ,GAAP;AACD;;AAED,SAASrF,8BAAT,CAAwCkF,UAAxC,EAAoD;AAClD,SAAO,KAAKnF,yBAAL,CAA+BmF,UAA/B,EAA2C,IAA3C,CAAP;AACD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getOpposite = getOpposite;\nexports.getCompletionRecords = getCompletionRecords;\nexports.getSibling = getSibling;\nexports.getPrevSibling = getPrevSibling;\nexports.getNextSibling = getNextSibling;\nexports.getAllNextSiblings = getAllNextSiblings;\nexports.getAllPrevSiblings = getAllPrevSiblings;\nexports.get = get;\nexports._getKey = _getKey;\nexports._getPattern = _getPattern;\nexports.getBindingIdentifiers = getBindingIdentifiers;\nexports.getOuterBindingIdentifiers = getOuterBindingIdentifiers;\nexports.getBindingIdentifierPaths = getBindingIdentifierPaths;\nexports.getOuterBindingIdentifierPaths = getOuterBindingIdentifierPaths;\n\nvar _index = require(\"./index\");\n\nvar t = require(\"@babel/types\");\n\nconst NORMAL_COMPLETION = 0;\nconst BREAK_COMPLETION = 1;\n\nfunction NormalCompletion(path) {\n  return {\n    type: NORMAL_COMPLETION,\n    path\n  };\n}\n\nfunction BreakCompletion(path) {\n  return {\n    type: BREAK_COMPLETION,\n    path\n  };\n}\n\nfunction getOpposite() {\n  if (this.key === \"left\") {\n    return this.getSibling(\"right\");\n  } else if (this.key === \"right\") {\n    return this.getSibling(\"left\");\n  }\n\n  return null;\n}\n\nfunction addCompletionRecords(path, records, context) {\n  if (path) return records.concat(_getCompletionRecords(path, context));\n  return records;\n}\n\nfunction completionRecordForSwitch(cases, records, context) {\n  let lastNormalCompletions = [];\n\n  for (let i = 0; i < cases.length; i++) {\n    const casePath = cases[i];\n\n    const caseCompletions = _getCompletionRecords(casePath, context);\n\n    const normalCompletions = [];\n    const breakCompletions = [];\n\n    for (const c of caseCompletions) {\n      if (c.type === NORMAL_COMPLETION) {\n        normalCompletions.push(c);\n      }\n\n      if (c.type === BREAK_COMPLETION) {\n        breakCompletions.push(c);\n      }\n    }\n\n    if (normalCompletions.length) {\n      lastNormalCompletions = normalCompletions;\n    }\n\n    records = records.concat(breakCompletions);\n  }\n\n  records = records.concat(lastNormalCompletions);\n  return records;\n}\n\nfunction normalCompletionToBreak(completions) {\n  completions.forEach(c => {\n    c.type = BREAK_COMPLETION;\n  });\n}\n\nfunction replaceBreakStatementInBreakCompletion(completions, reachable) {\n  completions.forEach(c => {\n    if (c.path.isBreakStatement({\n      label: null\n    })) {\n      if (reachable) {\n        c.path.replaceWith(t.unaryExpression(\"void\", t.numericLiteral(0)));\n      } else {\n        c.path.remove();\n      }\n    }\n  });\n}\n\nfunction getStatementListCompletion(paths, context) {\n  let completions = [];\n\n  if (context.canHaveBreak) {\n    let lastNormalCompletions = [];\n\n    for (let i = 0; i < paths.length; i++) {\n      const path = paths[i];\n      const newContext = Object.assign({}, context, {\n        inCaseClause: false\n      });\n\n      if (path.isBlockStatement() && (context.inCaseClause || context.shouldPopulateBreak)) {\n          newContext.shouldPopulateBreak = true;\n        } else {\n        newContext.shouldPopulateBreak = false;\n      }\n\n      const statementCompletions = _getCompletionRecords(path, newContext);\n\n      if (statementCompletions.length > 0 && statementCompletions.every(c => c.type === BREAK_COMPLETION)) {\n        if (lastNormalCompletions.length > 0 && statementCompletions.every(c => c.path.isBreakStatement({\n          label: null\n        }))) {\n          normalCompletionToBreak(lastNormalCompletions);\n          completions = completions.concat(lastNormalCompletions);\n\n          if (lastNormalCompletions.some(c => c.path.isDeclaration())) {\n            completions = completions.concat(statementCompletions);\n            replaceBreakStatementInBreakCompletion(statementCompletions, true);\n          }\n\n          replaceBreakStatementInBreakCompletion(statementCompletions, false);\n        } else {\n          completions = completions.concat(statementCompletions);\n\n          if (!context.shouldPopulateBreak) {\n            replaceBreakStatementInBreakCompletion(statementCompletions, true);\n          }\n        }\n\n        break;\n      }\n\n      if (i === paths.length - 1) {\n        completions = completions.concat(statementCompletions);\n      } else {\n        completions = completions.concat(statementCompletions.filter(c => c.type === BREAK_COMPLETION));\n        lastNormalCompletions = statementCompletions.filter(c => c.type === NORMAL_COMPLETION);\n      }\n    }\n  } else if (paths.length) {\n    for (let i = paths.length - 1; i >= 0; i--) {\n      const pathCompletions = _getCompletionRecords(paths[i], context);\n\n      if (pathCompletions.length > 1 || pathCompletions.length === 1 && !pathCompletions[0].path.isVariableDeclaration()) {\n        completions = completions.concat(pathCompletions);\n        break;\n      }\n    }\n  }\n\n  return completions;\n}\n\nfunction _getCompletionRecords(path, context) {\n  let records = [];\n\n  if (path.isIfStatement()) {\n    records = addCompletionRecords(path.get(\"consequent\"), records, context);\n    records = addCompletionRecords(path.get(\"alternate\"), records, context);\n  } else if (path.isDoExpression() || path.isFor() || path.isWhile() || path.isLabeledStatement()) {\n    records = addCompletionRecords(path.get(\"body\"), records, context);\n  } else if (path.isProgram() || path.isBlockStatement()) {\n    records = records.concat(getStatementListCompletion(path.get(\"body\"), context));\n  } else if (path.isFunction()) {\n    return _getCompletionRecords(path.get(\"body\"), context);\n  } else if (path.isTryStatement()) {\n    records = addCompletionRecords(path.get(\"block\"), records, context);\n    records = addCompletionRecords(path.get(\"handler\"), records, context);\n  } else if (path.isCatchClause()) {\n    records = addCompletionRecords(path.get(\"body\"), records, context);\n  } else if (path.isSwitchStatement()) {\n    records = completionRecordForSwitch(path.get(\"cases\"), records, context);\n  } else if (path.isSwitchCase()) {\n    records = records.concat(getStatementListCompletion(path.get(\"consequent\"), {\n      canHaveBreak: true,\n      shouldPopulateBreak: false,\n      inCaseClause: true\n    }));\n  } else if (path.isBreakStatement()) {\n    records.push(BreakCompletion(path));\n  } else {\n    records.push(NormalCompletion(path));\n  }\n\n  return records;\n}\n\nfunction getCompletionRecords() {\n  const records = _getCompletionRecords(this, {\n    canHaveBreak: false,\n    shouldPopulateBreak: false,\n    inCaseClause: false\n  });\n\n  return records.map(r => r.path);\n}\n\nfunction getSibling(key) {\n  return _index.default.get({\n    parentPath: this.parentPath,\n    parent: this.parent,\n    container: this.container,\n    listKey: this.listKey,\n    key: key\n  }).setContext(this.context);\n}\n\nfunction getPrevSibling() {\n  return this.getSibling(this.key - 1);\n}\n\nfunction getNextSibling() {\n  return this.getSibling(this.key + 1);\n}\n\nfunction getAllNextSiblings() {\n  let _key = this.key;\n  let sibling = this.getSibling(++_key);\n  const siblings = [];\n\n  while (sibling.node) {\n    siblings.push(sibling);\n    sibling = this.getSibling(++_key);\n  }\n\n  return siblings;\n}\n\nfunction getAllPrevSiblings() {\n  let _key = this.key;\n  let sibling = this.getSibling(--_key);\n  const siblings = [];\n\n  while (sibling.node) {\n    siblings.push(sibling);\n    sibling = this.getSibling(--_key);\n  }\n\n  return siblings;\n}\n\nfunction get(key, context = true) {\n  if (context === true) context = this.context;\n  const parts = key.split(\".\");\n\n  if (parts.length === 1) {\n    return this._getKey(key, context);\n  } else {\n    return this._getPattern(parts, context);\n  }\n}\n\nfunction _getKey(key, context) {\n  const node = this.node;\n  const container = node[key];\n\n  if (Array.isArray(container)) {\n    return container.map((_, i) => {\n      return _index.default.get({\n        listKey: key,\n        parentPath: this,\n        parent: node,\n        container: container,\n        key: i\n      }).setContext(context);\n    });\n  } else {\n    return _index.default.get({\n      parentPath: this,\n      parent: node,\n      container: node,\n      key: key\n    }).setContext(context);\n  }\n}\n\nfunction _getPattern(parts, context) {\n  let path = this;\n\n  for (const part of parts) {\n    if (part === \".\") {\n      path = path.parentPath;\n    } else {\n      if (Array.isArray(path)) {\n        path = path[part];\n      } else {\n        path = path.get(part, context);\n      }\n    }\n  }\n\n  return path;\n}\n\nfunction getBindingIdentifiers(duplicates) {\n  return t.getBindingIdentifiers(this.node, duplicates);\n}\n\nfunction getOuterBindingIdentifiers(duplicates) {\n  return t.getOuterBindingIdentifiers(this.node, duplicates);\n}\n\nfunction getBindingIdentifierPaths(duplicates = false, outerOnly = false) {\n  const path = this;\n  let search = [].concat(path);\n  const ids = Object.create(null);\n\n  while (search.length) {\n    const id = search.shift();\n    if (!id) continue;\n    if (!id.node) continue;\n    const keys = t.getBindingIdentifiers.keys[id.node.type];\n\n    if (id.isIdentifier()) {\n      if (duplicates) {\n        const _ids = ids[id.node.name] = ids[id.node.name] || [];\n\n        _ids.push(id);\n      } else {\n        ids[id.node.name] = id;\n      }\n\n      continue;\n    }\n\n    if (id.isExportDeclaration()) {\n      const declaration = id.get(\"declaration\");\n\n      if (declaration.isDeclaration()) {\n        search.push(declaration);\n      }\n\n      continue;\n    }\n\n    if (outerOnly) {\n      if (id.isFunctionDeclaration()) {\n        search.push(id.get(\"id\"));\n        continue;\n      }\n\n      if (id.isFunctionExpression()) {\n        continue;\n      }\n    }\n\n    if (keys) {\n      for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n        const child = id.get(key);\n\n        if (Array.isArray(child) || child.node) {\n          search = search.concat(child);\n        }\n      }\n    }\n  }\n\n  return ids;\n}\n\nfunction getOuterBindingIdentifierPaths(duplicates) {\n  return this.getBindingIdentifierPaths(duplicates, true);\n}"]},"metadata":{},"sourceType":"script"}