{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getModuleName;\n{\n  const originalGetModuleName = getModuleName;\n\n  exports.default = getModuleName = function getModuleName(rootOpts, pluginOpts) {\n    var _pluginOpts$moduleId, _pluginOpts$moduleIds, _pluginOpts$getModule, _pluginOpts$moduleRoo;\n\n    return originalGetModuleName(rootOpts, {\n      moduleId: (_pluginOpts$moduleId = pluginOpts.moduleId) != null ? _pluginOpts$moduleId : rootOpts.moduleId,\n      moduleIds: (_pluginOpts$moduleIds = pluginOpts.moduleIds) != null ? _pluginOpts$moduleIds : rootOpts.moduleIds,\n      getModuleId: (_pluginOpts$getModule = pluginOpts.getModuleId) != null ? _pluginOpts$getModule : rootOpts.getModuleId,\n      moduleRoot: (_pluginOpts$moduleRoo = pluginOpts.moduleRoot) != null ? _pluginOpts$moduleRoo : rootOpts.moduleRoot\n    });\n  };\n}\n\nfunction getModuleName(rootOpts, pluginOpts) {\n  const {\n    filename,\n    filenameRelative = filename,\n    sourceRoot = pluginOpts.moduleRoot\n  } = rootOpts;\n  const {\n    moduleId,\n    moduleIds = !!moduleId,\n    getModuleId,\n    moduleRoot = sourceRoot\n  } = pluginOpts;\n  if (!moduleIds) return null;\n\n  if (moduleId != null && !getModuleId) {\n    return moduleId;\n  }\n\n  let moduleName = moduleRoot != null ? moduleRoot + \"/\" : \"\";\n\n  if (filenameRelative) {\n    const sourceRootReplacer = sourceRoot != null ? new RegExp(\"^\" + sourceRoot + \"/?\") : \"\";\n    moduleName += filenameRelative.replace(sourceRootReplacer, \"\").replace(/\\.(\\w*?)$/, \"\");\n  }\n\n  moduleName = moduleName.replace(/\\\\/g, \"/\");\n\n  if (getModuleId) {\n    return getModuleId(moduleName) || moduleName;\n  } else {\n    return moduleName;\n  }\n}","map":{"version":3,"sources":["/Users/alperenalkan/obss/frontend/frontend/node_modules/@babel/helper-module-transforms/lib/get-module-name.js"],"names":["Object","defineProperty","exports","value","default","getModuleName","originalGetModuleName","rootOpts","pluginOpts","_pluginOpts$moduleId","_pluginOpts$moduleIds","_pluginOpts$getModule","_pluginOpts$moduleRoo","moduleId","moduleIds","getModuleId","moduleRoot","filename","filenameRelative","sourceRoot","moduleName","sourceRootReplacer","RegExp","replace"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,aAAlB;AACA;AACE,QAAMC,qBAAqB,GAAGD,aAA9B;;AAEAH,EAAAA,OAAO,CAACE,OAAR,GAAkBC,aAAa,GAAG,SAASA,aAAT,CAAuBE,QAAvB,EAAiCC,UAAjC,EAA6C;AAC7E,QAAIC,oBAAJ,EAA0BC,qBAA1B,EAAiDC,qBAAjD,EAAwEC,qBAAxE;;AAEA,WAAON,qBAAqB,CAACC,QAAD,EAAW;AACrCM,MAAAA,QAAQ,EAAE,CAACJ,oBAAoB,GAAGD,UAAU,CAACK,QAAnC,KAAgD,IAAhD,GAAuDJ,oBAAvD,GAA8EF,QAAQ,CAACM,QAD5D;AAErCC,MAAAA,SAAS,EAAE,CAACJ,qBAAqB,GAAGF,UAAU,CAACM,SAApC,KAAkD,IAAlD,GAAyDJ,qBAAzD,GAAiFH,QAAQ,CAACO,SAFhE;AAGrCC,MAAAA,WAAW,EAAE,CAACJ,qBAAqB,GAAGH,UAAU,CAACO,WAApC,KAAoD,IAApD,GAA2DJ,qBAA3D,GAAmFJ,QAAQ,CAACQ,WAHpE;AAIrCC,MAAAA,UAAU,EAAE,CAACJ,qBAAqB,GAAGJ,UAAU,CAACQ,UAApC,KAAmD,IAAnD,GAA0DJ,qBAA1D,GAAkFL,QAAQ,CAACS;AAJlE,KAAX,CAA5B;AAMD,GATD;AAUD;;AAED,SAASX,aAAT,CAAuBE,QAAvB,EAAiCC,UAAjC,EAA6C;AAC3C,QAAM;AACJS,IAAAA,QADI;AAEJC,IAAAA,gBAAgB,GAAGD,QAFf;AAGJE,IAAAA,UAAU,GAAGX,UAAU,CAACQ;AAHpB,MAIFT,QAJJ;AAKA,QAAM;AACJM,IAAAA,QADI;AAEJC,IAAAA,SAAS,GAAG,CAAC,CAACD,QAFV;AAGJE,IAAAA,WAHI;AAIJC,IAAAA,UAAU,GAAGG;AAJT,MAKFX,UALJ;AAMA,MAAI,CAACM,SAAL,EAAgB,OAAO,IAAP;;AAEhB,MAAID,QAAQ,IAAI,IAAZ,IAAoB,CAACE,WAAzB,EAAsC;AACpC,WAAOF,QAAP;AACD;;AAED,MAAIO,UAAU,GAAGJ,UAAU,IAAI,IAAd,GAAqBA,UAAU,GAAG,GAAlC,GAAwC,EAAzD;;AAEA,MAAIE,gBAAJ,EAAsB;AACpB,UAAMG,kBAAkB,GAAGF,UAAU,IAAI,IAAd,GAAqB,IAAIG,MAAJ,CAAW,MAAMH,UAAN,GAAmB,IAA9B,CAArB,GAA2D,EAAtF;AACAC,IAAAA,UAAU,IAAIF,gBAAgB,CAACK,OAAjB,CAAyBF,kBAAzB,EAA6C,EAA7C,EAAiDE,OAAjD,CAAyD,WAAzD,EAAsE,EAAtE,CAAd;AACD;;AAEDH,EAAAA,UAAU,GAAGA,UAAU,CAACG,OAAX,CAAmB,KAAnB,EAA0B,GAA1B,CAAb;;AAEA,MAAIR,WAAJ,EAAiB;AACf,WAAOA,WAAW,CAACK,UAAD,CAAX,IAA2BA,UAAlC;AACD,GAFD,MAEO;AACL,WAAOA,UAAP;AACD;AACF","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getModuleName;\n{\n  const originalGetModuleName = getModuleName;\n\n  exports.default = getModuleName = function getModuleName(rootOpts, pluginOpts) {\n    var _pluginOpts$moduleId, _pluginOpts$moduleIds, _pluginOpts$getModule, _pluginOpts$moduleRoo;\n\n    return originalGetModuleName(rootOpts, {\n      moduleId: (_pluginOpts$moduleId = pluginOpts.moduleId) != null ? _pluginOpts$moduleId : rootOpts.moduleId,\n      moduleIds: (_pluginOpts$moduleIds = pluginOpts.moduleIds) != null ? _pluginOpts$moduleIds : rootOpts.moduleIds,\n      getModuleId: (_pluginOpts$getModule = pluginOpts.getModuleId) != null ? _pluginOpts$getModule : rootOpts.getModuleId,\n      moduleRoot: (_pluginOpts$moduleRoo = pluginOpts.moduleRoot) != null ? _pluginOpts$moduleRoo : rootOpts.moduleRoot\n    });\n  };\n}\n\nfunction getModuleName(rootOpts, pluginOpts) {\n  const {\n    filename,\n    filenameRelative = filename,\n    sourceRoot = pluginOpts.moduleRoot\n  } = rootOpts;\n  const {\n    moduleId,\n    moduleIds = !!moduleId,\n    getModuleId,\n    moduleRoot = sourceRoot\n  } = pluginOpts;\n  if (!moduleIds) return null;\n\n  if (moduleId != null && !getModuleId) {\n    return moduleId;\n  }\n\n  let moduleName = moduleRoot != null ? moduleRoot + \"/\" : \"\";\n\n  if (filenameRelative) {\n    const sourceRootReplacer = sourceRoot != null ? new RegExp(\"^\" + sourceRoot + \"/?\") : \"\";\n    moduleName += filenameRelative.replace(sourceRootReplacer, \"\").replace(/\\.(\\w*?)$/, \"\");\n  }\n\n  moduleName = moduleName.replace(/\\\\/g, \"/\");\n\n  if (getModuleId) {\n    return getModuleId(moduleName) || moduleName;\n  } else {\n    return moduleName;\n  }\n}"]},"metadata":{},"sourceType":"script"}