{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.msg = msg;\nexports.access = access;\nexports.assertRootMode = assertRootMode;\nexports.assertSourceMaps = assertSourceMaps;\nexports.assertCompact = assertCompact;\nexports.assertSourceType = assertSourceType;\nexports.assertCallerMetadata = assertCallerMetadata;\nexports.assertInputSourceMap = assertInputSourceMap;\nexports.assertString = assertString;\nexports.assertFunction = assertFunction;\nexports.assertBoolean = assertBoolean;\nexports.assertObject = assertObject;\nexports.assertArray = assertArray;\nexports.assertIgnoreList = assertIgnoreList;\nexports.assertConfigApplicableTest = assertConfigApplicableTest;\nexports.assertConfigFileSearch = assertConfigFileSearch;\nexports.assertBabelrcSearch = assertBabelrcSearch;\nexports.assertPluginList = assertPluginList;\n\nfunction msg(loc) {\n  switch (loc.type) {\n    case \"root\":\n      return ``;\n\n    case \"env\":\n      return `${msg(loc.parent)}.env[\"${loc.name}\"]`;\n\n    case \"overrides\":\n      return `${msg(loc.parent)}.overrides[${loc.index}]`;\n\n    case \"option\":\n      return `${msg(loc.parent)}.${loc.name}`;\n\n    case \"access\":\n      return `${msg(loc.parent)}[${JSON.stringify(loc.name)}]`;\n\n    default:\n      throw new Error(`Assertion failure: Unknown type ${loc.type}`);\n  }\n}\n\nfunction access(loc, name) {\n  return {\n    type: \"access\",\n    name,\n    parent: loc\n  };\n}\n\nfunction assertRootMode(loc, value) {\n  if (value !== undefined && value !== \"root\" && value !== \"upward\" && value !== \"upward-optional\") {\n    throw new Error(`${msg(loc)} must be a \"root\", \"upward\", \"upward-optional\" or undefined`);\n  }\n\n  return value;\n}\n\nfunction assertSourceMaps(loc, value) {\n  if (value !== undefined && typeof value !== \"boolean\" && value !== \"inline\" && value !== \"both\") {\n    throw new Error(`${msg(loc)} must be a boolean, \"inline\", \"both\", or undefined`);\n  }\n\n  return value;\n}\n\nfunction assertCompact(loc, value) {\n  if (value !== undefined && typeof value !== \"boolean\" && value !== \"auto\") {\n    throw new Error(`${msg(loc)} must be a boolean, \"auto\", or undefined`);\n  }\n\n  return value;\n}\n\nfunction assertSourceType(loc, value) {\n  if (value !== undefined && value !== \"module\" && value !== \"script\" && value !== \"unambiguous\") {\n    throw new Error(`${msg(loc)} must be \"module\", \"script\", \"unambiguous\", or undefined`);\n  }\n\n  return value;\n}\n\nfunction assertCallerMetadata(loc, value) {\n  const obj = assertObject(loc, value);\n\n  if (obj) {\n    if (typeof obj[\"name\"] !== \"string\") {\n      throw new Error(`${msg(loc)} set but does not contain \"name\" property string`);\n    }\n\n    for (const prop of Object.keys(obj)) {\n      const propLoc = access(loc, prop);\n      const value = obj[prop];\n\n      if (value != null && typeof value !== \"boolean\" && typeof value !== \"string\" && typeof value !== \"number\") {\n        throw new Error(`${msg(propLoc)} must be null, undefined, a boolean, a string, or a number.`);\n      }\n    }\n  }\n\n  return value;\n}\n\nfunction assertInputSourceMap(loc, value) {\n  if (value !== undefined && typeof value !== \"boolean\" && (typeof value !== \"object\" || !value)) {\n    throw new Error(`${msg(loc)} must be a boolean, object, or undefined`);\n  }\n\n  return value;\n}\n\nfunction assertString(loc, value) {\n  if (value !== undefined && typeof value !== \"string\") {\n    throw new Error(`${msg(loc)} must be a string, or undefined`);\n  }\n\n  return value;\n}\n\nfunction assertFunction(loc, value) {\n  if (value !== undefined && typeof value !== \"function\") {\n    throw new Error(`${msg(loc)} must be a function, or undefined`);\n  }\n\n  return value;\n}\n\nfunction assertBoolean(loc, value) {\n  if (value !== undefined && typeof value !== \"boolean\") {\n    throw new Error(`${msg(loc)} must be a boolean, or undefined`);\n  }\n\n  return value;\n}\n\nfunction assertObject(loc, value) {\n  if (value !== undefined && (typeof value !== \"object\" || Array.isArray(value) || !value)) {\n    throw new Error(`${msg(loc)} must be an object, or undefined`);\n  }\n\n  return value;\n}\n\nfunction assertArray(loc, value) {\n  if (value != null && !Array.isArray(value)) {\n    throw new Error(`${msg(loc)} must be an array, or undefined`);\n  }\n\n  return value;\n}\n\nfunction assertIgnoreList(loc, value) {\n  const arr = assertArray(loc, value);\n\n  if (arr) {\n    arr.forEach((item, i) => assertIgnoreItem(access(loc, i), item));\n  }\n\n  return arr;\n}\n\nfunction assertIgnoreItem(loc, value) {\n  if (typeof value !== \"string\" && typeof value !== \"function\" && !(value instanceof RegExp)) {\n    throw new Error(`${msg(loc)} must be an array of string/Function/RegExp values, or undefined`);\n  }\n\n  return value;\n}\n\nfunction assertConfigApplicableTest(loc, value) {\n  if (value === undefined) return value;\n\n  if (Array.isArray(value)) {\n    value.forEach((item, i) => {\n      if (!checkValidTest(item)) {\n        throw new Error(`${msg(access(loc, i))} must be a string/Function/RegExp.`);\n      }\n    });\n  } else if (!checkValidTest(value)) {\n    throw new Error(`${msg(loc)} must be a string/Function/RegExp, or an array of those`);\n  }\n\n  return value;\n}\n\nfunction checkValidTest(value) {\n  return typeof value === \"string\" || typeof value === \"function\" || value instanceof RegExp;\n}\n\nfunction assertConfigFileSearch(loc, value) {\n  if (value !== undefined && typeof value !== \"boolean\" && typeof value !== \"string\") {\n    throw new Error(`${msg(loc)} must be a undefined, a boolean, a string, ` + `got ${JSON.stringify(value)}`);\n  }\n\n  return value;\n}\n\nfunction assertBabelrcSearch(loc, value) {\n  if (value === undefined || typeof value === \"boolean\") return value;\n\n  if (Array.isArray(value)) {\n    value.forEach((item, i) => {\n      if (!checkValidTest(item)) {\n        throw new Error(`${msg(access(loc, i))} must be a string/Function/RegExp.`);\n      }\n    });\n  } else if (!checkValidTest(value)) {\n    throw new Error(`${msg(loc)} must be a undefined, a boolean, a string/Function/RegExp ` + `or an array of those, got ${JSON.stringify(value)}`);\n  }\n\n  return value;\n}\n\nfunction assertPluginList(loc, value) {\n  const arr = assertArray(loc, value);\n\n  if (arr) {\n    arr.forEach((item, i) => assertPluginItem(access(loc, i), item));\n  }\n\n  return arr;\n}\n\nfunction assertPluginItem(loc, value) {\n  if (Array.isArray(value)) {\n    if (value.length === 0) {\n      throw new Error(`${msg(loc)} must include an object`);\n    }\n\n    if (value.length > 3) {\n      throw new Error(`${msg(loc)} may only be a two-tuple or three-tuple`);\n    }\n\n    assertPluginTarget(access(loc, 0), value[0]);\n\n    if (value.length > 1) {\n      const opts = value[1];\n\n      if (opts !== undefined && opts !== false && (typeof opts !== \"object\" || Array.isArray(opts) || opts === null)) {\n        throw new Error(`${msg(access(loc, 1))} must be an object, false, or undefined`);\n      }\n    }\n\n    if (value.length === 3) {\n      const name = value[2];\n\n      if (name !== undefined && typeof name !== \"string\") {\n        throw new Error(`${msg(access(loc, 2))} must be a string, or undefined`);\n      }\n    }\n  } else {\n    assertPluginTarget(loc, value);\n  }\n\n  return value;\n}\n\nfunction assertPluginTarget(loc, value) {\n  if ((typeof value !== \"object\" || !value) && typeof value !== \"string\" && typeof value !== \"function\") {\n    throw new Error(`${msg(loc)} must be a string, object, function`);\n  }\n\n  return value;\n}","map":{"version":3,"sources":["/Users/alperenalkan/obss/frontend/frontend/node_modules/@babel/core/lib/config/validation/option-assertions.js"],"names":["Object","defineProperty","exports","value","msg","access","assertRootMode","assertSourceMaps","assertCompact","assertSourceType","assertCallerMetadata","assertInputSourceMap","assertString","assertFunction","assertBoolean","assertObject","assertArray","assertIgnoreList","assertConfigApplicableTest","assertConfigFileSearch","assertBabelrcSearch","assertPluginList","loc","type","parent","name","index","JSON","stringify","Error","undefined","obj","prop","keys","propLoc","Array","isArray","arr","forEach","item","i","assertIgnoreItem","RegExp","checkValidTest","assertPluginItem","length","assertPluginTarget","opts"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.msg = msg;\nexports.access = access;\nexports.assertRootMode = assertRootMode;\nexports.assertSourceMaps = assertSourceMaps;\nexports.assertCompact = assertCompact;\nexports.assertSourceType = assertSourceType;\nexports.assertCallerMetadata = assertCallerMetadata;\nexports.assertInputSourceMap = assertInputSourceMap;\nexports.assertString = assertString;\nexports.assertFunction = assertFunction;\nexports.assertBoolean = assertBoolean;\nexports.assertObject = assertObject;\nexports.assertArray = assertArray;\nexports.assertIgnoreList = assertIgnoreList;\nexports.assertConfigApplicableTest = assertConfigApplicableTest;\nexports.assertConfigFileSearch = assertConfigFileSearch;\nexports.assertBabelrcSearch = assertBabelrcSearch;\nexports.assertPluginList = assertPluginList;\n\nfunction msg(loc) {\n  switch (loc.type) {\n    case \"root\":\n      return ``;\n\n    case \"env\":\n      return `${msg(loc.parent)}.env[\"${loc.name}\"]`;\n\n    case \"overrides\":\n      return `${msg(loc.parent)}.overrides[${loc.index}]`;\n\n    case \"option\":\n      return `${msg(loc.parent)}.${loc.name}`;\n\n    case \"access\":\n      return `${msg(loc.parent)}[${JSON.stringify(loc.name)}]`;\n\n    default:\n      throw new Error(`Assertion failure: Unknown type ${loc.type}`);\n  }\n}\n\nfunction access(loc, name) {\n  return {\n    type: \"access\",\n    name,\n    parent: loc\n  };\n}\n\nfunction assertRootMode(loc, value) {\n  if (value !== undefined && value !== \"root\" && value !== \"upward\" && value !== \"upward-optional\") {\n    throw new Error(`${msg(loc)} must be a \"root\", \"upward\", \"upward-optional\" or undefined`);\n  }\n\n  return value;\n}\n\nfunction assertSourceMaps(loc, value) {\n  if (value !== undefined && typeof value !== \"boolean\" && value !== \"inline\" && value !== \"both\") {\n    throw new Error(`${msg(loc)} must be a boolean, \"inline\", \"both\", or undefined`);\n  }\n\n  return value;\n}\n\nfunction assertCompact(loc, value) {\n  if (value !== undefined && typeof value !== \"boolean\" && value !== \"auto\") {\n    throw new Error(`${msg(loc)} must be a boolean, \"auto\", or undefined`);\n  }\n\n  return value;\n}\n\nfunction assertSourceType(loc, value) {\n  if (value !== undefined && value !== \"module\" && value !== \"script\" && value !== \"unambiguous\") {\n    throw new Error(`${msg(loc)} must be \"module\", \"script\", \"unambiguous\", or undefined`);\n  }\n\n  return value;\n}\n\nfunction assertCallerMetadata(loc, value) {\n  const obj = assertObject(loc, value);\n\n  if (obj) {\n    if (typeof obj[\"name\"] !== \"string\") {\n      throw new Error(`${msg(loc)} set but does not contain \"name\" property string`);\n    }\n\n    for (const prop of Object.keys(obj)) {\n      const propLoc = access(loc, prop);\n      const value = obj[prop];\n\n      if (value != null && typeof value !== \"boolean\" && typeof value !== \"string\" && typeof value !== \"number\") {\n        throw new Error(`${msg(propLoc)} must be null, undefined, a boolean, a string, or a number.`);\n      }\n    }\n  }\n\n  return value;\n}\n\nfunction assertInputSourceMap(loc, value) {\n  if (value !== undefined && typeof value !== \"boolean\" && (typeof value !== \"object\" || !value)) {\n    throw new Error(`${msg(loc)} must be a boolean, object, or undefined`);\n  }\n\n  return value;\n}\n\nfunction assertString(loc, value) {\n  if (value !== undefined && typeof value !== \"string\") {\n    throw new Error(`${msg(loc)} must be a string, or undefined`);\n  }\n\n  return value;\n}\n\nfunction assertFunction(loc, value) {\n  if (value !== undefined && typeof value !== \"function\") {\n    throw new Error(`${msg(loc)} must be a function, or undefined`);\n  }\n\n  return value;\n}\n\nfunction assertBoolean(loc, value) {\n  if (value !== undefined && typeof value !== \"boolean\") {\n    throw new Error(`${msg(loc)} must be a boolean, or undefined`);\n  }\n\n  return value;\n}\n\nfunction assertObject(loc, value) {\n  if (value !== undefined && (typeof value !== \"object\" || Array.isArray(value) || !value)) {\n    throw new Error(`${msg(loc)} must be an object, or undefined`);\n  }\n\n  return value;\n}\n\nfunction assertArray(loc, value) {\n  if (value != null && !Array.isArray(value)) {\n    throw new Error(`${msg(loc)} must be an array, or undefined`);\n  }\n\n  return value;\n}\n\nfunction assertIgnoreList(loc, value) {\n  const arr = assertArray(loc, value);\n\n  if (arr) {\n    arr.forEach((item, i) => assertIgnoreItem(access(loc, i), item));\n  }\n\n  return arr;\n}\n\nfunction assertIgnoreItem(loc, value) {\n  if (typeof value !== \"string\" && typeof value !== \"function\" && !(value instanceof RegExp)) {\n    throw new Error(`${msg(loc)} must be an array of string/Function/RegExp values, or undefined`);\n  }\n\n  return value;\n}\n\nfunction assertConfigApplicableTest(loc, value) {\n  if (value === undefined) return value;\n\n  if (Array.isArray(value)) {\n    value.forEach((item, i) => {\n      if (!checkValidTest(item)) {\n        throw new Error(`${msg(access(loc, i))} must be a string/Function/RegExp.`);\n      }\n    });\n  } else if (!checkValidTest(value)) {\n    throw new Error(`${msg(loc)} must be a string/Function/RegExp, or an array of those`);\n  }\n\n  return value;\n}\n\nfunction checkValidTest(value) {\n  return typeof value === \"string\" || typeof value === \"function\" || value instanceof RegExp;\n}\n\nfunction assertConfigFileSearch(loc, value) {\n  if (value !== undefined && typeof value !== \"boolean\" && typeof value !== \"string\") {\n    throw new Error(`${msg(loc)} must be a undefined, a boolean, a string, ` + `got ${JSON.stringify(value)}`);\n  }\n\n  return value;\n}\n\nfunction assertBabelrcSearch(loc, value) {\n  if (value === undefined || typeof value === \"boolean\") return value;\n\n  if (Array.isArray(value)) {\n    value.forEach((item, i) => {\n      if (!checkValidTest(item)) {\n        throw new Error(`${msg(access(loc, i))} must be a string/Function/RegExp.`);\n      }\n    });\n  } else if (!checkValidTest(value)) {\n    throw new Error(`${msg(loc)} must be a undefined, a boolean, a string/Function/RegExp ` + `or an array of those, got ${JSON.stringify(value)}`);\n  }\n\n  return value;\n}\n\nfunction assertPluginList(loc, value) {\n  const arr = assertArray(loc, value);\n\n  if (arr) {\n    arr.forEach((item, i) => assertPluginItem(access(loc, i), item));\n  }\n\n  return arr;\n}\n\nfunction assertPluginItem(loc, value) {\n  if (Array.isArray(value)) {\n    if (value.length === 0) {\n      throw new Error(`${msg(loc)} must include an object`);\n    }\n\n    if (value.length > 3) {\n      throw new Error(`${msg(loc)} may only be a two-tuple or three-tuple`);\n    }\n\n    assertPluginTarget(access(loc, 0), value[0]);\n\n    if (value.length > 1) {\n      const opts = value[1];\n\n      if (opts !== undefined && opts !== false && (typeof opts !== \"object\" || Array.isArray(opts) || opts === null)) {\n        throw new Error(`${msg(access(loc, 1))} must be an object, false, or undefined`);\n      }\n    }\n\n    if (value.length === 3) {\n      const name = value[2];\n\n      if (name !== undefined && typeof name !== \"string\") {\n        throw new Error(`${msg(access(loc, 2))} must be a string, or undefined`);\n      }\n    }\n  } else {\n    assertPluginTarget(loc, value);\n  }\n\n  return value;\n}\n\nfunction assertPluginTarget(loc, value) {\n  if ((typeof value !== \"object\" || !value) && typeof value !== \"string\" && typeof value !== \"function\") {\n    throw new Error(`${msg(loc)} must be a string, object, function`);\n  }\n\n  return value;\n}"]},"metadata":{},"sourceType":"script"}