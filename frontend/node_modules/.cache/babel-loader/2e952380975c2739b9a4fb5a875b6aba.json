{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = parser;\n\nfunction _parser() {\n  const data = require(\"@babel/parser\");\n\n  _parser = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _codeFrame() {\n  const data = require(\"@babel/code-frame\");\n\n  _codeFrame = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _missingPluginHelper = _interopRequireDefault(require(\"./util/missing-plugin-helper\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction* parser(pluginPasses, {\n  parserOpts,\n  highlightCode = true,\n  filename = \"unknown\"\n}, code) {\n  try {\n    const results = [];\n\n    for (const plugins of pluginPasses) {\n      for (const plugin of plugins) {\n        const {\n          parserOverride\n        } = plugin;\n\n        if (parserOverride) {\n          const ast = parserOverride(code, parserOpts, _parser().parse);\n          if (ast !== undefined) results.push(ast);\n        }\n      }\n    }\n\n    if (results.length === 0) {\n      return (0, _parser().parse)(code, parserOpts);\n    } else if (results.length === 1) {\n      yield* [];\n\n      if (typeof results[0].then === \"function\") {\n        throw new Error(`You appear to be using an async parser plugin, ` + `which your current version of Babel does not support. ` + `If you're using a published plugin, you may need to upgrade ` + `your @babel/core version.`);\n      }\n\n      return results[0];\n    }\n\n    throw new Error(\"More than one plugin attempted to override parsing.\");\n  } catch (err) {\n    if (err.code === \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\") {\n      err.message += \"\\nConsider renaming the file to '.mjs', or setting sourceType:module \" + \"or sourceType:unambiguous in your Babel config for this file.\";\n    }\n\n    const {\n      loc,\n      missingPlugin\n    } = err;\n\n    if (loc) {\n      const codeFrame = (0, _codeFrame().codeFrameColumns)(code, {\n        start: {\n          line: loc.line,\n          column: loc.column + 1\n        }\n      }, {\n        highlightCode\n      });\n\n      if (missingPlugin) {\n        err.message = `${filename}: ` + (0, _missingPluginHelper.default)(missingPlugin[0], loc, codeFrame);\n      } else {\n        err.message = `${filename}: ${err.message}\\n\\n` + codeFrame;\n      }\n\n      err.code = \"BABEL_PARSE_ERROR\";\n    }\n\n    throw err;\n  }\n}","map":{"version":3,"sources":["/Users/alperenalkan/obss/frontend/frontend/node_modules/@babel/core/lib/parser/index.js"],"names":["Object","defineProperty","exports","value","default","parser","_parser","data","require","_codeFrame","_missingPluginHelper","_interopRequireDefault","obj","__esModule","pluginPasses","parserOpts","highlightCode","filename","code","results","plugins","plugin","parserOverride","ast","parse","undefined","push","length","then","Error","err","message","loc","missingPlugin","codeFrame","codeFrameColumns","start","line","column"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,MAAlB;;AAEA,SAASC,OAAT,GAAmB;AACjB,QAAMC,IAAI,GAAGC,OAAO,CAAC,eAAD,CAApB;;AAEAF,EAAAA,OAAO,GAAG,YAAY;AACpB,WAAOC,IAAP;AACD,GAFD;;AAIA,SAAOA,IAAP;AACD;;AAED,SAASE,UAAT,GAAsB;AACpB,QAAMF,IAAI,GAAGC,OAAO,CAAC,mBAAD,CAApB;;AAEAC,EAAAA,UAAU,GAAG,YAAY;AACvB,WAAOF,IAAP;AACD,GAFD;;AAIA,SAAOA,IAAP;AACD;;AAED,IAAIG,oBAAoB,GAAGC,sBAAsB,CAACH,OAAO,CAAC,8BAAD,CAAR,CAAjD;;AAEA,SAASG,sBAAT,CAAgCC,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAER,IAAAA,OAAO,EAAEQ;AAAX,GAArC;AAAwD;;AAE/F,UAAUP,MAAV,CAAiBS,YAAjB,EAA+B;AAC7BC,EAAAA,UAD6B;AAE7BC,EAAAA,aAAa,GAAG,IAFa;AAG7BC,EAAAA,QAAQ,GAAG;AAHkB,CAA/B,EAIGC,IAJH,EAIS;AACP,MAAI;AACF,UAAMC,OAAO,GAAG,EAAhB;;AAEA,SAAK,MAAMC,OAAX,IAAsBN,YAAtB,EAAoC;AAClC,WAAK,MAAMO,MAAX,IAAqBD,OAArB,EAA8B;AAC5B,cAAM;AACJE,UAAAA;AADI,YAEFD,MAFJ;;AAIA,YAAIC,cAAJ,EAAoB;AAClB,gBAAMC,GAAG,GAAGD,cAAc,CAACJ,IAAD,EAAOH,UAAP,EAAmBT,OAAO,GAAGkB,KAA7B,CAA1B;AACA,cAAID,GAAG,KAAKE,SAAZ,EAAuBN,OAAO,CAACO,IAAR,CAAaH,GAAb;AACxB;AACF;AACF;;AAED,QAAIJ,OAAO,CAACQ,MAAR,KAAmB,CAAvB,EAA0B;AACxB,aAAO,CAAC,GAAGrB,OAAO,GAAGkB,KAAd,EAAqBN,IAArB,EAA2BH,UAA3B,CAAP;AACD,KAFD,MAEO,IAAII,OAAO,CAACQ,MAAR,KAAmB,CAAvB,EAA0B;AAC/B,aAAO,EAAP;;AAEA,UAAI,OAAOR,OAAO,CAAC,CAAD,CAAP,CAAWS,IAAlB,KAA2B,UAA/B,EAA2C;AACzC,cAAM,IAAIC,KAAJ,CAAW,iDAAD,GAAqD,wDAArD,GAAgH,8DAAhH,GAAiL,2BAA3L,CAAN;AACD;;AAED,aAAOV,OAAO,CAAC,CAAD,CAAd;AACD;;AAED,UAAM,IAAIU,KAAJ,CAAU,qDAAV,CAAN;AACD,GA7BD,CA6BE,OAAOC,GAAP,EAAY;AACZ,QAAIA,GAAG,CAACZ,IAAJ,KAAa,yCAAjB,EAA4D;AAC1DY,MAAAA,GAAG,CAACC,OAAJ,IAAe,0EAA0E,+DAAzF;AACD;;AAED,UAAM;AACJC,MAAAA,GADI;AAEJC,MAAAA;AAFI,QAGFH,GAHJ;;AAKA,QAAIE,GAAJ,EAAS;AACP,YAAME,SAAS,GAAG,CAAC,GAAGzB,UAAU,GAAG0B,gBAAjB,EAAmCjB,IAAnC,EAAyC;AACzDkB,QAAAA,KAAK,EAAE;AACLC,UAAAA,IAAI,EAAEL,GAAG,CAACK,IADL;AAELC,UAAAA,MAAM,EAAEN,GAAG,CAACM,MAAJ,GAAa;AAFhB;AADkD,OAAzC,EAKf;AACDtB,QAAAA;AADC,OALe,CAAlB;;AASA,UAAIiB,aAAJ,EAAmB;AACjBH,QAAAA,GAAG,CAACC,OAAJ,GAAe,GAAEd,QAAS,IAAZ,GAAkB,CAAC,GAAGP,oBAAoB,CAACN,OAAzB,EAAkC6B,aAAa,CAAC,CAAD,CAA/C,EAAoDD,GAApD,EAAyDE,SAAzD,CAAhC;AACD,OAFD,MAEO;AACLJ,QAAAA,GAAG,CAACC,OAAJ,GAAe,GAAEd,QAAS,KAAIa,GAAG,CAACC,OAAQ,MAA5B,GAAoCG,SAAlD;AACD;;AAEDJ,MAAAA,GAAG,CAACZ,IAAJ,GAAW,mBAAX;AACD;;AAED,UAAMY,GAAN;AACD;AACF","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = parser;\n\nfunction _parser() {\n  const data = require(\"@babel/parser\");\n\n  _parser = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _codeFrame() {\n  const data = require(\"@babel/code-frame\");\n\n  _codeFrame = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _missingPluginHelper = _interopRequireDefault(require(\"./util/missing-plugin-helper\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction* parser(pluginPasses, {\n  parserOpts,\n  highlightCode = true,\n  filename = \"unknown\"\n}, code) {\n  try {\n    const results = [];\n\n    for (const plugins of pluginPasses) {\n      for (const plugin of plugins) {\n        const {\n          parserOverride\n        } = plugin;\n\n        if (parserOverride) {\n          const ast = parserOverride(code, parserOpts, _parser().parse);\n          if (ast !== undefined) results.push(ast);\n        }\n      }\n    }\n\n    if (results.length === 0) {\n      return (0, _parser().parse)(code, parserOpts);\n    } else if (results.length === 1) {\n      yield* [];\n\n      if (typeof results[0].then === \"function\") {\n        throw new Error(`You appear to be using an async parser plugin, ` + `which your current version of Babel does not support. ` + `If you're using a published plugin, you may need to upgrade ` + `your @babel/core version.`);\n      }\n\n      return results[0];\n    }\n\n    throw new Error(\"More than one plugin attempted to override parsing.\");\n  } catch (err) {\n    if (err.code === \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\") {\n      err.message += \"\\nConsider renaming the file to '.mjs', or setting sourceType:module \" + \"or sourceType:unambiguous in your Babel config for this file.\";\n    }\n\n    const {\n      loc,\n      missingPlugin\n    } = err;\n\n    if (loc) {\n      const codeFrame = (0, _codeFrame().codeFrameColumns)(code, {\n        start: {\n          line: loc.line,\n          column: loc.column + 1\n        }\n      }, {\n        highlightCode\n      });\n\n      if (missingPlugin) {\n        err.message = `${filename}: ` + (0, _missingPluginHelper.default)(missingPlugin[0], loc, codeFrame);\n      } else {\n        err.message = `${filename}: ${err.message}\\n\\n` + codeFrame;\n      }\n\n      err.code = \"BABEL_PARSE_ERROR\";\n    }\n\n    throw err;\n  }\n}"]},"metadata":{},"sourceType":"script"}