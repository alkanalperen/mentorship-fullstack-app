{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validatePluginObject = validatePluginObject;\n\nvar _optionAssertions = require(\"./option-assertions\");\n\nconst VALIDATORS = {\n  name: _optionAssertions.assertString,\n  manipulateOptions: _optionAssertions.assertFunction,\n  pre: _optionAssertions.assertFunction,\n  post: _optionAssertions.assertFunction,\n  inherits: _optionAssertions.assertFunction,\n  visitor: assertVisitorMap,\n  parserOverride: _optionAssertions.assertFunction,\n  generatorOverride: _optionAssertions.assertFunction\n};\n\nfunction assertVisitorMap(loc, value) {\n  const obj = (0, _optionAssertions.assertObject)(loc, value);\n\n  if (obj) {\n    Object.keys(obj).forEach(prop => assertVisitorHandler(prop, obj[prop]));\n\n    if (obj.enter || obj.exit) {\n      throw new Error(`${(0, _optionAssertions.msg)(loc)} cannot contain catch-all \"enter\" or \"exit\" handlers. Please target individual nodes.`);\n    }\n  }\n\n  return obj;\n}\n\nfunction assertVisitorHandler(key, value) {\n  if (value && typeof value === \"object\") {\n    Object.keys(value).forEach(handler => {\n      if (handler !== \"enter\" && handler !== \"exit\") {\n        throw new Error(`.visitor[\"${key}\"] may only have .enter and/or .exit handlers.`);\n      }\n    });\n  } else if (typeof value !== \"function\") {\n    throw new Error(`.visitor[\"${key}\"] must be a function`);\n  }\n\n  return value;\n}\n\nfunction validatePluginObject(obj) {\n  const rootPath = {\n    type: \"root\",\n    source: \"plugin\"\n  };\n  Object.keys(obj).forEach(key => {\n    const validator = VALIDATORS[key];\n\n    if (validator) {\n      const optLoc = {\n        type: \"option\",\n        name: key,\n        parent: rootPath\n      };\n      validator(optLoc, obj[key]);\n    } else {\n      const invalidPluginPropertyError = new Error(`.${key} is not a valid Plugin property`);\n      invalidPluginPropertyError.code = \"BABEL_UNKNOWN_PLUGIN_PROPERTY\";\n      throw invalidPluginPropertyError;\n    }\n  });\n  return obj;\n}","map":{"version":3,"sources":["/Users/alperenalkan/obss/frontend/frontend/node_modules/@babel/core/lib/config/validation/plugins.js"],"names":["Object","defineProperty","exports","value","validatePluginObject","_optionAssertions","require","VALIDATORS","name","assertString","manipulateOptions","assertFunction","pre","post","inherits","visitor","assertVisitorMap","parserOverride","generatorOverride","loc","obj","assertObject","keys","forEach","prop","assertVisitorHandler","enter","exit","Error","msg","key","handler","rootPath","type","source","validator","optLoc","parent","invalidPluginPropertyError","code"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validatePluginObject = validatePluginObject;\n\nvar _optionAssertions = require(\"./option-assertions\");\n\nconst VALIDATORS = {\n  name: _optionAssertions.assertString,\n  manipulateOptions: _optionAssertions.assertFunction,\n  pre: _optionAssertions.assertFunction,\n  post: _optionAssertions.assertFunction,\n  inherits: _optionAssertions.assertFunction,\n  visitor: assertVisitorMap,\n  parserOverride: _optionAssertions.assertFunction,\n  generatorOverride: _optionAssertions.assertFunction\n};\n\nfunction assertVisitorMap(loc, value) {\n  const obj = (0, _optionAssertions.assertObject)(loc, value);\n\n  if (obj) {\n    Object.keys(obj).forEach(prop => assertVisitorHandler(prop, obj[prop]));\n\n    if (obj.enter || obj.exit) {\n      throw new Error(`${(0, _optionAssertions.msg)(loc)} cannot contain catch-all \"enter\" or \"exit\" handlers. Please target individual nodes.`);\n    }\n  }\n\n  return obj;\n}\n\nfunction assertVisitorHandler(key, value) {\n  if (value && typeof value === \"object\") {\n    Object.keys(value).forEach(handler => {\n      if (handler !== \"enter\" && handler !== \"exit\") {\n        throw new Error(`.visitor[\"${key}\"] may only have .enter and/or .exit handlers.`);\n      }\n    });\n  } else if (typeof value !== \"function\") {\n    throw new Error(`.visitor[\"${key}\"] must be a function`);\n  }\n\n  return value;\n}\n\nfunction validatePluginObject(obj) {\n  const rootPath = {\n    type: \"root\",\n    source: \"plugin\"\n  };\n  Object.keys(obj).forEach(key => {\n    const validator = VALIDATORS[key];\n\n    if (validator) {\n      const optLoc = {\n        type: \"option\",\n        name: key,\n        parent: rootPath\n      };\n      validator(optLoc, obj[key]);\n    } else {\n      const invalidPluginPropertyError = new Error(`.${key} is not a valid Plugin property`);\n      invalidPluginPropertyError.code = \"BABEL_UNKNOWN_PLUGIN_PROPERTY\";\n      throw invalidPluginPropertyError;\n    }\n  });\n  return obj;\n}"]},"metadata":{},"sourceType":"script"}