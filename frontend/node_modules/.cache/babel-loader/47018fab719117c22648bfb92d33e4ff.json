{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = makeAPI;\n\nfunction _semver() {\n  const data = _interopRequireDefault(require(\"semver\"));\n\n  _semver = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _ = require(\"../../\");\n\nvar _caching = require(\"../caching\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction makeAPI(cache) {\n  const env = value => cache.using(data => {\n    if (typeof value === \"undefined\") return data.envName;\n\n    if (typeof value === \"function\") {\n      return (0, _caching.assertSimpleType)(value(data.envName));\n    }\n\n    if (!Array.isArray(value)) value = [value];\n    return value.some(entry => {\n      if (typeof entry !== \"string\") {\n        throw new Error(\"Unexpected non-string value\");\n      }\n\n      return entry === data.envName;\n    });\n  });\n\n  const caller = cb => cache.using(data => (0, _caching.assertSimpleType)(cb(data.caller)));\n\n  return {\n    version: _.version,\n    cache: cache.simple(),\n    env,\n    async: () => false,\n    caller,\n    assertVersion\n  };\n}\n\nfunction assertVersion(range) {\n  if (typeof range === \"number\") {\n    if (!Number.isInteger(range)) {\n      throw new Error(\"Expected string or integer value.\");\n    }\n\n    range = `^${range}.0.0-0`;\n  }\n\n  if (typeof range !== \"string\") {\n    throw new Error(\"Expected string or integer value.\");\n  }\n\n  if (_semver().default.satisfies(_.version, range)) return;\n  const limit = Error.stackTraceLimit;\n\n  if (typeof limit === \"number\" && limit < 25) {\n    Error.stackTraceLimit = 25;\n  }\n\n  const err = new Error(`Requires Babel \"${range}\", but was loaded with \"${_.version}\". ` + `If you are sure you have a compatible version of @babel/core, ` + `it is likely that something in your build process is loading the ` + `wrong version. Inspect the stack trace of this error to look for ` + `the first entry that doesn't mention \"@babel/core\" or \"babel-core\" ` + `to see what is calling Babel.`);\n\n  if (typeof limit === \"number\") {\n    Error.stackTraceLimit = limit;\n  }\n\n  throw Object.assign(err, {\n    code: \"BABEL_VERSION_UNSUPPORTED\",\n    version: _.version,\n    range\n  });\n}","map":{"version":3,"sources":["/Users/alperenalkan/obss/frontend/frontend/node_modules/@babel/core/lib/config/helpers/config-api.js"],"names":["Object","defineProperty","exports","value","default","makeAPI","_semver","data","_interopRequireDefault","require","_","_caching","obj","__esModule","cache","env","using","envName","assertSimpleType","Array","isArray","some","entry","Error","caller","cb","version","simple","async","assertVersion","range","Number","isInteger","satisfies","limit","stackTraceLimit","err","assign","code"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = makeAPI;\n\nfunction _semver() {\n  const data = _interopRequireDefault(require(\"semver\"));\n\n  _semver = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _ = require(\"../../\");\n\nvar _caching = require(\"../caching\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction makeAPI(cache) {\n  const env = value => cache.using(data => {\n    if (typeof value === \"undefined\") return data.envName;\n\n    if (typeof value === \"function\") {\n      return (0, _caching.assertSimpleType)(value(data.envName));\n    }\n\n    if (!Array.isArray(value)) value = [value];\n    return value.some(entry => {\n      if (typeof entry !== \"string\") {\n        throw new Error(\"Unexpected non-string value\");\n      }\n\n      return entry === data.envName;\n    });\n  });\n\n  const caller = cb => cache.using(data => (0, _caching.assertSimpleType)(cb(data.caller)));\n\n  return {\n    version: _.version,\n    cache: cache.simple(),\n    env,\n    async: () => false,\n    caller,\n    assertVersion\n  };\n}\n\nfunction assertVersion(range) {\n  if (typeof range === \"number\") {\n    if (!Number.isInteger(range)) {\n      throw new Error(\"Expected string or integer value.\");\n    }\n\n    range = `^${range}.0.0-0`;\n  }\n\n  if (typeof range !== \"string\") {\n    throw new Error(\"Expected string or integer value.\");\n  }\n\n  if (_semver().default.satisfies(_.version, range)) return;\n  const limit = Error.stackTraceLimit;\n\n  if (typeof limit === \"number\" && limit < 25) {\n    Error.stackTraceLimit = 25;\n  }\n\n  const err = new Error(`Requires Babel \"${range}\", but was loaded with \"${_.version}\". ` + `If you are sure you have a compatible version of @babel/core, ` + `it is likely that something in your build process is loading the ` + `wrong version. Inspect the stack trace of this error to look for ` + `the first entry that doesn't mention \"@babel/core\" or \"babel-core\" ` + `to see what is calling Babel.`);\n\n  if (typeof limit === \"number\") {\n    Error.stackTraceLimit = limit;\n  }\n\n  throw Object.assign(err, {\n    code: \"BABEL_VERSION_UNSUPPORTED\",\n    version: _.version,\n    range\n  });\n}"]},"metadata":{},"sourceType":"script"}