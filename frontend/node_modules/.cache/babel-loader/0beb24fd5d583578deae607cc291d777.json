{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ConfigPrinter = exports.ChainFormatter = void 0;\nconst ChainFormatter = {\n  Programmatic: 0,\n  Config: 1\n};\nexports.ChainFormatter = ChainFormatter;\nconst Formatter = {\n  title(type, callerName, filepath) {\n    let title = \"\";\n\n    if (type === ChainFormatter.Programmatic) {\n      title = \"programmatic options\";\n\n      if (callerName) {\n        title += \" from \" + callerName;\n      }\n    } else {\n      title = \"config \" + filepath;\n    }\n\n    return title;\n  },\n\n  loc(index, envName) {\n    let loc = \"\";\n\n    if (index != null) {\n      loc += `.overrides[${index}]`;\n    }\n\n    if (envName != null) {\n      loc += `.env[\"${envName}\"]`;\n    }\n\n    return loc;\n  },\n\n  optionsAndDescriptors(opt) {\n    const content = Object.assign({}, opt.options);\n    delete content.overrides;\n    delete content.env;\n    const pluginDescriptors = [...opt.plugins()];\n\n    if (pluginDescriptors.length) {\n      content.plugins = pluginDescriptors.map(d => descriptorToConfig(d));\n    }\n\n    const presetDescriptors = [...opt.presets()];\n\n    if (presetDescriptors.length) {\n      content.presets = [...presetDescriptors].map(d => descriptorToConfig(d));\n    }\n\n    return JSON.stringify(content, undefined, 2);\n  }\n\n};\n\nfunction descriptorToConfig(d) {\n  var _d$file;\n\n  let name = (_d$file = d.file) == null ? void 0 : _d$file.request;\n\n  if (name == null) {\n    if (typeof d.value === \"object\") {\n      name = d.value;\n    } else if (typeof d.value === \"function\") {\n      name = `[Function: ${d.value.toString().substr(0, 50)} ... ]`;\n    }\n  }\n\n  if (name == null) {\n    name = \"[Unknown]\";\n  }\n\n  if (d.options === undefined) {\n    return name;\n  } else if (d.name == null) {\n    return [name, d.options];\n  } else {\n    return [name, d.options, d.name];\n  }\n}\n\nclass ConfigPrinter {\n  constructor() {\n    this._stack = [];\n  }\n\n  configure(enabled, type, {\n    callerName,\n    filepath\n  }) {\n    if (!enabled) return () => {};\n    return (content, index, envName) => {\n      this._stack.push({\n        type,\n        callerName,\n        filepath,\n        content,\n        index,\n        envName\n      });\n    };\n  }\n\n  static format(config) {\n    let title = Formatter.title(config.type, config.callerName, config.filepath);\n    const loc = Formatter.loc(config.index, config.envName);\n    if (loc) title += ` ${loc}`;\n    const content = Formatter.optionsAndDescriptors(config.content);\n    return `${title}\\n${content}`;\n  }\n\n  output() {\n    if (this._stack.length === 0) return \"\";\n    return this._stack.map(s => ConfigPrinter.format(s)).join(\"\\n\\n\");\n  }\n\n}\n\nexports.ConfigPrinter = ConfigPrinter;","map":{"version":3,"sources":["/Users/alperenalkan/obss/frontend/frontend/node_modules/@babel/core/lib/config/printer.js"],"names":["Object","defineProperty","exports","value","ConfigPrinter","ChainFormatter","Programmatic","Config","Formatter","title","type","callerName","filepath","loc","index","envName","optionsAndDescriptors","opt","content","assign","options","overrides","env","pluginDescriptors","plugins","length","map","d","descriptorToConfig","presetDescriptors","presets","JSON","stringify","undefined","_d$file","name","file","request","toString","substr","constructor","_stack","configure","enabled","push","format","config","output","s","join"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ConfigPrinter = exports.ChainFormatter = void 0;\nconst ChainFormatter = {\n  Programmatic: 0,\n  Config: 1\n};\nexports.ChainFormatter = ChainFormatter;\nconst Formatter = {\n  title(type, callerName, filepath) {\n    let title = \"\";\n\n    if (type === ChainFormatter.Programmatic) {\n      title = \"programmatic options\";\n\n      if (callerName) {\n        title += \" from \" + callerName;\n      }\n    } else {\n      title = \"config \" + filepath;\n    }\n\n    return title;\n  },\n\n  loc(index, envName) {\n    let loc = \"\";\n\n    if (index != null) {\n      loc += `.overrides[${index}]`;\n    }\n\n    if (envName != null) {\n      loc += `.env[\"${envName}\"]`;\n    }\n\n    return loc;\n  },\n\n  optionsAndDescriptors(opt) {\n    const content = Object.assign({}, opt.options);\n    delete content.overrides;\n    delete content.env;\n    const pluginDescriptors = [...opt.plugins()];\n\n    if (pluginDescriptors.length) {\n      content.plugins = pluginDescriptors.map(d => descriptorToConfig(d));\n    }\n\n    const presetDescriptors = [...opt.presets()];\n\n    if (presetDescriptors.length) {\n      content.presets = [...presetDescriptors].map(d => descriptorToConfig(d));\n    }\n\n    return JSON.stringify(content, undefined, 2);\n  }\n\n};\n\nfunction descriptorToConfig(d) {\n  var _d$file;\n\n  let name = (_d$file = d.file) == null ? void 0 : _d$file.request;\n\n  if (name == null) {\n    if (typeof d.value === \"object\") {\n      name = d.value;\n    } else if (typeof d.value === \"function\") {\n      name = `[Function: ${d.value.toString().substr(0, 50)} ... ]`;\n    }\n  }\n\n  if (name == null) {\n    name = \"[Unknown]\";\n  }\n\n  if (d.options === undefined) {\n    return name;\n  } else if (d.name == null) {\n    return [name, d.options];\n  } else {\n    return [name, d.options, d.name];\n  }\n}\n\nclass ConfigPrinter {\n  constructor() {\n    this._stack = [];\n  }\n\n  configure(enabled, type, {\n    callerName,\n    filepath\n  }) {\n    if (!enabled) return () => {};\n    return (content, index, envName) => {\n      this._stack.push({\n        type,\n        callerName,\n        filepath,\n        content,\n        index,\n        envName\n      });\n    };\n  }\n\n  static format(config) {\n    let title = Formatter.title(config.type, config.callerName, config.filepath);\n    const loc = Formatter.loc(config.index, config.envName);\n    if (loc) title += ` ${loc}`;\n    const content = Formatter.optionsAndDescriptors(config.content);\n    return `${title}\\n${content}`;\n  }\n\n  output() {\n    if (this._stack.length === 0) return \"\";\n    return this._stack.map(s => ConfigPrinter.format(s)).join(\"\\n\\n\");\n  }\n\n}\n\nexports.ConfigPrinter = ConfigPrinter;"]},"metadata":{},"sourceType":"script"}